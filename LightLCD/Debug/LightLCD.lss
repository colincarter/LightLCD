
LightLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00802000  00002d9e  00002e32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000021b  00802002  00802002  00002e34  2**0
                  ALLOC
  3 .stab         00000768  00000000  00000000  00002e34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  0000359c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000800  00000000  00000000  00003688  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000ad4  00000000  00000000  00003e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006a15  00000000  00000000  0000495c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016b5  00000000  00000000  0000b371  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00009abd  00000000  00000000  0000ca26  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000dd0  00000000  00000000  000164e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002cdb  00000000  00000000  000172b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 002213b5  00000000  00000000  00019f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000e16  00000000  00000000  0023b344  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000708  00000000  00000000  0023c160  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
	usart_clear_tx_complete(usart);
	return usart_get(usart);
}
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
	movw    r30, r24                // Load addr into Z
       2:	00 00       	nop
	ldi     r18, CCP_IOREG          // Load magic CCP value
       4:	1c c1       	rjmp	.+568    	; 0x23e <__bad_interrupt>
	out     CCP, r18                // Start CCP handshake
       6:	00 00       	nop
	st      Z, r22                  // Write value to I/O register
       8:	1a c1       	rjmp	.+564    	; 0x23e <__bad_interrupt>
	ret                             // Return to caller
       a:	00 00       	nop
       c:	18 c1       	rjmp	.+560    	; 0x23e <__bad_interrupt>
       e:	00 00       	nop
      10:	16 c1       	rjmp	.+556    	; 0x23e <__bad_interrupt>
      12:	00 00       	nop
      14:	14 c1       	rjmp	.+552    	; 0x23e <__bad_interrupt>
      16:	00 00       	nop
      18:	12 c1       	rjmp	.+548    	; 0x23e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	10 c1       	rjmp	.+544    	; 0x23e <__bad_interrupt>
      1e:	00 00       	nop
      20:	0e c1       	rjmp	.+540    	; 0x23e <__bad_interrupt>
      22:	00 00       	nop
      24:	0c c1       	rjmp	.+536    	; 0x23e <__bad_interrupt>
      26:	00 00       	nop
      28:	0a c1       	rjmp	.+532    	; 0x23e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	08 c1       	rjmp	.+528    	; 0x23e <__bad_interrupt>
      2e:	00 00       	nop
      30:	06 c1       	rjmp	.+524    	; 0x23e <__bad_interrupt>
      32:	00 00       	nop
      34:	04 c1       	rjmp	.+520    	; 0x23e <__bad_interrupt>
      36:	00 00       	nop
      38:	02 c1       	rjmp	.+516    	; 0x23e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	00 c1       	rjmp	.+512    	; 0x23e <__bad_interrupt>
      3e:	00 00       	nop
      40:	fe c0       	rjmp	.+508    	; 0x23e <__bad_interrupt>
      42:	00 00       	nop
      44:	fc c0       	rjmp	.+504    	; 0x23e <__bad_interrupt>
      46:	00 00       	nop
      48:	fa c0       	rjmp	.+500    	; 0x23e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f8 c0       	rjmp	.+496    	; 0x23e <__bad_interrupt>
      4e:	00 00       	nop
      50:	f6 c0       	rjmp	.+492    	; 0x23e <__bad_interrupt>
      52:	00 00       	nop
      54:	f4 c0       	rjmp	.+488    	; 0x23e <__bad_interrupt>
      56:	00 00       	nop
      58:	f2 c0       	rjmp	.+484    	; 0x23e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f0 c0       	rjmp	.+480    	; 0x23e <__bad_interrupt>
      5e:	00 00       	nop
      60:	ee c0       	rjmp	.+476    	; 0x23e <__bad_interrupt>
      62:	00 00       	nop
      64:	ec c0       	rjmp	.+472    	; 0x23e <__bad_interrupt>
      66:	00 00       	nop
      68:	ea c0       	rjmp	.+468    	; 0x23e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e8 c0       	rjmp	.+464    	; 0x23e <__bad_interrupt>
      6e:	00 00       	nop
      70:	e6 c0       	rjmp	.+460    	; 0x23e <__bad_interrupt>
      72:	00 00       	nop
      74:	e4 c0       	rjmp	.+456    	; 0x23e <__bad_interrupt>
      76:	00 00       	nop
      78:	e2 c0       	rjmp	.+452    	; 0x23e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e0 c0       	rjmp	.+448    	; 0x23e <__bad_interrupt>
      7e:	00 00       	nop
      80:	de c0       	rjmp	.+444    	; 0x23e <__bad_interrupt>
      82:	00 00       	nop
      84:	dc c0       	rjmp	.+440    	; 0x23e <__bad_interrupt>
      86:	00 00       	nop
      88:	da c0       	rjmp	.+436    	; 0x23e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d8 c0       	rjmp	.+432    	; 0x23e <__bad_interrupt>
      8e:	00 00       	nop
      90:	d6 c0       	rjmp	.+428    	; 0x23e <__bad_interrupt>
      92:	00 00       	nop
      94:	d4 c0       	rjmp	.+424    	; 0x23e <__bad_interrupt>
      96:	00 00       	nop
      98:	d2 c0       	rjmp	.+420    	; 0x23e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__vector_39>
      a0:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__vector_40>
      a4:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_41>
      a8:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__vector_42>
      ac:	c8 c0       	rjmp	.+400    	; 0x23e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c6 c0       	rjmp	.+396    	; 0x23e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c4 c0       	rjmp	.+392    	; 0x23e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c2 c0       	rjmp	.+388    	; 0x23e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c0 c0       	rjmp	.+384    	; 0x23e <__bad_interrupt>
      be:	00 00       	nop
      c0:	be c0       	rjmp	.+380    	; 0x23e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bc c0       	rjmp	.+376    	; 0x23e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ba c0       	rjmp	.+372    	; 0x23e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b8 c0       	rjmp	.+368    	; 0x23e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b6 c0       	rjmp	.+364    	; 0x23e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b4 c0       	rjmp	.+360    	; 0x23e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b2 c0       	rjmp	.+356    	; 0x23e <__bad_interrupt>
      da:	00 00       	nop
      dc:	b0 c0       	rjmp	.+352    	; 0x23e <__bad_interrupt>
      de:	00 00       	nop
      e0:	ae c0       	rjmp	.+348    	; 0x23e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ac c0       	rjmp	.+344    	; 0x23e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	aa c0       	rjmp	.+340    	; 0x23e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a8 c0       	rjmp	.+336    	; 0x23e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a6 c0       	rjmp	.+332    	; 0x23e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a4 c0       	rjmp	.+328    	; 0x23e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a2 c0       	rjmp	.+324    	; 0x23e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a0 c0       	rjmp	.+320    	; 0x23e <__bad_interrupt>
      fe:	00 00       	nop
     100:	9e c0       	rjmp	.+316    	; 0x23e <__bad_interrupt>
     102:	00 00       	nop
     104:	9c c0       	rjmp	.+312    	; 0x23e <__bad_interrupt>
     106:	00 00       	nop
     108:	9a c0       	rjmp	.+308    	; 0x23e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	98 c0       	rjmp	.+304    	; 0x23e <__bad_interrupt>
     10e:	00 00       	nop
     110:	96 c0       	rjmp	.+300    	; 0x23e <__bad_interrupt>
     112:	00 00       	nop
     114:	94 c0       	rjmp	.+296    	; 0x23e <__bad_interrupt>
     116:	00 00       	nop
     118:	92 c0       	rjmp	.+292    	; 0x23e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__vector_71>
     120:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__vector_72>
     124:	0c 94 91 09 	jmp	0x1322	; 0x1322 <__vector_73>
     128:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__vector_74>
     12c:	88 c0       	rjmp	.+272    	; 0x23e <__bad_interrupt>
     12e:	00 00       	nop
     130:	86 c0       	rjmp	.+268    	; 0x23e <__bad_interrupt>
     132:	00 00       	nop
     134:	84 c0       	rjmp	.+264    	; 0x23e <__bad_interrupt>
     136:	00 00       	nop
     138:	82 c0       	rjmp	.+260    	; 0x23e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	80 c0       	rjmp	.+256    	; 0x23e <__bad_interrupt>
     13e:	00 00       	nop
     140:	7e c0       	rjmp	.+252    	; 0x23e <__bad_interrupt>
     142:	00 00       	nop
     144:	7c c0       	rjmp	.+248    	; 0x23e <__bad_interrupt>
     146:	00 00       	nop
     148:	7a c0       	rjmp	.+244    	; 0x23e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	78 c0       	rjmp	.+240    	; 0x23e <__bad_interrupt>
     14e:	00 00       	nop
     150:	76 c0       	rjmp	.+236    	; 0x23e <__bad_interrupt>
     152:	00 00       	nop
     154:	74 c0       	rjmp	.+232    	; 0x23e <__bad_interrupt>
     156:	00 00       	nop
     158:	72 c0       	rjmp	.+228    	; 0x23e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	70 c0       	rjmp	.+224    	; 0x23e <__bad_interrupt>
     15e:	00 00       	nop
     160:	6e c0       	rjmp	.+220    	; 0x23e <__bad_interrupt>
     162:	00 00       	nop
     164:	6c c0       	rjmp	.+216    	; 0x23e <__bad_interrupt>
     166:	00 00       	nop
     168:	6a c0       	rjmp	.+212    	; 0x23e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	68 c0       	rjmp	.+208    	; 0x23e <__bad_interrupt>
     16e:	00 00       	nop
     170:	66 c0       	rjmp	.+204    	; 0x23e <__bad_interrupt>
     172:	00 00       	nop
     174:	64 c0       	rjmp	.+200    	; 0x23e <__bad_interrupt>
     176:	00 00       	nop
     178:	62 c0       	rjmp	.+196    	; 0x23e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	60 c0       	rjmp	.+192    	; 0x23e <__bad_interrupt>
     17e:	00 00       	nop
     180:	5e c0       	rjmp	.+188    	; 0x23e <__bad_interrupt>
     182:	00 00       	nop
     184:	5c c0       	rjmp	.+184    	; 0x23e <__bad_interrupt>
     186:	00 00       	nop
     188:	5a c0       	rjmp	.+180    	; 0x23e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	58 c0       	rjmp	.+176    	; 0x23e <__bad_interrupt>
     18e:	00 00       	nop
     190:	56 c0       	rjmp	.+172    	; 0x23e <__bad_interrupt>
     192:	00 00       	nop
     194:	54 c0       	rjmp	.+168    	; 0x23e <__bad_interrupt>
     196:	00 00       	nop
     198:	52 c0       	rjmp	.+164    	; 0x23e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	50 c0       	rjmp	.+160    	; 0x23e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4e c0       	rjmp	.+156    	; 0x23e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4c c0       	rjmp	.+152    	; 0x23e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4a c0       	rjmp	.+148    	; 0x23e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	48 c0       	rjmp	.+144    	; 0x23e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	46 c0       	rjmp	.+140    	; 0x23e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	44 c0       	rjmp	.+136    	; 0x23e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	42 c0       	rjmp	.+132    	; 0x23e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	40 c0       	rjmp	.+128    	; 0x23e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3e c0       	rjmp	.+124    	; 0x23e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3c c0       	rjmp	.+120    	; 0x23e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3a c0       	rjmp	.+116    	; 0x23e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	38 c0       	rjmp	.+112    	; 0x23e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	36 c0       	rjmp	.+108    	; 0x23e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	34 c0       	rjmp	.+104    	; 0x23e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	32 c0       	rjmp	.+100    	; 0x23e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	30 c0       	rjmp	.+96     	; 0x23e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2e c0       	rjmp	.+92     	; 0x23e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2c c0       	rjmp	.+88     	; 0x23e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2a c0       	rjmp	.+84     	; 0x23e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	28 c0       	rjmp	.+80     	; 0x23e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	26 c0       	rjmp	.+76     	; 0x23e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	24 c0       	rjmp	.+72     	; 0x23e <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	22 c0       	rjmp	.+68     	; 0x23e <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e5       	ldi	r29, 0x5F	; 95
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	ee e9       	ldi	r30, 0x9E	; 158
     214:	fd e2       	ldi	r31, 0x2D	; 45
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a2 30       	cpi	r26, 0x02	; 2
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	12 e2       	ldi	r17, 0x22	; 34
     228:	a2 e0       	ldi	r26, 0x02	; 2
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	ad 31       	cpi	r26, 0x1D	; 29
     232:	b1 07       	cpc	r27, r17
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 55 16 	call	0x2caa	; 0x2caa <main>
     23a:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <_exit>

0000023e <__bad_interrupt>:
     23e:	e0 ce       	rjmp	.-576    	; 0x0 <__vectors>

00000240 <ioport_pin_to_port>:
 * \param pin PORT pin number. This number can be generated by the macro
 * CREATE_PORT_PIN.
 * \return Pointer to the port on which the pin is located.
 */
static inline PORT_t *ioport_pin_to_port(port_pin_t pin)
{
     240:	df 93       	push	r29
     242:	cf 93       	push	r28
     244:	0f 92       	push	r0
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
     24a:	89 83       	std	Y+1, r24	; 0x01
	// Each port has an offset of 0x20
	return (PORT_t *)((uintptr_t)&PORTA + (pin >> 3) * 0x20);
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	86 95       	lsr	r24
     250:	86 95       	lsr	r24
     252:	86 95       	lsr	r24
     254:	88 2f       	mov	r24, r24
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	c0 96       	adiw	r24, 0x30	; 48
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	82 95       	swap	r24
     260:	92 95       	swap	r25
     262:	90 7f       	andi	r25, 0xF0	; 240
     264:	98 27       	eor	r25, r24
     266:	80 7f       	andi	r24, 0xF0	; 240
     268:	98 27       	eor	r25, r24
}
     26a:	0f 90       	pop	r0
     26c:	cf 91       	pop	r28
     26e:	df 91       	pop	r29
     270:	08 95       	ret

00000272 <ioport_pin_to_mask>:
 *
 * \param pin PORT pin number.
 * \return Pin mask.
 */
static inline pin_mask_t ioport_pin_to_mask(port_pin_t pin)
{
     272:	df 93       	push	r29
     274:	cf 93       	push	r28
     276:	0f 92       	push	r0
     278:	cd b7       	in	r28, 0x3d	; 61
     27a:	de b7       	in	r29, 0x3e	; 62
     27c:	89 83       	std	Y+1, r24	; 0x01
	return 1U << (pin & 0x7);
     27e:	89 81       	ldd	r24, Y+1	; 0x01
     280:	88 2f       	mov	r24, r24
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	9c 01       	movw	r18, r24
     286:	27 70       	andi	r18, 0x07	; 7
     288:	30 70       	andi	r19, 0x00	; 0
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	02 2e       	mov	r0, r18
     290:	02 c0       	rjmp	.+4      	; 0x296 <ioport_pin_to_mask+0x24>
     292:	88 0f       	add	r24, r24
     294:	99 1f       	adc	r25, r25
     296:	0a 94       	dec	r0
     298:	e2 f7       	brpl	.-8      	; 0x292 <ioport_pin_to_mask+0x20>
}
     29a:	0f 90       	pop	r0
     29c:	cf 91       	pop	r28
     29e:	df 91       	pop	r29
     2a0:	08 95       	ret

000002a2 <ioport_set_value>:
 * \param value The desired state of the pin. \a true means drive the
 * pin high (towards Vdd), while \a false means drive the pin low
 * (towards Vss).
 */
static inline void ioport_set_value(port_pin_t pin, bool value)
{
     2a2:	df 93       	push	r29
     2a4:	cf 93       	push	r28
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <ioport_set_value+0x6>
     2a8:	0f 92       	push	r0
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	8b 83       	std	Y+3, r24	; 0x03
     2b0:	6c 83       	std	Y+4, r22	; 0x04
	PORT_t *port = ioport_pin_to_port(pin);
     2b2:	8b 81       	ldd	r24, Y+3	; 0x03
     2b4:	c5 df       	rcall	.-118    	; 0x240 <ioport_pin_to_port>
     2b6:	89 83       	std	Y+1, r24	; 0x01
     2b8:	9a 83       	std	Y+2, r25	; 0x02
	if (value)
     2ba:	8c 81       	ldd	r24, Y+4	; 0x04
     2bc:	88 23       	and	r24, r24
     2be:	41 f0       	breq	.+16     	; 0x2d0 <ioport_set_value+0x2e>
		port->OUTSET=ioport_pin_to_mask(pin);
     2c0:	8b 81       	ldd	r24, Y+3	; 0x03
     2c2:	d7 df       	rcall	.-82     	; 0x272 <ioport_pin_to_mask>
     2c4:	28 2f       	mov	r18, r24
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ca:	fc 01       	movw	r30, r24
     2cc:	25 83       	std	Z+5, r18	; 0x05
     2ce:	07 c0       	rjmp	.+14     	; 0x2de <ioport_set_value+0x3c>
	else
		port->OUTCLR=ioport_pin_to_mask(pin);
     2d0:	8b 81       	ldd	r24, Y+3	; 0x03
     2d2:	cf df       	rcall	.-98     	; 0x272 <ioport_pin_to_mask>
     2d4:	28 2f       	mov	r18, r24
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	9a 81       	ldd	r25, Y+2	; 0x02
     2da:	fc 01       	movw	r30, r24
     2dc:	26 83       	std	Z+6, r18	; 0x06
}
     2de:	24 96       	adiw	r28, 0x04	; 4
     2e0:	cd bf       	out	0x3d, r28	; 61
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	cf 91       	pop	r28
     2e6:	df 91       	pop	r29
     2e8:	08 95       	ret

000002ea <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
     2ea:	df 93       	push	r29
     2ec:	cf 93       	push	r28
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_SOURCE) {
	case SYSCLK_SRC_RC2MHZ:
		return 2000000UL;
     2f2:	80 e8       	ldi	r24, 0x80	; 128
     2f4:	94 e8       	ldi	r25, 0x84	; 132
     2f6:	ae e1       	ldi	r26, 0x1E	; 30
     2f8:	b0 e0       	ldi	r27, 0x00	; 0

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
     2fa:	bc 01       	movw	r22, r24
     2fc:	cd 01       	movw	r24, r26
     2fe:	cf 91       	pop	r28
     300:	df 91       	pop	r29
     302:	08 95       	ret

00000304 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
     304:	df 93       	push	r29
     306:	cf 93       	push	r28
     308:	0f 92       	push	r0
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
     30e:	19 82       	std	Y+1, r1	; 0x01

	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
     310:	ec df       	rcall	.-40     	; 0x2ea <sysclk_get_main_hz>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	29 81       	ldd	r18, Y+1	; 0x01
     318:	22 2f       	mov	r18, r18
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	02 2e       	mov	r0, r18
     31e:	04 c0       	rjmp	.+8      	; 0x328 <sysclk_get_per4_hz+0x24>
     320:	b6 95       	lsr	r27
     322:	a7 95       	ror	r26
     324:	97 95       	ror	r25
     326:	87 95       	ror	r24
     328:	0a 94       	dec	r0
     32a:	d2 f7       	brpl	.-12     	; 0x320 <sysclk_get_per4_hz+0x1c>
}
     32c:	bc 01       	movw	r22, r24
     32e:	cd 01       	movw	r24, r26
     330:	0f 90       	pop	r0
     332:	cf 91       	pop	r28
     334:	df 91       	pop	r29
     336:	08 95       	ret

00000338 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
     338:	df 93       	push	r29
     33a:	cf 93       	push	r28
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
     340:	e1 df       	rcall	.-62     	; 0x304 <sysclk_get_per4_hz>
     342:	dc 01       	movw	r26, r24
     344:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
     346:	bc 01       	movw	r22, r24
     348:	cd 01       	movw	r24, r26
     34a:	cf 91       	pop	r28
     34c:	df 91       	pop	r29
     34e:	08 95       	ret

00000350 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
     350:	df 93       	push	r29
     352:	cf 93       	push	r28
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
     358:	ef df       	rcall	.-34     	; 0x338 <sysclk_get_per2_hz>
     35a:	dc 01       	movw	r26, r24
     35c:	cb 01       	movw	r24, r22
}
     35e:	bc 01       	movw	r22, r24
     360:	cd 01       	movw	r24, r26
     362:	cf 91       	pop	r28
     364:	df 91       	pop	r29
     366:	08 95       	ret

00000368 <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
     368:	df 93       	push	r29
     36a:	cf 93       	push	r28
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
     370:	ef df       	rcall	.-34     	; 0x350 <sysclk_get_per_hz>
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
}
     376:	bc 01       	movw	r22, r24
     378:	cd 01       	movw	r24, r26
     37a:	cf 91       	pop	r28
     37c:	df 91       	pop	r29
     37e:	08 95       	ret

00000380 <usart_data_register_is_empty>:
 * \brief Check if data register empty flag is set.
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
     380:	df 93       	push	r29
     382:	cf 93       	push	r28
     384:	0f 92       	push	r0
     386:	0f 92       	push	r0
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
     38c:	89 83       	std	Y+1, r24	; 0x01
     38e:	9a 83       	std	Y+2, r25	; 0x02
	return (usart)->STATUS & USART_DREIF_bm;
     390:	89 81       	ldd	r24, Y+1	; 0x01
     392:	9a 81       	ldd	r25, Y+2	; 0x02
     394:	fc 01       	movw	r30, r24
     396:	81 81       	ldd	r24, Z+1	; 0x01
     398:	88 2f       	mov	r24, r24
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	80 72       	andi	r24, 0x20	; 32
     39e:	90 70       	andi	r25, 0x00	; 0
     3a0:	21 e0       	ldi	r18, 0x01	; 1
     3a2:	00 97       	sbiw	r24, 0x00	; 0
     3a4:	09 f4       	brne	.+2      	; 0x3a8 <usart_data_register_is_empty+0x28>
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	82 2f       	mov	r24, r18
}
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	cf 91       	pop	r28
     3b0:	df 91       	pop	r29
     3b2:	08 95       	ret

000003b4 <usart_tx_is_complete>:
 * Checks if the TX complete interrupt flag is set.
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
     3b4:	df 93       	push	r29
     3b6:	cf 93       	push	r28
     3b8:	0f 92       	push	r0
     3ba:	0f 92       	push	r0
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	89 83       	std	Y+1, r24	; 0x01
     3c2:	9a 83       	std	Y+2, r25	; 0x02
	return (usart)->STATUS & USART_TXCIF_bm;
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	9a 81       	ldd	r25, Y+2	; 0x02
     3c8:	fc 01       	movw	r30, r24
     3ca:	81 81       	ldd	r24, Z+1	; 0x01
     3cc:	88 2f       	mov	r24, r24
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	80 74       	andi	r24, 0x40	; 64
     3d2:	90 70       	andi	r25, 0x00	; 0
     3d4:	21 e0       	ldi	r18, 0x01	; 1
     3d6:	00 97       	sbiw	r24, 0x00	; 0
     3d8:	09 f4       	brne	.+2      	; 0x3dc <usart_tx_is_complete+0x28>
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	82 2f       	mov	r24, r18
}
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	cf 91       	pop	r28
     3e4:	df 91       	pop	r29
     3e6:	08 95       	ret

000003e8 <usart_clear_tx_complete>:
 * \brief Clear TX complete interrupt flag.
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
     3e8:	df 93       	push	r29
     3ea:	cf 93       	push	r28
     3ec:	0f 92       	push	r0
     3ee:	0f 92       	push	r0
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
     3f4:	89 83       	std	Y+1, r24	; 0x01
     3f6:	9a 83       	std	Y+2, r25	; 0x02
	(usart)->STATUS = USART_TXCIF_bm;
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	9a 81       	ldd	r25, Y+2	; 0x02
     3fc:	20 e4       	ldi	r18, 0x40	; 64
     3fe:	fc 01       	movw	r30, r24
     400:	21 83       	std	Z+1, r18	; 0x01
}
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	cf 91       	pop	r28
     408:	df 91       	pop	r29
     40a:	08 95       	ret

0000040c <usart_put>:
 *
 * \param usart The USART module.
 * \param txdata The data to be transmited.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
     40c:	df 93       	push	r29
     40e:	cf 93       	push	r28
     410:	00 d0       	rcall	.+0      	; 0x412 <usart_put+0x6>
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	89 83       	std	Y+1, r24	; 0x01
     418:	9a 83       	std	Y+2, r25	; 0x02
     41a:	6b 83       	std	Y+3, r22	; 0x03
	(usart)->DATA = txdata;
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	9a 81       	ldd	r25, Y+2	; 0x02
     420:	2b 81       	ldd	r18, Y+3	; 0x03
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18
}
     426:	23 96       	adiw	r28, 0x03	; 3
     428:	cd bf       	out	0x3d, r28	; 61
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	cf 91       	pop	r28
     42e:	df 91       	pop	r29
     430:	08 95       	ret

00000432 <usart_get>:
 * \param usart The USART module.
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
     432:	df 93       	push	r29
     434:	cf 93       	push	r28
     436:	0f 92       	push	r0
     438:	0f 92       	push	r0
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
     43e:	89 83       	std	Y+1, r24	; 0x01
     440:	9a 83       	std	Y+2, r25	; 0x02
	return (usart)->DATA;
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	9a 81       	ldd	r25, Y+2	; 0x02
     446:	fc 01       	movw	r30, r24
     448:	80 81       	ld	r24, Z
}
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	cf 91       	pop	r28
     450:	df 91       	pop	r29
     452:	08 95       	ret

00000454 <usart_spi_transmit>:
 *
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
     454:	df 93       	push	r29
     456:	cf 93       	push	r28
     458:	00 d0       	rcall	.+0      	; 0x45a <usart_spi_transmit+0x6>
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
     45e:	89 83       	std	Y+1, r24	; 0x01
     460:	9a 83       	std	Y+2, r25	; 0x02
     462:	6b 83       	std	Y+3, r22	; 0x03
	while (usart_data_register_is_empty(usart) == false);
     464:	00 00       	nop
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	9a 81       	ldd	r25, Y+2	; 0x02
     46a:	8a df       	rcall	.-236    	; 0x380 <usart_data_register_is_empty>
     46c:	98 2f       	mov	r25, r24
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	89 27       	eor	r24, r25
     472:	88 23       	and	r24, r24
     474:	c1 f7       	brne	.-16     	; 0x466 <usart_spi_transmit+0x12>
	usart_put(usart, txdata);
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	9a 81       	ldd	r25, Y+2	; 0x02
     47a:	6b 81       	ldd	r22, Y+3	; 0x03
     47c:	c7 df       	rcall	.-114    	; 0x40c <usart_put>
	while (!usart_tx_is_complete(usart));
     47e:	00 00       	nop
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	9a 81       	ldd	r25, Y+2	; 0x02
     484:	97 df       	rcall	.-210    	; 0x3b4 <usart_tx_is_complete>
     486:	98 2f       	mov	r25, r24
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	89 27       	eor	r24, r25
     48c:	88 23       	and	r24, r24
     48e:	c1 f7       	brne	.-16     	; 0x480 <usart_spi_transmit+0x2c>
	usart_clear_tx_complete(usart);
     490:	89 81       	ldd	r24, Y+1	; 0x01
     492:	9a 81       	ldd	r25, Y+2	; 0x02
     494:	a9 df       	rcall	.-174    	; 0x3e8 <usart_clear_tx_complete>
	return usart_get(usart);
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	9a 81       	ldd	r25, Y+2	; 0x02
     49a:	cb df       	rcall	.-106    	; 0x432 <usart_get>
}
     49c:	23 96       	adiw	r28, 0x03	; 3
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	cf 91       	pop	r28
     4a4:	df 91       	pop	r29
     4a6:	08 95       	ret

000004a8 <st7565r_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
     4a8:	df 93       	push	r29
     4aa:	cf 93       	push	r28
     4ac:	0f 92       	push	r0
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	89 83       	std	Y+1, r24	; 0x01
	gpio_set_pin_low(ST7565R_CS_PIN);
     4b4:	8b e2       	ldi	r24, 0x2B	; 43
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	f4 de       	rcall	.-536    	; 0x2a2 <ioport_set_value>
	gpio_set_pin_low(ST7565R_A0_PIN);
     4ba:	88 e1       	ldi	r24, 0x18	; 24
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	f1 de       	rcall	.-542    	; 0x2a2 <ioport_set_value>
#if defined(ST7565R_USART_SPI_INTERFACE)
	usart_spi_transmit(ST7565R_USART_SPI, command);
     4c0:	80 ea       	ldi	r24, 0xA0	; 160
     4c2:	99 e0       	ldi	r25, 0x09	; 9
     4c4:	69 81       	ldd	r22, Y+1	; 0x01
     4c6:	c6 df       	rcall	.-116    	; 0x454 <usart_spi_transmit>
#elif defined(ST7565R_SPI_INTERFACE)
	spi_write_single(ST7565R_SPI, command);
#endif
	gpio_set_pin_high(ST7565R_CS_PIN);
     4c8:	8b e2       	ldi	r24, 0x2B	; 43
     4ca:	61 e0       	ldi	r22, 0x01	; 1
     4cc:	ea de       	rcall	.-556    	; 0x2a2 <ioport_set_value>
}
     4ce:	0f 90       	pop	r0
     4d0:	cf 91       	pop	r28
     4d2:	df 91       	pop	r29
     4d4:	08 95       	ret

000004d6 <st7565r_hard_reset>:
 * This functions will reset the LCD controller by setting the reset pin low.
 * \note this funtions should not be confused with the \ref st7565r_soft_reset()
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
     4d6:	df 93       	push	r29
     4d8:	cf 93       	push	r28
     4da:	0f 92       	push	r0
     4dc:	0f 92       	push	r0
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
	// us delay is given by cpu_cykl = CPU_Mhz * us_delay / while_loop_cycles
	uint8_t delay_start = (sysclk_get_cpu_hz() / 1000000) * 10 / 10;
     4e2:	42 df       	rcall	.-380    	; 0x368 <sysclk_get_cpu_hz>
     4e4:	dc 01       	movw	r26, r24
     4e6:	cb 01       	movw	r24, r22
     4e8:	20 e4       	ldi	r18, 0x40	; 64
     4ea:	32 e4       	ldi	r19, 0x42	; 66
     4ec:	4f e0       	ldi	r20, 0x0F	; 15
     4ee:	50 e0       	ldi	r21, 0x00	; 0
     4f0:	bc 01       	movw	r22, r24
     4f2:	cd 01       	movw	r24, r26
     4f4:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__udivmodsi4>
     4f8:	da 01       	movw	r26, r20
     4fa:	c9 01       	movw	r24, r18
     4fc:	2a e0       	ldi	r18, 0x0A	; 10
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	40 e0       	ldi	r20, 0x00	; 0
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	bc 01       	movw	r22, r24
     506:	cd 01       	movw	r24, r26
     508:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__mulsi3>
     50c:	dc 01       	movw	r26, r24
     50e:	cb 01       	movw	r24, r22
     510:	2a e0       	ldi	r18, 0x0A	; 10
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	bc 01       	movw	r22, r24
     51a:	cd 01       	movw	r24, r26
     51c:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__udivmodsi4>
     520:	da 01       	movw	r26, r20
     522:	c9 01       	movw	r24, r18
     524:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t delay = delay_start;
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	8a 83       	std	Y+2, r24	; 0x02
	gpio_set_pin_low(ST7565R_RESET_PIN);
     52a:	83 e0       	ldi	r24, 0x03	; 3
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	b9 de       	rcall	.-654    	; 0x2a2 <ioport_set_value>
	while (delay--) {
     530:	00 00       	nop
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	99 23       	and	r25, r25
     538:	09 f4       	brne	.+2      	; 0x53c <st7565r_hard_reset+0x66>
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	91 50       	subi	r25, 0x01	; 1
     53e:	9a 83       	std	Y+2, r25	; 0x02
     540:	88 23       	and	r24, r24
     542:	b9 f7       	brne	.-18     	; 0x532 <st7565r_hard_reset+0x5c>
		// Intentionally left blank
	}
	delay = delay_start;
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	8a 83       	std	Y+2, r24	; 0x02
	gpio_set_pin_high(ST7565R_RESET_PIN);
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	61 e0       	ldi	r22, 0x01	; 1
     54c:	aa de       	rcall	.-684    	; 0x2a2 <ioport_set_value>
	while (delay--) {
     54e:	00 00       	nop
     550:	9a 81       	ldd	r25, Y+2	; 0x02
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	99 23       	and	r25, r25
     556:	09 f4       	brne	.+2      	; 0x55a <st7565r_hard_reset+0x84>
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	91 50       	subi	r25, 0x01	; 1
     55c:	9a 83       	std	Y+2, r25	; 0x02
     55e:	88 23       	and	r24, r24
     560:	b9 f7       	brne	.-18     	; 0x550 <st7565r_hard_reset+0x7a>
		// Intentionally left blank
	}
}
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	cf 91       	pop	r28
     568:	df 91       	pop	r29
     56a:	08 95       	ret

0000056c <st7565r_display_on>:
 * \brief Turn the LCD display on
 *
 * This function will turn on the LCD.
 */
static inline void st7565r_display_on(void)
{
     56c:	df 93       	push	r29
     56e:	cf 93       	push	r28
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
	st7565r_write_command(ST7565R_CMD_DISPLAY_ON);
     574:	8f ea       	ldi	r24, 0xAF	; 175
     576:	98 df       	rcall	.-208    	; 0x4a8 <st7565r_write_command>
}
     578:	cf 91       	pop	r28
     57a:	df 91       	pop	r29
     57c:	08 95       	ret

0000057e <st7565r_set_contrast>:
 *                 the LCD.
 *
 * \retval contrast the contrast value written to the LCD controller
 */
static inline uint8_t st7565r_set_contrast(uint8_t contrast)
{
     57e:	df 93       	push	r29
     580:	cf 93       	push	r28
     582:	0f 92       	push	r0
     584:	cd b7       	in	r28, 0x3d	; 61
     586:	de b7       	in	r29, 0x3e	; 62
     588:	89 83       	std	Y+1, r24	; 0x01
	if (contrast < ST7565R_DISPLAY_CONTRAST_MIN) {
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	8e 31       	cpi	r24, 0x1E	; 30
     58e:	10 f4       	brcc	.+4      	; 0x594 <st7565r_set_contrast+0x16>
		contrast = ST7565R_DISPLAY_CONTRAST_MIN;
     590:	8e e1       	ldi	r24, 0x1E	; 30
     592:	89 83       	std	Y+1, r24	; 0x01
	}
	if (contrast > ST7565R_DISPLAY_CONTRAST_MAX) {
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	89 32       	cpi	r24, 0x29	; 41
     598:	10 f0       	brcs	.+4      	; 0x59e <st7565r_set_contrast+0x20>
		contrast = ST7565R_DISPLAY_CONTRAST_MAX;
     59a:	88 e2       	ldi	r24, 0x28	; 40
     59c:	89 83       	std	Y+1, r24	; 0x01
	}
	st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME_MODE_SET);
     59e:	81 e8       	ldi	r24, 0x81	; 129
     5a0:	83 df       	rcall	.-250    	; 0x4a8 <st7565r_write_command>
	st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME(contrast));
     5a2:	89 81       	ldd	r24, Y+1	; 0x01
     5a4:	80 95       	com	r24
     5a6:	8f 73       	andi	r24, 0x3F	; 63
     5a8:	7f df       	rcall	.-258    	; 0x4a8 <st7565r_write_command>
	return contrast;
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
}
     5ac:	0f 90       	pop	r0
     5ae:	cf 91       	pop	r28
     5b0:	df 91       	pop	r29
     5b2:	08 95       	ret

000005b4 <st7565r_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the LCD
 *
 */
static inline void st7565r_display_invert_disable(void)
{
     5b4:	df 93       	push	r29
     5b6:	cf 93       	push	r28
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
	st7565r_write_command(ST7565R_CMD_DISPLAY_NORMAL);
     5bc:	86 ea       	ldi	r24, 0xA6	; 166
     5be:	74 df       	rcall	.-280    	; 0x4a8 <st7565r_write_command>
}
     5c0:	cf 91       	pop	r28
     5c2:	df 91       	pop	r29
     5c4:	08 95       	ret

000005c6 <st7565r_interface_init>:
 *
 * Depending on what interface used for interfacing the LCD controller this
 * function will initialize the neccesary hardware.
 */
static void st7565r_interface_init(void)
{
     5c6:	cf 92       	push	r12
     5c8:	df 92       	push	r13
     5ca:	ef 92       	push	r14
     5cc:	ff 92       	push	r15
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	df 93       	push	r29
     5d4:	cf 93       	push	r28
     5d6:	00 d0       	rcall	.+0      	; 0x5d8 <st7565r_interface_init+0x12>
     5d8:	00 d0       	rcall	.+0      	; 0x5da <st7565r_interface_init+0x14>
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
#ifdef ST7565R_SERIAL_INTERFACE
	spi_flags_t spi_flags = SPI_MODE_3;
     5de:	83 e0       	ldi	r24, 0x03	; 3
     5e0:	89 83       	std	Y+1, r24	; 0x01
	board_spi_select_id_t spi_select_id = 0;
     5e2:	1a 82       	std	Y+2, r1	; 0x02
     5e4:	1b 82       	std	Y+3, r1	; 0x03
     5e6:	1c 82       	std	Y+4, r1	; 0x04
     5e8:	1d 82       	std	Y+5, r1	; 0x05
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     5ea:	8b e2       	ldi	r24, 0x2B	; 43
     5ec:	8e 83       	std	Y+6, r24	; 0x06
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     5ee:	80 ea       	ldi	r24, 0xA0	; 160
     5f0:	99 e0       	ldi	r25, 0x09	; 9
     5f2:	f7 d3       	rcall	.+2030   	; 0xde2 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     5f4:	9e 01       	movw	r18, r28
     5f6:	2a 5f       	subi	r18, 0xFA	; 250
     5f8:	3f 4f       	sbci	r19, 0xFF	; 255
     5fa:	ca 80       	ldd	r12, Y+2	; 0x02
     5fc:	db 80       	ldd	r13, Y+3	; 0x03
     5fe:	ec 80       	ldd	r14, Y+4	; 0x04
     600:	fd 80       	ldd	r15, Y+5	; 0x05
     602:	80 ea       	ldi	r24, 0xA0	; 160
     604:	99 e0       	ldi	r25, 0x09	; 9
     606:	b9 01       	movw	r22, r18
     608:	49 81       	ldd	r20, Y+1	; 0x01
     60a:	00 e4       	ldi	r16, 0x40	; 64
     60c:	12 e4       	ldi	r17, 0x42	; 66
     60e:	2f e0       	ldi	r18, 0x0F	; 15
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	35 d4       	rcall	.+2154   	; 0xe7e <usart_spi_setup_device>
	};
	spi_master_init(ST7565R_SPI);
	spi_master_setup_device(ST7565R_SPI, &device, spi_flags,
			ST7565R_CLOCK_SPEED, spi_select_id);
#endif
}
     614:	26 96       	adiw	r28, 0x06	; 6
     616:	cd bf       	out	0x3d, r28	; 61
     618:	de bf       	out	0x3e, r29	; 62
     61a:	cf 91       	pop	r28
     61c:	df 91       	pop	r29
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	df 90       	pop	r13
     628:	cf 90       	pop	r12
     62a:	08 95       	ret

0000062c <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     62c:	df 93       	push	r29
     62e:	cf 93       	push	r28
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
	// Do a hard reset of the LCD display controller
	st7565r_hard_reset();
     634:	50 df       	rcall	.-352    	; 0x4d6 <st7565r_hard_reset>

	// Initialize the interface
	st7565r_interface_init();
     636:	c7 df       	rcall	.-114    	; 0x5c6 <st7565r_interface_init>

	// Set the A0 pin to the default state (command)
	gpio_set_pin_low(ST7565R_A0_PIN);
     638:	88 e1       	ldi	r24, 0x18	; 24
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	32 de       	rcall	.-924    	; 0x2a2 <ioport_set_value>

	// The column address is set to increasing
	st7565r_write_command(ST7565R_CMD_ADC_NORMAL);
     63e:	80 ea       	ldi	r24, 0xA0	; 160
     640:	33 df       	rcall	.-410    	; 0x4a8 <st7565r_write_command>

	// Non-inverted display
	st7565r_display_invert_disable();
     642:	b8 df       	rcall	.-144    	; 0x5b4 <st7565r_display_invert_disable>

	// The common mode scan direction is reversed COM31->COM0
	st7565r_write_command(ST7565R_CMD_REVERSE_SCAN_DIRECTION);
     644:	88 ec       	ldi	r24, 0xC8	; 200
     646:	30 df       	rcall	.-416    	; 0x4a8 <st7565r_write_command>

	// Set the voltage bias ratio to 1/6
	st7565r_write_command(ST7565R_CMD_LCD_BIAS_1_DIV_6_DUTY33);
     648:	82 ea       	ldi	r24, 0xA2	; 162
     64a:	2e df       	rcall	.-420    	; 0x4a8 <st7565r_write_command>

	// Set booster circuit, voltage regulator and voltage follower all to on
	st7565r_write_command(ST7565R_CMD_POWER_CTRL_ALL_ON);
     64c:	8f e2       	ldi	r24, 0x2F	; 47
     64e:	2c df       	rcall	.-424    	; 0x4a8 <st7565r_write_command>

	// Set the booster ratio to 2X,3X,4X
	st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_SET);
     650:	88 ef       	ldi	r24, 0xF8	; 248
     652:	2a df       	rcall	.-428    	; 0x4a8 <st7565r_write_command>
	st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_2X_3X_4X);
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	28 df       	rcall	.-432    	; 0x4a8 <st7565r_write_command>

	// Set voltage resistor ratio to 1
	st7565r_write_command(ST7565R_CMD_VOLTAGE_RESISTOR_RATIO_1);
     658:	81 e2       	ldi	r24, 0x21	; 33
     65a:	26 df       	rcall	.-436    	; 0x4a8 <st7565r_write_command>

	/* Set contrast to max value, no need to check return value as the contrast
	is set to the defined max*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MAX);
     65c:	88 e2       	ldi	r24, 0x28	; 40
     65e:	8f df       	rcall	.-226    	; 0x57e <st7565r_set_contrast>

	// Turn on the display
	st7565r_display_on();
     660:	85 df       	rcall	.-246    	; 0x56c <st7565r_display_on>
}
     662:	cf 91       	pop	r28
     664:	df 91       	pop	r29
     666:	08 95       	ret

00000668 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
     668:	df 93       	push	r29
     66a:	cf 93       	push	r28
     66c:	0f 92       	push	r0
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags = SREG;
     672:	8f e3       	ldi	r24, 0x3F	; 63
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	fc 01       	movw	r30, r24
     678:	80 81       	ld	r24, Z
     67a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     67c:	f8 94       	cli
	return flags;
     67e:	89 81       	ldd	r24, Y+1	; 0x01
}
     680:	0f 90       	pop	r0
     682:	cf 91       	pop	r28
     684:	df 91       	pop	r29
     686:	08 95       	ret

00000688 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     688:	df 93       	push	r29
     68a:	cf 93       	push	r28
     68c:	0f 92       	push	r0
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
     694:	8f e3       	ldi	r24, 0x3F	; 63
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	29 81       	ldd	r18, Y+1	; 0x01
     69a:	fc 01       	movw	r30, r24
     69c:	20 83       	st	Z, r18
}
     69e:	0f 90       	pop	r0
     6a0:	cf 91       	pop	r28
     6a2:	df 91       	pop	r29
     6a4:	08 95       	ret

000006a6 <sysclk_init>:
	pll_wait_for_lock(0);
}
#endif

void sysclk_init(void)
{
     6a6:	df 93       	push	r29
     6a8:	cf 93       	push	r28
     6aa:	00 d0       	rcall	.+0      	; 0x6ac <sysclk_init+0x6>
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
     6b0:	80 e7       	ldi	r24, 0x70	; 112
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	89 83       	std	Y+1, r24	; 0x01
     6b6:	9a 83       	std	Y+2, r25	; 0x02
	uint8_t i;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
     6b8:	1b 82       	std	Y+3, r1	; 0x03
     6ba:	0d c0       	rjmp	.+26     	; 0x6d6 <sysclk_init+0x30>
		*(reg++) = 0xff;
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	9a 81       	ldd	r25, Y+2	; 0x02
     6c0:	2f ef       	ldi	r18, 0xFF	; 255
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 83       	st	Z, r18
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ca:	01 96       	adiw	r24, 0x01	; 1
     6cc:	89 83       	std	Y+1, r24	; 0x01
     6ce:	9a 83       	std	Y+2, r25	; 0x02
{
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
	uint8_t i;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
     6d0:	8b 81       	ldd	r24, Y+3	; 0x03
     6d2:	8f 5f       	subi	r24, 0xFF	; 255
     6d4:	8b 83       	std	Y+3, r24	; 0x03
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	87 30       	cpi	r24, 0x07	; 7
     6da:	80 f3       	brcs	.-32     	; 0x6bc <sysclk_init+0x16>

		if (!need_rc2mhz) {
			osc_disable(OSC_ID_RC2MHZ);
		}
	}
}
     6dc:	23 96       	adiw	r28, 0x03	; 3
     6de:	cd bf       	out	0x3d, r28	; 61
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	cf 91       	pop	r28
     6e4:	df 91       	pop	r29
     6e6:	08 95       	ret

000006e8 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     6e8:	df 93       	push	r29
     6ea:	cf 93       	push	r28
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <sysclk_enable_module+0x6>
     6ee:	0f 92       	push	r0
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	8a 83       	std	Y+2, r24	; 0x02
     6f6:	9b 83       	std	Y+3, r25	; 0x03
     6f8:	6c 83       	std	Y+4, r22	; 0x04
	irqflags_t flags = cpu_irq_save();
     6fa:	b6 df       	rcall	.-148    	; 0x668 <cpu_irq_save>
     6fc:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     6fe:	8a 81       	ldd	r24, Y+2	; 0x02
     700:	9b 81       	ldd	r25, Y+3	; 0x03
     702:	80 59       	subi	r24, 0x90	; 144
     704:	9f 4f       	sbci	r25, 0xFF	; 255
     706:	2a 81       	ldd	r18, Y+2	; 0x02
     708:	3b 81       	ldd	r19, Y+3	; 0x03
     70a:	20 59       	subi	r18, 0x90	; 144
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	f9 01       	movw	r30, r18
     710:	20 81       	ld	r18, Z
     712:	32 2f       	mov	r19, r18
     714:	2c 81       	ldd	r18, Y+4	; 0x04
     716:	20 95       	com	r18
     718:	23 23       	and	r18, r19
     71a:	fc 01       	movw	r30, r24
     71c:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	b3 df       	rcall	.-154    	; 0x688 <cpu_irq_restore>
}
     722:	24 96       	adiw	r28, 0x04	; 4
     724:	cd bf       	out	0x3d, r28	; 61
     726:	de bf       	out	0x3e, r29	; 62
     728:	cf 91       	pop	r28
     72a:	df 91       	pop	r29
     72c:	08 95       	ret

0000072e <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
     72e:	df 93       	push	r29
     730:	cf 93       	push	r28
     732:	00 d0       	rcall	.+0      	; 0x734 <sysclk_disable_module+0x6>
     734:	0f 92       	push	r0
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	8a 83       	std	Y+2, r24	; 0x02
     73c:	9b 83       	std	Y+3, r25	; 0x03
     73e:	6c 83       	std	Y+4, r22	; 0x04
	irqflags_t flags = cpu_irq_save();
     740:	93 df       	rcall	.-218    	; 0x668 <cpu_irq_save>
     742:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) |= id;
     744:	8a 81       	ldd	r24, Y+2	; 0x02
     746:	9b 81       	ldd	r25, Y+3	; 0x03
     748:	80 59       	subi	r24, 0x90	; 144
     74a:	9f 4f       	sbci	r25, 0xFF	; 255
     74c:	2a 81       	ldd	r18, Y+2	; 0x02
     74e:	3b 81       	ldd	r19, Y+3	; 0x03
     750:	20 59       	subi	r18, 0x90	; 144
     752:	3f 4f       	sbci	r19, 0xFF	; 255
     754:	f9 01       	movw	r30, r18
     756:	30 81       	ld	r19, Z
     758:	2c 81       	ldd	r18, Y+4	; 0x04
     75a:	23 2b       	or	r18, r19
     75c:	fc 01       	movw	r30, r24
     75e:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
     760:	89 81       	ldd	r24, Y+1	; 0x01
     762:	92 df       	rcall	.-220    	; 0x688 <cpu_irq_restore>
}
     764:	24 96       	adiw	r28, 0x04	; 4
     766:	cd bf       	out	0x3d, r28	; 61
     768:	de bf       	out	0x3e, r29	; 62
     76a:	cf 91       	pop	r28
     76c:	df 91       	pop	r29
     76e:	08 95       	ret

00000770 <ioport_pin_to_port>:
 * \param pin PORT pin number. This number can be generated by the macro
 * CREATE_PORT_PIN.
 * \return Pointer to the port on which the pin is located.
 */
static inline PORT_t *ioport_pin_to_port(port_pin_t pin)
{
     770:	df 93       	push	r29
     772:	cf 93       	push	r28
     774:	0f 92       	push	r0
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	89 83       	std	Y+1, r24	; 0x01
	// Each port has an offset of 0x20
	return (PORT_t *)((uintptr_t)&PORTA + (pin >> 3) * 0x20);
     77c:	89 81       	ldd	r24, Y+1	; 0x01
     77e:	86 95       	lsr	r24
     780:	86 95       	lsr	r24
     782:	86 95       	lsr	r24
     784:	88 2f       	mov	r24, r24
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	c0 96       	adiw	r24, 0x30	; 48
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	82 95       	swap	r24
     790:	92 95       	swap	r25
     792:	90 7f       	andi	r25, 0xF0	; 240
     794:	98 27       	eor	r25, r24
     796:	80 7f       	andi	r24, 0xF0	; 240
     798:	98 27       	eor	r25, r24
}
     79a:	0f 90       	pop	r0
     79c:	cf 91       	pop	r28
     79e:	df 91       	pop	r29
     7a0:	08 95       	ret

000007a2 <ioport_pin_to_mask>:
 *
 * \param pin PORT pin number.
 * \return Pin mask.
 */
static inline pin_mask_t ioport_pin_to_mask(port_pin_t pin)
{
     7a2:	df 93       	push	r29
     7a4:	cf 93       	push	r28
     7a6:	0f 92       	push	r0
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	89 83       	std	Y+1, r24	; 0x01
	return 1U << (pin & 0x7);
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	88 2f       	mov	r24, r24
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	9c 01       	movw	r18, r24
     7b6:	27 70       	andi	r18, 0x07	; 7
     7b8:	30 70       	andi	r19, 0x00	; 0
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	02 2e       	mov	r0, r18
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <ioport_pin_to_mask+0x24>
     7c2:	88 0f       	add	r24, r24
     7c4:	99 1f       	adc	r25, r25
     7c6:	0a 94       	dec	r0
     7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <ioport_pin_to_mask+0x20>
}
     7ca:	0f 90       	pop	r0
     7cc:	cf 91       	pop	r28
     7ce:	df 91       	pop	r29
     7d0:	08 95       	ret

000007d2 <ioport_set_value>:
 * \param value The desired state of the pin. \a true means drive the
 * pin high (towards Vdd), while \a false means drive the pin low
 * (towards Vss).
 */
static inline void ioport_set_value(port_pin_t pin, bool value)
{
     7d2:	df 93       	push	r29
     7d4:	cf 93       	push	r28
     7d6:	00 d0       	rcall	.+0      	; 0x7d8 <ioport_set_value+0x6>
     7d8:	0f 92       	push	r0
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	8b 83       	std	Y+3, r24	; 0x03
     7e0:	6c 83       	std	Y+4, r22	; 0x04
	PORT_t *port = ioport_pin_to_port(pin);
     7e2:	8b 81       	ldd	r24, Y+3	; 0x03
     7e4:	c5 df       	rcall	.-118    	; 0x770 <ioport_pin_to_port>
     7e6:	89 83       	std	Y+1, r24	; 0x01
     7e8:	9a 83       	std	Y+2, r25	; 0x02
	if (value)
     7ea:	8c 81       	ldd	r24, Y+4	; 0x04
     7ec:	88 23       	and	r24, r24
     7ee:	41 f0       	breq	.+16     	; 0x800 <ioport_set_value+0x2e>
		port->OUTSET=ioport_pin_to_mask(pin);
     7f0:	8b 81       	ldd	r24, Y+3	; 0x03
     7f2:	d7 df       	rcall	.-82     	; 0x7a2 <ioport_pin_to_mask>
     7f4:	28 2f       	mov	r18, r24
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	9a 81       	ldd	r25, Y+2	; 0x02
     7fa:	fc 01       	movw	r30, r24
     7fc:	25 83       	std	Z+5, r18	; 0x05
     7fe:	07 c0       	rjmp	.+14     	; 0x80e <ioport_set_value+0x3c>
	else
		port->OUTCLR=ioport_pin_to_mask(pin);
     800:	8b 81       	ldd	r24, Y+3	; 0x03
     802:	cf df       	rcall	.-98     	; 0x7a2 <ioport_pin_to_mask>
     804:	28 2f       	mov	r18, r24
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	9a 81       	ldd	r25, Y+2	; 0x02
     80a:	fc 01       	movw	r30, r24
     80c:	26 83       	std	Z+6, r18	; 0x06
}
     80e:	24 96       	adiw	r28, 0x04	; 4
     810:	cd bf       	out	0x3d, r28	; 61
     812:	de bf       	out	0x3e, r29	; 62
     814:	cf 91       	pop	r28
     816:	df 91       	pop	r29
     818:	08 95       	ret

0000081a <usart_data_register_is_empty>:
 * \brief Check if data register empty flag is set.
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
     81a:	df 93       	push	r29
     81c:	cf 93       	push	r28
     81e:	0f 92       	push	r0
     820:	0f 92       	push	r0
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
     826:	89 83       	std	Y+1, r24	; 0x01
     828:	9a 83       	std	Y+2, r25	; 0x02
	return (usart)->STATUS & USART_DREIF_bm;
     82a:	89 81       	ldd	r24, Y+1	; 0x01
     82c:	9a 81       	ldd	r25, Y+2	; 0x02
     82e:	fc 01       	movw	r30, r24
     830:	81 81       	ldd	r24, Z+1	; 0x01
     832:	88 2f       	mov	r24, r24
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	80 72       	andi	r24, 0x20	; 32
     838:	90 70       	andi	r25, 0x00	; 0
     83a:	21 e0       	ldi	r18, 0x01	; 1
     83c:	00 97       	sbiw	r24, 0x00	; 0
     83e:	09 f4       	brne	.+2      	; 0x842 <usart_data_register_is_empty+0x28>
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	82 2f       	mov	r24, r18
}
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	cf 91       	pop	r28
     84a:	df 91       	pop	r29
     84c:	08 95       	ret

0000084e <usart_tx_is_complete>:
 * Checks if the TX complete interrupt flag is set.
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
     84e:	df 93       	push	r29
     850:	cf 93       	push	r28
     852:	0f 92       	push	r0
     854:	0f 92       	push	r0
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	89 83       	std	Y+1, r24	; 0x01
     85c:	9a 83       	std	Y+2, r25	; 0x02
	return (usart)->STATUS & USART_TXCIF_bm;
     85e:	89 81       	ldd	r24, Y+1	; 0x01
     860:	9a 81       	ldd	r25, Y+2	; 0x02
     862:	fc 01       	movw	r30, r24
     864:	81 81       	ldd	r24, Z+1	; 0x01
     866:	88 2f       	mov	r24, r24
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	80 74       	andi	r24, 0x40	; 64
     86c:	90 70       	andi	r25, 0x00	; 0
     86e:	21 e0       	ldi	r18, 0x01	; 1
     870:	00 97       	sbiw	r24, 0x00	; 0
     872:	09 f4       	brne	.+2      	; 0x876 <usart_tx_is_complete+0x28>
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	82 2f       	mov	r24, r18
}
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	cf 91       	pop	r28
     87e:	df 91       	pop	r29
     880:	08 95       	ret

00000882 <usart_clear_tx_complete>:
 * \brief Clear TX complete interrupt flag.
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
     882:	df 93       	push	r29
     884:	cf 93       	push	r28
     886:	0f 92       	push	r0
     888:	0f 92       	push	r0
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	89 83       	std	Y+1, r24	; 0x01
     890:	9a 83       	std	Y+2, r25	; 0x02
	(usart)->STATUS = USART_TXCIF_bm;
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	9a 81       	ldd	r25, Y+2	; 0x02
     896:	20 e4       	ldi	r18, 0x40	; 64
     898:	fc 01       	movw	r30, r24
     89a:	21 83       	std	Z+1, r18	; 0x01
}
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	cf 91       	pop	r28
     8a2:	df 91       	pop	r29
     8a4:	08 95       	ret

000008a6 <usart_put>:
 *
 * \param usart The USART module.
 * \param txdata The data to be transmited.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
     8a6:	df 93       	push	r29
     8a8:	cf 93       	push	r28
     8aa:	00 d0       	rcall	.+0      	; 0x8ac <usart_put+0x6>
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
     8b0:	89 83       	std	Y+1, r24	; 0x01
     8b2:	9a 83       	std	Y+2, r25	; 0x02
     8b4:	6b 83       	std	Y+3, r22	; 0x03
	(usart)->DATA = txdata;
     8b6:	89 81       	ldd	r24, Y+1	; 0x01
     8b8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ba:	2b 81       	ldd	r18, Y+3	; 0x03
     8bc:	fc 01       	movw	r30, r24
     8be:	20 83       	st	Z, r18
}
     8c0:	23 96       	adiw	r28, 0x03	; 3
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	cf 91       	pop	r28
     8c8:	df 91       	pop	r29
     8ca:	08 95       	ret

000008cc <usart_get>:
 * \param usart The USART module.
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
     8cc:	df 93       	push	r29
     8ce:	cf 93       	push	r28
     8d0:	0f 92       	push	r0
     8d2:	0f 92       	push	r0
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	9a 83       	std	Y+2, r25	; 0x02
	return (usart)->DATA;
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	9a 81       	ldd	r25, Y+2	; 0x02
     8e0:	fc 01       	movw	r30, r24
     8e2:	80 81       	ld	r24, Z
}
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	cf 91       	pop	r28
     8ea:	df 91       	pop	r29
     8ec:	08 95       	ret

000008ee <usart_spi_transmit>:
 *
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
     8ee:	df 93       	push	r29
     8f0:	cf 93       	push	r28
     8f2:	00 d0       	rcall	.+0      	; 0x8f4 <usart_spi_transmit+0x6>
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	89 83       	std	Y+1, r24	; 0x01
     8fa:	9a 83       	std	Y+2, r25	; 0x02
     8fc:	6b 83       	std	Y+3, r22	; 0x03
	while (usart_data_register_is_empty(usart) == false);
     8fe:	00 00       	nop
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	9a 81       	ldd	r25, Y+2	; 0x02
     904:	8a df       	rcall	.-236    	; 0x81a <usart_data_register_is_empty>
     906:	98 2f       	mov	r25, r24
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	89 27       	eor	r24, r25
     90c:	88 23       	and	r24, r24
     90e:	c1 f7       	brne	.-16     	; 0x900 <usart_spi_transmit+0x12>
	usart_put(usart, txdata);
     910:	89 81       	ldd	r24, Y+1	; 0x01
     912:	9a 81       	ldd	r25, Y+2	; 0x02
     914:	6b 81       	ldd	r22, Y+3	; 0x03
     916:	c7 df       	rcall	.-114    	; 0x8a6 <usart_put>
	while (!usart_tx_is_complete(usart));
     918:	00 00       	nop
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	9a 81       	ldd	r25, Y+2	; 0x02
     91e:	97 df       	rcall	.-210    	; 0x84e <usart_tx_is_complete>
     920:	98 2f       	mov	r25, r24
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	89 27       	eor	r24, r25
     926:	88 23       	and	r24, r24
     928:	c1 f7       	brne	.-16     	; 0x91a <usart_spi_transmit+0x2c>
	usart_clear_tx_complete(usart);
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	9a 81       	ldd	r25, Y+2	; 0x02
     92e:	a9 df       	rcall	.-174    	; 0x882 <usart_clear_tx_complete>
	return usart_get(usart);
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	9a 81       	ldd	r25, Y+2	; 0x02
     934:	cb df       	rcall	.-106    	; 0x8cc <usart_get>
}
     936:	23 96       	adiw	r28, 0x03	; 3
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	cf 91       	pop	r28
     93e:	df 91       	pop	r29
     940:	08 95       	ret

00000942 <st7565r_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
     942:	df 93       	push	r29
     944:	cf 93       	push	r28
     946:	0f 92       	push	r0
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	89 83       	std	Y+1, r24	; 0x01
	gpio_set_pin_low(ST7565R_CS_PIN);
     94e:	8b e2       	ldi	r24, 0x2B	; 43
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	3f df       	rcall	.-386    	; 0x7d2 <ioport_set_value>
	gpio_set_pin_low(ST7565R_A0_PIN);
     954:	88 e1       	ldi	r24, 0x18	; 24
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	3c df       	rcall	.-392    	; 0x7d2 <ioport_set_value>
#if defined(ST7565R_USART_SPI_INTERFACE)
	usart_spi_transmit(ST7565R_USART_SPI, command);
     95a:	80 ea       	ldi	r24, 0xA0	; 160
     95c:	99 e0       	ldi	r25, 0x09	; 9
     95e:	69 81       	ldd	r22, Y+1	; 0x01
     960:	c6 df       	rcall	.-116    	; 0x8ee <usart_spi_transmit>
#elif defined(ST7565R_SPI_INTERFACE)
	spi_write_single(ST7565R_SPI, command);
#endif
	gpio_set_pin_high(ST7565R_CS_PIN);
     962:	8b e2       	ldi	r24, 0x2B	; 43
     964:	61 e0       	ldi	r22, 0x01	; 1
     966:	35 df       	rcall	.-406    	; 0x7d2 <ioport_set_value>
}
     968:	0f 90       	pop	r0
     96a:	cf 91       	pop	r28
     96c:	df 91       	pop	r29
     96e:	08 95       	ret

00000970 <st7565r_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
     970:	df 93       	push	r29
     972:	cf 93       	push	r28
     974:	0f 92       	push	r0
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
     97a:	89 83       	std	Y+1, r24	; 0x01
	gpio_set_pin_low(ST7565R_CS_PIN);
     97c:	8b e2       	ldi	r24, 0x2B	; 43
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	28 df       	rcall	.-432    	; 0x7d2 <ioport_set_value>
	gpio_set_pin_high(ST7565R_A0_PIN);
     982:	88 e1       	ldi	r24, 0x18	; 24
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	25 df       	rcall	.-438    	; 0x7d2 <ioport_set_value>
#if defined(ST7565R_USART_SPI_INTERFACE)
	usart_spi_transmit(ST7565R_USART_SPI, data);
     988:	80 ea       	ldi	r24, 0xA0	; 160
     98a:	99 e0       	ldi	r25, 0x09	; 9
     98c:	69 81       	ldd	r22, Y+1	; 0x01
     98e:	af df       	rcall	.-162    	; 0x8ee <usart_spi_transmit>
#elif defined(ST7565R_SPI_INTERFACE)
	spi_write_single(ST7565R_SPI, data);
#endif
	gpio_set_pin_low(ST7565R_A0_PIN);
     990:	88 e1       	ldi	r24, 0x18	; 24
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	1e df       	rcall	.-452    	; 0x7d2 <ioport_set_value>
	gpio_set_pin_high(ST7565R_CS_PIN);
     996:	8b e2       	ldi	r24, 0x2B	; 43
     998:	61 e0       	ldi	r22, 0x01	; 1
     99a:	1b df       	rcall	.-458    	; 0x7d2 <ioport_set_value>
}
     99c:	0f 90       	pop	r0
     99e:	cf 91       	pop	r28
     9a0:	df 91       	pop	r29
     9a2:	08 95       	ret

000009a4 <st7565r_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void st7565r_set_page_address(uint8_t address)
{
     9a4:	df 93       	push	r29
     9a6:	cf 93       	push	r28
     9a8:	0f 92       	push	r0
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
     9ae:	89 83       	std	Y+1, r24	; 0x01
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	8f 70       	andi	r24, 0x0F	; 15
     9b4:	89 83       	std	Y+1, r24	; 0x01
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	80 6b       	ori	r24, 0xB0	; 176
     9ba:	c3 df       	rcall	.-122    	; 0x942 <st7565r_write_command>
}
     9bc:	0f 90       	pop	r0
     9be:	cf 91       	pop	r28
     9c0:	df 91       	pop	r29
     9c2:	08 95       	ret

000009c4 <st7565r_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void st7565r_set_column_address(uint8_t address)
{
     9c4:	df 93       	push	r29
     9c6:	cf 93       	push	r28
     9c8:	0f 92       	push	r0
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	89 83       	std	Y+1, r24	; 0x01
	// Make sure the address is 7 bits
	address &= 0x7F;
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	8f 77       	andi	r24, 0x7F	; 127
     9d4:	89 83       	std	Y+1, r24	; 0x01
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	82 95       	swap	r24
     9da:	8f 70       	andi	r24, 0x0F	; 15
     9dc:	80 61       	ori	r24, 0x10	; 16
     9de:	b1 df       	rcall	.-158    	; 0x942 <st7565r_write_command>
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	8f 70       	andi	r24, 0x0F	; 15
     9e4:	ae df       	rcall	.-164    	; 0x942 <st7565r_write_command>
}
     9e6:	0f 90       	pop	r0
     9e8:	cf 91       	pop	r28
     9ea:	df 91       	pop	r29
     9ec:	08 95       	ret

000009ee <st7565r_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the LCD.
 */
static inline void st7565r_set_display_start_line_address(uint8_t address)
{
     9ee:	df 93       	push	r29
     9f0:	cf 93       	push	r28
     9f2:	0f 92       	push	r0
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	89 83       	std	Y+1, r24	; 0x01
	// Make sure address is 6 bits
	address &= 0x3F;
     9fa:	89 81       	ldd	r24, Y+1	; 0x01
     9fc:	8f 73       	andi	r24, 0x3F	; 63
     9fe:	89 83       	std	Y+1, r24	; 0x01
	st7565r_write_command(ST7565R_CMD_START_LINE_SET(address));
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	80 64       	ori	r24, 0x40	; 64
     a04:	9e df       	rcall	.-196    	; 0x942 <st7565r_write_command>
}
     a06:	0f 90       	pop	r0
     a08:	cf 91       	pop	r28
     a0a:	df 91       	pop	r29
     a0c:	08 95       	ret

00000a0e <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a0e:	df 93       	push	r29
     a10:	cf 93       	push	r28
     a12:	0f 92       	push	r0
     a14:	0f 92       	push	r0
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	90 e2       	ldi	r25, 0x20	; 32
     a1e:	a3 d0       	rcall	.+326    	; 0xb66 <gfx_mono_set_framebuffer>
#endif

	// Initialize the low-level display controller.
	st7565r_init();
     a20:	05 de       	rcall	.-1014   	; 0x62c <st7565r_init>

	// Set display to output data from line 0
	st7565r_set_display_start_line_address(0);
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	e4 df       	rcall	.-56     	; 0x9ee <st7565r_set_display_start_line_address>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	*/
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a26:	19 82       	std	Y+1, r1	; 0x01
     a28:	0f c0       	rjmp	.+30     	; 0xa48 <gfx_mono_st7565r_init+0x3a>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a2a:	1a 82       	std	Y+2, r1	; 0x02
     a2c:	07 c0       	rjmp	.+14     	; 0xa3c <gfx_mono_st7565r_init+0x2e>
			gfx_mono_put_byte(page, column, 0x00);
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	6a 81       	ldd	r22, Y+2	; 0x02
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	70 d0       	rcall	.+224    	; 0xb16 <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	*/
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a36:	8a 81       	ldd	r24, Y+2	; 0x02
     a38:	8f 5f       	subi	r24, 0xFF	; 255
     a3a:	8a 83       	std	Y+2, r24	; 0x02
     a3c:	8a 81       	ldd	r24, Y+2	; 0x02
     a3e:	88 23       	and	r24, r24
     a40:	b4 f7       	brge	.-20     	; 0xa2e <gfx_mono_st7565r_init+0x20>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	*/
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	8f 5f       	subi	r24, 0xFF	; 255
     a46:	89 83       	std	Y+1, r24	; 0x01
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	84 30       	cpi	r24, 0x04	; 4
     a4c:	70 f3       	brcs	.-36     	; 0xa2a <gfx_mono_st7565r_init+0x1c>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	cf 91       	pop	r28
     a54:	df 91       	pop	r29
     a56:	08 95       	ret

00000a58 <gfx_mono_st7565r_draw_pixel>:
 * \code
 * gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
 * \endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_coord_t color)
{
     a58:	df 93       	push	r29
     a5a:	cf 93       	push	r28
     a5c:	00 d0       	rcall	.+0      	; 0xa5e <gfx_mono_st7565r_draw_pixel+0x6>
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <gfx_mono_st7565r_draw_pixel+0x8>
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	8c 83       	std	Y+4, r24	; 0x04
     a66:	6d 83       	std	Y+5, r22	; 0x05
     a68:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	// Discard pixels drawn outside the screen
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a6a:	8c 81       	ldd	r24, Y+4	; 0x04
     a6c:	88 23       	and	r24, r24
     a6e:	0c f4       	brge	.+2      	; 0xa72 <gfx_mono_st7565r_draw_pixel+0x1a>
     a70:	49 c0       	rjmp	.+146    	; 0xb04 <gfx_mono_st7565r_draw_pixel+0xac>
     a72:	8d 81       	ldd	r24, Y+5	; 0x05
     a74:	80 32       	cpi	r24, 0x20	; 32
     a76:	08 f0       	brcs	.+2      	; 0xa7a <gfx_mono_st7565r_draw_pixel+0x22>
     a78:	47 c0       	rjmp	.+142    	; 0xb08 <gfx_mono_st7565r_draw_pixel+0xb0>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     a7a:	8d 81       	ldd	r24, Y+5	; 0x05
     a7c:	86 95       	lsr	r24
     a7e:	86 95       	lsr	r24
     a80:	86 95       	lsr	r24
     a82:	8a 83       	std	Y+2, r24	; 0x02
	pixel_mask = (1 << (y - (page * 8)));
     a84:	8d 81       	ldd	r24, Y+5	; 0x05
     a86:	28 2f       	mov	r18, r24
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	8a 81       	ldd	r24, Y+2	; 0x02
     a8c:	48 2f       	mov	r20, r24
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	84 1b       	sub	r24, r20
     a96:	95 0b       	sbc	r25, r21
     a98:	88 0f       	add	r24, r24
     a9a:	99 1f       	adc	r25, r25
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	88 0f       	add	r24, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	28 0f       	add	r18, r24
     aa6:	39 1f       	adc	r19, r25
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <gfx_mono_st7565r_draw_pixel+0x5a>
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	2a 95       	dec	r18
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <gfx_mono_st7565r_draw_pixel+0x56>
     ab6:	8b 83       	std	Y+3, r24	; 0x03
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
     ab8:	8a 81       	ldd	r24, Y+2	; 0x02
     aba:	6c 81       	ldd	r22, Y+4	; 0x04
     abc:	44 d0       	rcall	.+136    	; 0xb46 <gfx_mono_st7565r_get_byte>
     abe:	89 83       	std	Y+1, r24	; 0x01

	switch (color) {
     ac0:	8e 81       	ldd	r24, Y+6	; 0x06
     ac2:	88 2f       	mov	r24, r24
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	81 30       	cpi	r24, 0x01	; 1
     ac8:	91 05       	cpc	r25, r1
     aca:	31 f0       	breq	.+12     	; 0xad8 <gfx_mono_st7565r_draw_pixel+0x80>
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	91 05       	cpc	r25, r1
     ad0:	79 f0       	breq	.+30     	; 0xaf0 <gfx_mono_st7565r_draw_pixel+0x98>
     ad2:	00 97       	sbiw	r24, 0x00	; 0
     ad4:	31 f0       	breq	.+12     	; 0xae2 <gfx_mono_st7565r_draw_pixel+0x8a>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
     ad6:	11 c0       	rjmp	.+34     	; 0xafa <gfx_mono_st7565r_draw_pixel+0xa2>
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     ad8:	99 81       	ldd	r25, Y+1	; 0x01
     ada:	8b 81       	ldd	r24, Y+3	; 0x03
     adc:	89 2b       	or	r24, r25
     ade:	89 83       	std	Y+1, r24	; 0x01
		break;
     ae0:	0c c0       	rjmp	.+24     	; 0xafa <gfx_mono_st7565r_draw_pixel+0xa2>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     ae2:	8b 81       	ldd	r24, Y+3	; 0x03
     ae4:	98 2f       	mov	r25, r24
     ae6:	90 95       	com	r25
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	89 23       	and	r24, r25
     aec:	89 83       	std	Y+1, r24	; 0x01
		break;
     aee:	05 c0       	rjmp	.+10     	; 0xafa <gfx_mono_st7565r_draw_pixel+0xa2>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     af0:	99 81       	ldd	r25, Y+1	; 0x01
     af2:	8b 81       	ldd	r24, Y+3	; 0x03
     af4:	89 27       	eor	r24, r25
     af6:	89 83       	std	Y+1, r24	; 0x01
		break;
     af8:	00 00       	nop

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     afa:	8a 81       	ldd	r24, Y+2	; 0x02
     afc:	6c 81       	ldd	r22, Y+4	; 0x04
     afe:	49 81       	ldd	r20, Y+1	; 0x01
     b00:	0a d0       	rcall	.+20     	; 0xb16 <gfx_mono_st7565r_put_byte>
     b02:	03 c0       	rjmp	.+6      	; 0xb0a <gfx_mono_st7565r_draw_pixel+0xb2>
	uint8_t pixel_mask;
	uint8_t pixel_value;

	// Discard pixels drawn outside the screen
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
		return;
     b04:	00 00       	nop
     b06:	01 c0       	rjmp	.+2      	; 0xb0a <gfx_mono_st7565r_draw_pixel+0xb2>
     b08:	00 00       	nop
	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
}
     b0a:	26 96       	adiw	r28, 0x06	; 6
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	cf 91       	pop	r28
     b12:	df 91       	pop	r29
     b14:	08 95       	ret

00000b16 <gfx_mono_st7565r_put_byte>:
 * gfx_mono_st7565r_put_byte(0, 0, 0xFF);
 * \endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     b16:	df 93       	push	r29
     b18:	cf 93       	push	r28
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <gfx_mono_st7565r_put_byte+0x6>
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	89 83       	std	Y+1, r24	; 0x01
     b22:	6a 83       	std	Y+2, r22	; 0x02
     b24:	4b 83       	std	Y+3, r20	; 0x03
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     b26:	89 81       	ldd	r24, Y+1	; 0x01
     b28:	6a 81       	ldd	r22, Y+2	; 0x02
     b2a:	4b 81       	ldd	r20, Y+3	; 0x03
     b2c:	2f d0       	rcall	.+94     	; 0xb8c <gfx_mono_framebuffer_put_byte>
#endif

	st7565r_set_page_address(page);
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	39 df       	rcall	.-398    	; 0x9a4 <st7565r_set_page_address>
	st7565r_set_column_address(column);
     b32:	8a 81       	ldd	r24, Y+2	; 0x02
     b34:	47 df       	rcall	.-370    	; 0x9c4 <st7565r_set_column_address>

	st7565r_write_data(data);
     b36:	8b 81       	ldd	r24, Y+3	; 0x03
     b38:	1b df       	rcall	.-458    	; 0x970 <st7565r_write_data>
}
     b3a:	23 96       	adiw	r28, 0x03	; 3
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	de bf       	out	0x3e, r29	; 62
     b40:	cf 91       	pop	r28
     b42:	df 91       	pop	r29
     b44:	08 95       	ret

00000b46 <gfx_mono_st7565r_get_byte>:
 * \code
 * data = gfx_mono_st7565r_get_byte(0, 0);
 * \endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	6a 83       	std	Y+2, r22	; 0x02
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	6a 81       	ldd	r22, Y+2	; 0x02
     b5a:	3d d0       	rcall	.+122    	; 0xbd6 <gfx_mono_framebuffer_get_byte>
	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	return st7565r_read_data();
#endif
}
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <gfx_mono_set_framebuffer>:
 * uint8_t framebuffer[FRAMEBUFFER_SIZE];
 * gfx_mono_set_framebuffer(framebuffer);
 * \endcode
*/
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	0f 92       	push	r0
     b6c:	0f 92       	push	r0
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	9a 83       	std	Y+2, r25	; 0x02
	fbpointer = framebuffer;
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	9a 81       	ldd	r25, Y+2	; 0x02
     b7a:	80 93 02 22 	sts	0x2202, r24
     b7e:	90 93 03 22 	sts	0x2203, r25
}
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <gfx_mono_framebuffer_put_byte>:
 * \code
 * gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
 * \endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column, uint8_t data)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	00 d0       	rcall	.+0      	; 0xb92 <gfx_mono_framebuffer_put_byte+0x6>
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	89 83       	std	Y+1, r24	; 0x01
     b98:	6a 83       	std	Y+2, r22	; 0x02
     b9a:	4b 83       	std	Y+3, r20	; 0x03
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     b9c:	20 91 02 22 	lds	r18, 0x2202
     ba0:	30 91 03 22 	lds	r19, 0x2203
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	96 95       	lsr	r25
     bac:	98 2f       	mov	r25, r24
     bae:	88 27       	eor	r24, r24
     bb0:	97 95       	ror	r25
     bb2:	87 95       	ror	r24
     bb4:	ac 01       	movw	r20, r24
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	84 0f       	add	r24, r20
     bbe:	95 1f       	adc	r25, r21
     bc0:	82 0f       	add	r24, r18
     bc2:	93 1f       	adc	r25, r19
     bc4:	2b 81       	ldd	r18, Y+3	; 0x03
     bc6:	fc 01       	movw	r30, r24
     bc8:	20 83       	st	Z, r18
}
     bca:	23 96       	adiw	r28, 0x03	; 3
     bcc:	cd bf       	out	0x3d, r28	; 61
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	08 95       	ret

00000bd6 <gfx_mono_framebuffer_get_byte>:
 * \code
 * data = gfx_mono_framebuffer_get_byte(0, 0);
 * \endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
     bd6:	df 93       	push	r29
     bd8:	cf 93       	push	r28
     bda:	0f 92       	push	r0
     bdc:	0f 92       	push	r0
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	6a 83       	std	Y+2, r22	; 0x02
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     be6:	20 91 02 22 	lds	r18, 0x2202
     bea:	30 91 03 22 	lds	r19, 0x2203
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	88 2f       	mov	r24, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	96 95       	lsr	r25
     bf6:	98 2f       	mov	r25, r24
     bf8:	88 27       	eor	r24, r24
     bfa:	97 95       	ror	r25
     bfc:	87 95       	ror	r24
     bfe:	ac 01       	movw	r20, r24
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	88 2f       	mov	r24, r24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	84 0f       	add	r24, r20
     c08:	95 1f       	adc	r25, r21
     c0a:	82 0f       	add	r24, r18
     c0c:	93 1f       	adc	r25, r19
     c0e:	fc 01       	movw	r30, r24
     c10:	80 81       	ld	r24, Z
}
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	08 95       	ret

00000c1c <gfx_mono_generic_draw_horizontal_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	28 97       	sbiw	r28, 0x08	; 8
     c26:	cd bf       	out	0x3d, r28	; 61
     c28:	de bf       	out	0x3e, r29	; 62
     c2a:	8c 83       	std	Y+4, r24	; 0x04
     c2c:	6d 83       	std	Y+5, r22	; 0x05
     c2e:	4e 83       	std	Y+6, r20	; 0x06
     c30:	2f 83       	std	Y+7, r18	; 0x07
     c32:	38 87       	std	Y+8, r19	; 0x08
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	// Clip line length if too long
	if (x + length > GFX_MONO_LCD_WIDTH) {
     c34:	8c 81       	ldd	r24, Y+4	; 0x04
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	8e 81       	ldd	r24, Y+6	; 0x06
     c3c:	88 2f       	mov	r24, r24
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	82 0f       	add	r24, r18
     c42:	93 1f       	adc	r25, r19
     c44:	81 38       	cpi	r24, 0x81	; 129
     c46:	91 05       	cpc	r25, r1
     c48:	34 f0       	brlt	.+12     	; 0xc56 <gfx_mono_generic_draw_horizontal_line+0x3a>
		length = GFX_MONO_LCD_WIDTH - x;
     c4a:	90 e8       	ldi	r25, 0x80	; 128
     c4c:	8c 81       	ldd	r24, Y+4	; 0x04
     c4e:	29 2f       	mov	r18, r25
     c50:	28 1b       	sub	r18, r24
     c52:	82 2f       	mov	r24, r18
     c54:	8e 83       	std	Y+6, r24	; 0x06
	}

	page = y / 8;
     c56:	8d 81       	ldd	r24, Y+5	; 0x05
     c58:	86 95       	lsr	r24
     c5a:	86 95       	lsr	r24
     c5c:	86 95       	lsr	r24
     c5e:	89 83       	std	Y+1, r24	; 0x01
	pixelmask = (1 << (y - (page * 8)));
     c60:	8d 81       	ldd	r24, Y+5	; 0x05
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	48 2f       	mov	r20, r24
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	84 1b       	sub	r24, r20
     c72:	95 0b       	sbc	r25, r21
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	28 0f       	add	r18, r24
     c82:	39 1f       	adc	r19, r25
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 2e       	mov	r0, r18
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <gfx_mono_generic_draw_horizontal_line+0x74>
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	0a 94       	dec	r0
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <gfx_mono_generic_draw_horizontal_line+0x70>
     c94:	8a 83       	std	Y+2, r24	; 0x02

	if (length == 0) {
     c96:	8e 81       	ldd	r24, Y+6	; 0x06
     c98:	88 23       	and	r24, r24
     c9a:	09 f4       	brne	.+2      	; 0xc9e <gfx_mono_generic_draw_horizontal_line+0x82>
     c9c:	6c c0       	rjmp	.+216    	; 0xd76 <gfx_mono_generic_draw_horizontal_line+0x15a>
		// Nothing to do. Move along.
		return;
	}

	switch (color) {
     c9e:	8f 81       	ldd	r24, Y+7	; 0x07
     ca0:	98 85       	ldd	r25, Y+8	; 0x08
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	91 05       	cpc	r25, r1
     ca6:	d9 f0       	breq	.+54     	; 0xcde <gfx_mono_generic_draw_horizontal_line+0xc2>
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	91 05       	cpc	r25, r1
     cac:	c8 f1       	brcs	.+114    	; 0xd20 <gfx_mono_generic_draw_horizontal_line+0x104>
     cae:	82 30       	cpi	r24, 0x02	; 2
     cb0:	91 05       	cpc	r25, r1
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <gfx_mono_generic_draw_horizontal_line+0x9a>
     cb4:	54 c0       	rjmp	.+168    	; 0xd5e <gfx_mono_generic_draw_horizontal_line+0x142>
			gfx_mono_put_byte(page, x + length, temp);
		};
		break;

	default:
		break;
     cb6:	60 c0       	rjmp	.+192    	; 0xd78 <gfx_mono_generic_draw_horizontal_line+0x15c>
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     cb8:	9c 81       	ldd	r25, Y+4	; 0x04
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	98 0f       	add	r25, r24
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	69 2f       	mov	r22, r25
     cc2:	41 df       	rcall	.-382    	; 0xb46 <gfx_mono_st7565r_get_byte>
     cc4:	8b 83       	std	Y+3, r24	; 0x03
			temp |= pixelmask;
     cc6:	9b 81       	ldd	r25, Y+3	; 0x03
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	89 2b       	or	r24, r25
     ccc:	8b 83       	std	Y+3, r24	; 0x03
			gfx_mono_put_byte(page, x + length, temp);
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	8e 81       	ldd	r24, Y+6	; 0x06
     cd2:	98 0f       	add	r25, r24
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	69 2f       	mov	r22, r25
     cd8:	4b 81       	ldd	r20, Y+3	; 0x03
     cda:	1d df       	rcall	.-454    	; 0xb16 <gfx_mono_st7565r_put_byte>
     cdc:	01 c0       	rjmp	.+2      	; 0xce0 <gfx_mono_generic_draw_horizontal_line+0xc4>
		return;
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
     cde:	00 00       	nop
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	9e 81       	ldd	r25, Y+6	; 0x06
     ce4:	99 23       	and	r25, r25
     ce6:	09 f4       	brne	.+2      	; 0xcea <gfx_mono_generic_draw_horizontal_line+0xce>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	9e 81       	ldd	r25, Y+6	; 0x06
     cec:	91 50       	subi	r25, 0x01	; 1
     cee:	9e 83       	std	Y+6, r25	; 0x06
     cf0:	88 23       	and	r24, r24
     cf2:	11 f7       	brne	.-60     	; 0xcb8 <gfx_mono_generic_draw_horizontal_line+0x9c>
			temp = gfx_mono_get_byte(page, x + length);
			temp |= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
		};
		break;
     cf4:	41 c0       	rjmp	.+130    	; 0xd78 <gfx_mono_generic_draw_horizontal_line+0x15c>

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	8e 81       	ldd	r24, Y+6	; 0x06
     cfa:	98 0f       	add	r25, r24
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	69 2f       	mov	r22, r25
     d00:	22 df       	rcall	.-444    	; 0xb46 <gfx_mono_st7565r_get_byte>
     d02:	8b 83       	std	Y+3, r24	; 0x03
			temp &= ~pixelmask;
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	98 2f       	mov	r25, r24
     d08:	90 95       	com	r25
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	89 23       	and	r24, r25
     d0e:	8b 83       	std	Y+3, r24	; 0x03
			gfx_mono_put_byte(page, x + length, temp);
     d10:	9c 81       	ldd	r25, Y+4	; 0x04
     d12:	8e 81       	ldd	r24, Y+6	; 0x06
     d14:	98 0f       	add	r25, r24
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	69 2f       	mov	r22, r25
     d1a:	4b 81       	ldd	r20, Y+3	; 0x03
     d1c:	fc de       	rcall	.-520    	; 0xb16 <gfx_mono_st7565r_put_byte>
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <gfx_mono_generic_draw_horizontal_line+0x106>
			gfx_mono_put_byte(page, x + length, temp);
		};
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
     d20:	00 00       	nop
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	9e 81       	ldd	r25, Y+6	; 0x06
     d26:	99 23       	and	r25, r25
     d28:	09 f4       	brne	.+2      	; 0xd2c <gfx_mono_generic_draw_horizontal_line+0x110>
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	9e 81       	ldd	r25, Y+6	; 0x06
     d2e:	91 50       	subi	r25, 0x01	; 1
     d30:	9e 83       	std	Y+6, r25	; 0x06
     d32:	88 23       	and	r24, r24
     d34:	01 f7       	brne	.-64     	; 0xcf6 <gfx_mono_generic_draw_horizontal_line+0xda>
			temp = gfx_mono_get_byte(page, x + length);
			temp &= ~pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
		};
		break;
     d36:	20 c0       	rjmp	.+64     	; 0xd78 <gfx_mono_generic_draw_horizontal_line+0x15c>

	case GFX_PIXEL_XOR:
		while(length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     d38:	9c 81       	ldd	r25, Y+4	; 0x04
     d3a:	8e 81       	ldd	r24, Y+6	; 0x06
     d3c:	98 0f       	add	r25, r24
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	69 2f       	mov	r22, r25
     d42:	01 df       	rcall	.-510    	; 0xb46 <gfx_mono_st7565r_get_byte>
     d44:	8b 83       	std	Y+3, r24	; 0x03
			temp ^= pixelmask;
     d46:	9b 81       	ldd	r25, Y+3	; 0x03
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	89 27       	eor	r24, r25
     d4c:	8b 83       	std	Y+3, r24	; 0x03
			gfx_mono_put_byte(page, x + length, temp);
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	8e 81       	ldd	r24, Y+6	; 0x06
     d52:	98 0f       	add	r25, r24
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	69 2f       	mov	r22, r25
     d58:	4b 81       	ldd	r20, Y+3	; 0x03
     d5a:	dd de       	rcall	.-582    	; 0xb16 <gfx_mono_st7565r_put_byte>
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <gfx_mono_generic_draw_horizontal_line+0x144>
			gfx_mono_put_byte(page, x + length, temp);
		};
		break;

	case GFX_PIXEL_XOR:
		while(length-- > 0) {
     d5e:	00 00       	nop
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	99 23       	and	r25, r25
     d66:	09 f4       	brne	.+2      	; 0xd6a <gfx_mono_generic_draw_horizontal_line+0x14e>
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	9e 81       	ldd	r25, Y+6	; 0x06
     d6c:	91 50       	subi	r25, 0x01	; 1
     d6e:	9e 83       	std	Y+6, r25	; 0x06
     d70:	88 23       	and	r24, r24
     d72:	11 f7       	brne	.-60     	; 0xd38 <gfx_mono_generic_draw_horizontal_line+0x11c>
			temp = gfx_mono_get_byte(page, x + length);
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
		};
		break;
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <gfx_mono_generic_draw_horizontal_line+0x15c>
	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
		// Nothing to do. Move along.
		return;
     d76:	00 00       	nop
		break;

	default:
		break;
	}
}
     d78:	28 96       	adiw	r28, 0x08	; 8
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     d84:	0f 93       	push	r16
     d86:	1f 93       	push	r17
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <gfx_mono_generic_draw_filled_rect+0xa>
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <gfx_mono_generic_draw_filled_rect+0xc>
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	6a 83       	std	Y+2, r22	; 0x02
     d98:	4b 83       	std	Y+3, r20	; 0x03
     d9a:	2c 83       	std	Y+4, r18	; 0x04
     d9c:	0d 83       	std	Y+5, r16	; 0x05
     d9e:	1e 83       	std	Y+6, r17	; 0x06
	if (height == 0) {
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	88 23       	and	r24, r24
     da4:	59 f4       	brne	.+22     	; 0xdbc <gfx_mono_generic_draw_filled_rect+0x38>
		// Nothing to do. Move along.
		return;
     da6:	15 c0       	rjmp	.+42     	; 0xdd2 <gfx_mono_generic_draw_filled_rect+0x4e>
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     da8:	9a 81       	ldd	r25, Y+2	; 0x02
     daa:	8c 81       	ldd	r24, Y+4	; 0x04
     dac:	98 0f       	add	r25, r24
     dae:	2d 81       	ldd	r18, Y+5	; 0x05
     db0:	3e 81       	ldd	r19, Y+6	; 0x06
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	69 2f       	mov	r22, r25
     db6:	4b 81       	ldd	r20, Y+3	; 0x03
     db8:	31 df       	rcall	.-414    	; 0xc1c <gfx_mono_generic_draw_horizontal_line>
     dba:	01 c0       	rjmp	.+2      	; 0xdbe <gfx_mono_generic_draw_filled_rect+0x3a>
	if (height == 0) {
		// Nothing to do. Move along.
		return;
	}

	while (height-- > 0) {
     dbc:	00 00       	nop
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	9c 81       	ldd	r25, Y+4	; 0x04
     dc2:	99 23       	and	r25, r25
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <gfx_mono_generic_draw_filled_rect+0x44>
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	9c 81       	ldd	r25, Y+4	; 0x04
     dca:	91 50       	subi	r25, 0x01	; 1
     dcc:	9c 83       	std	Y+4, r25	; 0x04
     dce:	88 23       	and	r24, r24
     dd0:	59 f7       	brne	.-42     	; 0xda8 <gfx_mono_generic_draw_filled_rect+0x24>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	};

}
     dd2:	26 96       	adiw	r28, 0x06	; 6
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <usart_spi_init>:
 */
#include "usart_spi.h"
#include "sysclk.h"

void usart_spi_init(USART_t *usart)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	0f 92       	push	r0
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	89 83       	std	Y+1, r24	; 0x01
     df0:	9a 83       	std	Y+2, r25	; 0x02
#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	28 e0       	ldi	r18, 0x08	; 8
     df8:	80 3a       	cpi	r24, 0xA0	; 160
     dfa:	92 07       	cpc	r25, r18
     dfc:	29 f4       	brne	.+10     	; 0xe08 <usart_spi_init+0x26>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);	
     dfe:	83 e0       	ldi	r24, 0x03	; 3
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	60 e1       	ldi	r22, 0x10	; 16
     e04:	71 dc       	rcall	.-1822   	; 0x6e8 <sysclk_enable_module>
     e06:	36 c0       	rjmp	.+108    	; 0xe74 <usart_spi_init+0x92>
	}
#endif
#ifdef USARTC1
	else
	if((uint16_t)usart == (uint16_t)&USARTC1) {
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	9a 81       	ldd	r25, Y+2	; 0x02
     e0c:	28 e0       	ldi	r18, 0x08	; 8
     e0e:	80 3b       	cpi	r24, 0xB0	; 176
     e10:	92 07       	cpc	r25, r18
     e12:	29 f4       	brne	.+10     	; 0xe1e <usart_spi_init+0x3c>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);	
     e14:	83 e0       	ldi	r24, 0x03	; 3
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	60 e2       	ldi	r22, 0x20	; 32
     e1a:	66 dc       	rcall	.-1844   	; 0x6e8 <sysclk_enable_module>
     e1c:	2b c0       	rjmp	.+86     	; 0xe74 <usart_spi_init+0x92>
	}
#endif
#ifdef USARTD0
	else
	if((uint16_t)usart == (uint16_t)&USARTD0) {
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	9a 81       	ldd	r25, Y+2	; 0x02
     e22:	29 e0       	ldi	r18, 0x09	; 9
     e24:	80 3a       	cpi	r24, 0xA0	; 160
     e26:	92 07       	cpc	r25, r18
     e28:	29 f4       	brne	.+10     	; 0xe34 <usart_spi_init+0x52>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);	
     e2a:	84 e0       	ldi	r24, 0x04	; 4
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	60 e1       	ldi	r22, 0x10	; 16
     e30:	5b dc       	rcall	.-1866   	; 0x6e8 <sysclk_enable_module>
     e32:	20 c0       	rjmp	.+64     	; 0xe74 <usart_spi_init+0x92>
	}
#endif
#ifdef USARTD1
	else
	if((uint16_t)usart == (uint16_t)&USARTD1) {
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	29 e0       	ldi	r18, 0x09	; 9
     e3a:	80 3b       	cpi	r24, 0xB0	; 176
     e3c:	92 07       	cpc	r25, r18
     e3e:	29 f4       	brne	.+10     	; 0xe4a <usart_spi_init+0x68>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);	
     e40:	84 e0       	ldi	r24, 0x04	; 4
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	60 e2       	ldi	r22, 0x20	; 32
     e46:	50 dc       	rcall	.-1888   	; 0x6e8 <sysclk_enable_module>
     e48:	15 c0       	rjmp	.+42     	; 0xe74 <usart_spi_init+0x92>
	}
#endif
#ifdef USARTE0
	else
	if((uint16_t)usart == (uint16_t)&USARTE0) {
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	9a 81       	ldd	r25, Y+2	; 0x02
     e4e:	2a e0       	ldi	r18, 0x0A	; 10
     e50:	80 3a       	cpi	r24, 0xA0	; 160
     e52:	92 07       	cpc	r25, r18
     e54:	29 f4       	brne	.+10     	; 0xe60 <usart_spi_init+0x7e>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);	
     e56:	85 e0       	ldi	r24, 0x05	; 5
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	60 e1       	ldi	r22, 0x10	; 16
     e5c:	45 dc       	rcall	.-1910   	; 0x6e8 <sysclk_enable_module>
     e5e:	0a c0       	rjmp	.+20     	; 0xe74 <usart_spi_init+0x92>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);	
	}
#endif
#ifdef USARTF0
	else
	if((uint16_t)usart == (uint16_t)&USARTF0) {
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	9a 81       	ldd	r25, Y+2	; 0x02
     e64:	2b e0       	ldi	r18, 0x0B	; 11
     e66:	80 3a       	cpi	r24, 0xA0	; 160
     e68:	92 07       	cpc	r25, r18
     e6a:	21 f4       	brne	.+8      	; 0xe74 <usart_spi_init+0x92>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);	
     e6c:	86 e0       	ldi	r24, 0x06	; 6
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	60 e1       	ldi	r22, 0x10	; 16
     e72:	3a dc       	rcall	.-1932   	; 0x6e8 <sysclk_enable_module>
	else
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);	
	}
#endif
}
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <usart_spi_setup_device>:

void usart_spi_setup_device(USART_t *usart, struct usart_spi_device *device, 
     spi_flags_t flags, unsigned long baud_rate,
     board_spi_select_id_t sel_id)
{
     e7e:	cf 92       	push	r12
     e80:	df 92       	push	r13
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	63 97       	sbiw	r28, 0x13	; 19
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	8f 83       	std	Y+7, r24	; 0x07
     e9a:	98 87       	std	Y+8, r25	; 0x08
     e9c:	69 87       	std	Y+9, r22	; 0x09
     e9e:	7a 87       	std	Y+10, r23	; 0x0a
     ea0:	4b 87       	std	Y+11, r20	; 0x0b
     ea2:	0c 87       	std	Y+12, r16	; 0x0c
     ea4:	1d 87       	std	Y+13, r17	; 0x0d
     ea6:	2e 87       	std	Y+14, r18	; 0x0e
     ea8:	3f 87       	std	Y+15, r19	; 0x0f
     eaa:	c8 8a       	std	Y+16, r12	; 0x10
     eac:	d9 8a       	std	Y+17, r13	; 0x11
     eae:	ea 8a       	std	Y+18, r14	; 0x12
     eb0:	fb 8a       	std	Y+19, r15	; 0x13
	usart_spi_options_t opt;
	opt.baudrate=baud_rate;
     eb2:	8c 85       	ldd	r24, Y+12	; 0x0c
     eb4:	9d 85       	ldd	r25, Y+13	; 0x0d
     eb6:	ae 85       	ldd	r26, Y+14	; 0x0e
     eb8:	bf 85       	ldd	r27, Y+15	; 0x0f
     eba:	89 83       	std	Y+1, r24	; 0x01
     ebc:	9a 83       	std	Y+2, r25	; 0x02
     ebe:	ab 83       	std	Y+3, r26	; 0x03
     ec0:	bc 83       	std	Y+4, r27	; 0x04
	opt.spimode=flags;
     ec2:	8b 85       	ldd	r24, Y+11	; 0x0b
     ec4:	8d 83       	std	Y+5, r24	; 0x05
	opt.data_order=false;
     ec6:	1e 82       	std	Y+6, r1	; 0x06
	usart_init_spi(usart, &opt);
     ec8:	8f 81       	ldd	r24, Y+7	; 0x07
     eca:	98 85       	ldd	r25, Y+8	; 0x08
     ecc:	9e 01       	movw	r18, r28
     ece:	2f 5f       	subi	r18, 0xFF	; 255
     ed0:	3f 4f       	sbci	r19, 0xFF	; 255
     ed2:	b9 01       	movw	r22, r18
     ed4:	0e 94 0f 10 	call	0x201e	; 0x201e <usart_init_spi>
}
     ed8:	63 96       	adiw	r28, 0x13	; 19
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	df 90       	pop	r13
     eec:	cf 90       	pop	r12
     eee:	08 95       	ret

00000ef0 <ioport_pin_to_port>:
 * \param pin PORT pin number. This number can be generated by the macro
 * CREATE_PORT_PIN.
 * \return Pointer to the port on which the pin is located.
 */
static inline PORT_t *ioport_pin_to_port(port_pin_t pin)
{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	0f 92       	push	r0
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	89 83       	std	Y+1, r24	; 0x01
	// Each port has an offset of 0x20
	return (PORT_t *)((uintptr_t)&PORTA + (pin >> 3) * 0x20);
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	86 95       	lsr	r24
     f00:	86 95       	lsr	r24
     f02:	86 95       	lsr	r24
     f04:	88 2f       	mov	r24, r24
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	c0 96       	adiw	r24, 0x30	; 48
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	82 95       	swap	r24
     f10:	92 95       	swap	r25
     f12:	90 7f       	andi	r25, 0xF0	; 240
     f14:	98 27       	eor	r25, r24
     f16:	80 7f       	andi	r24, 0xF0	; 240
     f18:	98 27       	eor	r25, r24
}
     f1a:	0f 90       	pop	r0
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <ioport_pin_to_mask>:
 *
 * \param pin PORT pin number.
 * \return Pin mask.
 */
static inline pin_mask_t ioport_pin_to_mask(port_pin_t pin)
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	0f 92       	push	r0
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	89 83       	std	Y+1, r24	; 0x01
	return 1U << (pin & 0x7);
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	9c 01       	movw	r18, r24
     f36:	27 70       	andi	r18, 0x07	; 7
     f38:	30 70       	andi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <ioport_pin_to_mask+0x24>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <ioport_pin_to_mask+0x20>
}
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <ioport_configure_pin+0xa>
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	6a 83       	std	Y+2, r22	; 0x02
     f64:	7b 83       	std	Y+3, r23	; 0x03
	ioport_configure_port_pin(ioport_pin_to_port(pin), ioport_pin_to_mask(pin), flags);
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	c3 df       	rcall	.-122    	; 0xef0 <ioport_pin_to_port>
     f6a:	8c 01       	movw	r16, r24
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	d9 df       	rcall	.-78     	; 0xf22 <ioport_pin_to_mask>
     f70:	48 2f       	mov	r20, r24
     f72:	2a 81       	ldd	r18, Y+2	; 0x02
     f74:	3b 81       	ldd	r19, Y+3	; 0x03
     f76:	c8 01       	movw	r24, r16
     f78:	64 2f       	mov	r22, r20
     f7a:	a9 01       	movw	r20, r18
     f7c:	e2 d6       	rcall	.+3524   	; 0x1d42 <ioport_configure_port_pin>
}
     f7e:	23 96       	adiw	r28, 0x03	; 3
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	08 95       	ret

00000f8e <board_init>:
 * \addtogroup xmega_a3bu_xplained_group
 * @{
 */

void board_init(void)
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
	ioport_configure_pin(LED0_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
     f96:	88 e7       	ldi	r24, 0x78	; 120
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	73 e0       	ldi	r23, 0x03	; 3
     f9c:	da df       	rcall	.-76     	; 0xf52 <ioport_configure_pin>
	ioport_configure_pin(LED1_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
     f9e:	89 e7       	ldi	r24, 0x79	; 121
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	73 e0       	ldi	r23, 0x03	; 3
     fa4:	d6 df       	rcall	.-84     	; 0xf52 <ioport_configure_pin>
	ioport_configure_pin(LED2_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
     fa6:	8c e1       	ldi	r24, 0x1C	; 28
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	73 e0       	ldi	r23, 0x03	; 3
     fac:	d2 df       	rcall	.-92     	; 0xf52 <ioport_configure_pin>
	ioport_configure_pin(LED3_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW
     fae:	8d e1       	ldi	r24, 0x1D	; 29
     fb0:	60 e4       	ldi	r22, 0x40	; 64
     fb2:	71 e0       	ldi	r23, 0x01	; 1
     fb4:	ce df       	rcall	.-100    	; 0xf52 <ioport_configure_pin>
			| IOPORT_INV_ENABLED);

	ioport_configure_pin(GPIO_PUSH_BUTTON_0, IOPORT_DIR_INPUT
     fb6:	85 e2       	ldi	r24, 0x25	; 37
     fb8:	6b e1       	ldi	r22, 0x1B	; 27
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	ca df       	rcall	.-108    	; 0xf52 <ioport_configure_pin>
			| IOPORT_LEVEL | IOPORT_PULL_UP);

#ifdef CONF_BOARD_C12832A1Z
	ioport_configure_pin(NHD_C12832A1Z_SPI_SCK, IOPORT_DIR_OUTPUT
     fbe:	89 e1       	ldi	r24, 0x19	; 25
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	73 e0       	ldi	r23, 0x03	; 3
     fc4:	c6 df       	rcall	.-116    	; 0xf52 <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(NHD_C12832A1Z_SPI_MOSI, IOPORT_DIR_OUTPUT
     fc6:	8b e1       	ldi	r24, 0x1B	; 27
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	73 e0       	ldi	r23, 0x03	; 3
     fcc:	c2 df       	rcall	.-124    	; 0xf52 <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(NHD_C12832A1Z_CSN, IOPORT_DIR_OUTPUT
     fce:	8b e2       	ldi	r24, 0x2B	; 43
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	73 e0       	ldi	r23, 0x03	; 3
     fd4:	be df       	rcall	.-132    	; 0xf52 <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(NHD_C12832A1Z_REGISTER_SELECT, IOPORT_DIR_OUTPUT
     fd6:	88 e1       	ldi	r24, 0x18	; 24
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	73 e0       	ldi	r23, 0x03	; 3
     fdc:	ba df       	rcall	.-140    	; 0xf52 <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(NHD_C12832A1Z_RESETN, IOPORT_DIR_OUTPUT
     fde:	83 e0       	ldi	r24, 0x03	; 3
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	73 e0       	ldi	r23, 0x03	; 3
     fe4:	b6 df       	rcall	.-148    	; 0xf52 <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(NHD_C12832A1Z_BACKLIGHT, IOPORT_DIR_OUTPUT
     fe6:	84 e2       	ldi	r24, 0x24	; 36
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	71 e0       	ldi	r23, 0x01	; 1
     fec:	b2 df       	rcall	.-156    	; 0xf52 <ioport_configure_pin>
#ifdef CONF_BOARD_ENABLE_USARTD0
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTD, 3), IOPORT_DIR_OUTPUT
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTD, 2), IOPORT_DIR_INPUT);
#endif
}
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	0f 92       	push	r0
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags = SREG;
     ffe:	8f e3       	ldi	r24, 0x3F	; 63
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	fc 01       	movw	r30, r24
    1004:	80 81       	ld	r24, Z
    1006:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1008:	f8 94       	cli
	return flags;
    100a:	89 81       	ldd	r24, Y+1	; 0x01
}
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	0f 92       	push	r0
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    1020:	8f e3       	ldi	r24, 0x3F	; 63
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	29 81       	ldd	r18, Y+1	; 0x01
    1026:	fc 01       	movw	r30, r24
    1028:	20 83       	st	Z, r18
}
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <nvm_read_production_signature_row>:
 *       the program space reads will be corrupted.
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	0f 92       	push	r0
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	89 83       	std	Y+1, r24	; 0x01
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	82 e0       	ldi	r24, 0x02	; 2
    1046:	b9 01       	movw	r22, r18
    1048:	d6 d6       	rcall	.+3500   	; 0x1df6 <nvm_read_byte>
}
    104a:	0f 90       	pop	r0
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	00 d0       	rcall	.+0      	; 0x1058 <sleepmgr_lock_mode+0x6>
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	8a 83       	std	Y+2, r24	; 0x02
    105e:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t flags;

	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();
    1060:	c9 df       	rcall	.-110    	; 0xff4 <cpu_irq_save>
    1062:	89 83       	std	Y+1, r24	; 0x01

	++sleepmgr_locks[mode];
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	9b 81       	ldd	r25, Y+3	; 0x03
    1068:	89 5e       	subi	r24, 0xE9	; 233
    106a:	9d 4d       	sbci	r25, 0xDD	; 221
    106c:	fc 01       	movw	r30, r24
    106e:	80 81       	ld	r24, Z
    1070:	28 2f       	mov	r18, r24
    1072:	2f 5f       	subi	r18, 0xFF	; 255
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	9b 81       	ldd	r25, Y+3	; 0x03
    1078:	89 5e       	subi	r24, 0xE9	; 233
    107a:	9d 4d       	sbci	r25, 0xDD	; 221
    107c:	fc 01       	movw	r30, r24
    107e:	20 83       	st	Z, r18

	// Leave the critical section
	cpu_irq_restore(flags);
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	c8 df       	rcall	.-112    	; 0x1014 <cpu_irq_restore>
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    1084:	23 96       	adiw	r28, 0x03	; 3
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <adc_get_calibration_data>:
 * \brief Get calibration data
 *
 * \param cal Identifier for calibration data to get.
 */
static inline uint16_t adc_get_calibration_data(enum adc_calibration_data cal)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <adc_get_calibration_data+0x6>
    1096:	0f 92       	push	r0
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	8b 83       	std	Y+3, r24	; 0x03
    109e:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t data;

	switch (cal) {
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	91 05       	cpc	r25, r1
    10a8:	f1 f0       	breq	.+60     	; 0x10e6 <adc_get_calibration_data+0x56>
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	91 05       	cpc	r25, r1
    10ae:	20 f0       	brcs	.+8      	; 0x10b8 <adc_get_calibration_data+0x28>
    10b0:	82 30       	cpi	r24, 0x02	; 2
    10b2:	91 05       	cpc	r25, r1
    10b4:	79 f1       	breq	.+94     	; 0x1114 <adc_get_calibration_data+0x84>
    10b6:	45 c0       	rjmp	.+138    	; 0x1142 <adc_get_calibration_data+0xb2>
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    10b8:	81 e2       	ldi	r24, 0x21	; 33
    10ba:	bb df       	rcall	.-138    	; 0x1032 <nvm_read_production_signature_row>
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	98 2f       	mov	r25, r24
    10ca:	88 27       	eor	r24, r24
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	9a 83       	std	Y+2, r25	; 0x02
		data |= nvm_read_production_signature_row(ADCACAL0);
    10d0:	80 e2       	ldi	r24, 0x20	; 32
    10d2:	af df       	rcall	.-162    	; 0x1032 <nvm_read_production_signature_row>
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	29 81       	ldd	r18, Y+1	; 0x01
    10da:	3a 81       	ldd	r19, Y+2	; 0x02
    10dc:	82 2b       	or	r24, r18
    10de:	93 2b       	or	r25, r19
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	9a 83       	std	Y+2, r25	; 0x02
		break;
    10e4:	30 c0       	rjmp	.+96     	; 0x1146 <adc_get_calibration_data+0xb6>
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    10e6:	85 e2       	ldi	r24, 0x25	; 37
    10e8:	a4 df       	rcall	.-184    	; 0x1032 <nvm_read_production_signature_row>
    10ea:	88 2f       	mov	r24, r24
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	9a 81       	ldd	r25, Y+2	; 0x02
    10f6:	98 2f       	mov	r25, r24
    10f8:	88 27       	eor	r24, r24
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	9a 83       	std	Y+2, r25	; 0x02
		data |= nvm_read_production_signature_row(ADCBCAL0);
    10fe:	84 e2       	ldi	r24, 0x24	; 36
    1100:	98 df       	rcall	.-208    	; 0x1032 <nvm_read_production_signature_row>
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	29 81       	ldd	r18, Y+1	; 0x01
    1108:	3a 81       	ldd	r19, Y+2	; 0x02
    110a:	82 2b       	or	r24, r18
    110c:	93 2b       	or	r25, r19
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	9a 83       	std	Y+2, r25	; 0x02
		break;
    1112:	19 c0       	rjmp	.+50     	; 0x1146 <adc_get_calibration_data+0xb6>
#endif

#if defined(ADCA) || defined(ADCB)
	case ADC_CAL_TEMPSENSE:
		data = nvm_read_production_signature_row(TEMPSENSE1);
    1114:	8f e2       	ldi	r24, 0x2F	; 47
    1116:	8d df       	rcall	.-230    	; 0x1032 <nvm_read_production_signature_row>
    1118:	88 2f       	mov	r24, r24
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	9a 81       	ldd	r25, Y+2	; 0x02
    1124:	98 2f       	mov	r25, r24
    1126:	88 27       	eor	r24, r24
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	9a 83       	std	Y+2, r25	; 0x02
		data |= nvm_read_production_signature_row(TEMPSENSE0);
    112c:	8e e2       	ldi	r24, 0x2E	; 46
    112e:	81 df       	rcall	.-254    	; 0x1032 <nvm_read_production_signature_row>
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	29 81       	ldd	r18, Y+1	; 0x01
    1136:	3a 81       	ldd	r19, Y+2	; 0x02
    1138:	82 2b       	or	r24, r18
    113a:	93 2b       	or	r25, r19
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	9a 83       	std	Y+2, r25	; 0x02
		break;
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <adc_get_calibration_data+0xb6>
#endif

	default:
		Assert(0);
		data = 0;
    1142:	19 82       	std	Y+1, r1	; 0x01
    1144:	1a 82       	std	Y+2, r1	; 0x02
	}

	return data;
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
}
    114a:	24 96       	adiw	r28, 0x04	; 4
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    1156:	1f 92       	push	r1
    1158:	0f 92       	push	r0
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	0f 92       	push	r0
    115e:	00 90 3b 00 	lds	r0, 0x003B
    1162:	0f 92       	push	r0
    1164:	11 24       	eor	r1, r1
    1166:	2f 93       	push	r18
    1168:	3f 93       	push	r19
    116a:	4f 93       	push	r20
    116c:	5f 93       	push	r21
    116e:	6f 93       	push	r22
    1170:	7f 93       	push	r23
    1172:	8f 93       	push	r24
    1174:	9f 93       	push	r25
    1176:	af 93       	push	r26
    1178:	bf 93       	push	r27
    117a:	ef 93       	push	r30
    117c:	ff 93       	push	r31
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	00 d0       	rcall	.+0      	; 0x1184 <__vector_71+0x2e>
    1184:	0f 92       	push	r0
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    118a:	20 91 05 22 	lds	r18, 0x2205
    118e:	30 91 06 22 	lds	r19, 0x2206
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	92 e0       	ldi	r25, 0x02	; 2
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	9a 83       	std	Y+2, r25	; 0x02
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	8b 83       	std	Y+3, r24	; 0x03
 *
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    119e:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	83 70       	andi	r24, 0x03	; 3
    11a8:	90 70       	andi	r25, 0x00	; 0
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	39 f4       	brne	.+14     	; 0x11bc <__vector_71+0x66>
		index += 2;
    11ae:	8c 81       	ldd	r24, Y+4	; 0x04
    11b0:	8e 5f       	subi	r24, 0xFE	; 254
    11b2:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	86 95       	lsr	r24
    11b8:	86 95       	lsr	r24
    11ba:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01))
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	88 2f       	mov	r24, r24
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	81 70       	andi	r24, 0x01	; 1
    11c4:	90 70       	andi	r25, 0x00	; 0
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	19 f4       	brne	.+6      	; 0x11d0 <__vector_71+0x7a>
		index++;
    11ca:	8c 81       	ldd	r24, Y+4	; 0x04
    11cc:	8f 5f       	subi	r24, 0xFF	; 255
    11ce:	8c 83       	std	Y+4, r24	; 0x04
#endif

	return &adc->CH0 + index;
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	ac 01       	movw	r20, r24
    11d6:	40 5e       	subi	r20, 0xE0	; 224
    11d8:	5f 4f       	sbci	r21, 0xFF	; 255
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	bc 01       	movw	r22, r24
    11e2:	66 0f       	add	r22, r22
    11e4:	77 1f       	adc	r23, r23
    11e6:	66 0f       	add	r22, r22
    11e8:	77 1f       	adc	r23, r23
    11ea:	66 0f       	add	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	fb 01       	movw	r30, r22
    11f0:	e8 1b       	sub	r30, r24
    11f2:	f9 0b       	sbc	r31, r25
    11f4:	cf 01       	movw	r24, r30
    11f6:	84 0f       	add	r24, r20
    11f8:	95 1f       	adc	r25, r21
    11fa:	fc 01       	movw	r30, r24
    11fc:	44 81       	ldd	r20, Z+4	; 0x04
    11fe:	55 81       	ldd	r21, Z+5	; 0x05
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	92 e0       	ldi	r25, 0x02	; 2
    1204:	61 e0       	ldi	r22, 0x01	; 1
    1206:	f9 01       	movw	r30, r18
    1208:	19 95       	eicall
}
    120a:	24 96       	adiw	r28, 0x04	; 4
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	ff 91       	pop	r31
    1216:	ef 91       	pop	r30
    1218:	bf 91       	pop	r27
    121a:	af 91       	pop	r26
    121c:	9f 91       	pop	r25
    121e:	8f 91       	pop	r24
    1220:	7f 91       	pop	r23
    1222:	6f 91       	pop	r22
    1224:	5f 91       	pop	r21
    1226:	4f 91       	pop	r20
    1228:	3f 91       	pop	r19
    122a:	2f 91       	pop	r18
    122c:	0f 90       	pop	r0
    122e:	00 92 3b 00 	sts	0x003B, r0
    1232:	0f 90       	pop	r0
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	0f 90       	pop	r0
    1238:	1f 90       	pop	r1
    123a:	18 95       	reti

0000123c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    123c:	1f 92       	push	r1
    123e:	0f 92       	push	r0
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	0f 92       	push	r0
    1244:	00 90 3b 00 	lds	r0, 0x003B
    1248:	0f 92       	push	r0
    124a:	11 24       	eor	r1, r1
    124c:	2f 93       	push	r18
    124e:	3f 93       	push	r19
    1250:	4f 93       	push	r20
    1252:	5f 93       	push	r21
    1254:	6f 93       	push	r22
    1256:	7f 93       	push	r23
    1258:	8f 93       	push	r24
    125a:	9f 93       	push	r25
    125c:	af 93       	push	r26
    125e:	bf 93       	push	r27
    1260:	ef 93       	push	r30
    1262:	ff 93       	push	r31
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <__vector_72+0x2e>
    126a:	0f 92       	push	r0
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    1270:	20 91 05 22 	lds	r18, 0x2205
    1274:	30 91 06 22 	lds	r19, 0x2206
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	92 e0       	ldi	r25, 0x02	; 2
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	9a 83       	std	Y+2, r25	; 0x02
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	8b 83       	std	Y+3, r24	; 0x03
 *
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1284:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	83 70       	andi	r24, 0x03	; 3
    128e:	90 70       	andi	r25, 0x00	; 0
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	39 f4       	brne	.+14     	; 0x12a2 <__vector_72+0x66>
		index += 2;
    1294:	8c 81       	ldd	r24, Y+4	; 0x04
    1296:	8e 5f       	subi	r24, 0xFE	; 254
    1298:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	86 95       	lsr	r24
    129e:	86 95       	lsr	r24
    12a0:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01))
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	81 70       	andi	r24, 0x01	; 1
    12aa:	90 70       	andi	r25, 0x00	; 0
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	19 f4       	brne	.+6      	; 0x12b6 <__vector_72+0x7a>
		index++;
    12b0:	8c 81       	ldd	r24, Y+4	; 0x04
    12b2:	8f 5f       	subi	r24, 0xFF	; 255
    12b4:	8c 83       	std	Y+4, r24	; 0x04
#endif

	return &adc->CH0 + index;
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ba:	ac 01       	movw	r20, r24
    12bc:	40 5e       	subi	r20, 0xE0	; 224
    12be:	5f 4f       	sbci	r21, 0xFF	; 255
    12c0:	8c 81       	ldd	r24, Y+4	; 0x04
    12c2:	88 2f       	mov	r24, r24
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	bc 01       	movw	r22, r24
    12c8:	66 0f       	add	r22, r22
    12ca:	77 1f       	adc	r23, r23
    12cc:	66 0f       	add	r22, r22
    12ce:	77 1f       	adc	r23, r23
    12d0:	66 0f       	add	r22, r22
    12d2:	77 1f       	adc	r23, r23
    12d4:	fb 01       	movw	r30, r22
    12d6:	e8 1b       	sub	r30, r24
    12d8:	f9 0b       	sbc	r31, r25
    12da:	cf 01       	movw	r24, r30
    12dc:	84 0f       	add	r24, r20
    12de:	95 1f       	adc	r25, r21
    12e0:	fc 01       	movw	r30, r24
    12e2:	44 81       	ldd	r20, Z+4	; 0x04
    12e4:	55 81       	ldd	r21, Z+5	; 0x05
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	92 e0       	ldi	r25, 0x02	; 2
    12ea:	62 e0       	ldi	r22, 0x02	; 2
    12ec:	f9 01       	movw	r30, r18
    12ee:	19 95       	eicall
}
    12f0:	24 96       	adiw	r28, 0x04	; 4
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	ff 91       	pop	r31
    12fc:	ef 91       	pop	r30
    12fe:	bf 91       	pop	r27
    1300:	af 91       	pop	r26
    1302:	9f 91       	pop	r25
    1304:	8f 91       	pop	r24
    1306:	7f 91       	pop	r23
    1308:	6f 91       	pop	r22
    130a:	5f 91       	pop	r21
    130c:	4f 91       	pop	r20
    130e:	3f 91       	pop	r19
    1310:	2f 91       	pop	r18
    1312:	0f 90       	pop	r0
    1314:	00 92 3b 00 	sts	0x003B, r0
    1318:	0f 90       	pop	r0
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	0f 90       	pop	r0
    131e:	1f 90       	pop	r1
    1320:	18 95       	reti

00001322 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    1322:	1f 92       	push	r1
    1324:	0f 92       	push	r0
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	0f 92       	push	r0
    132a:	00 90 3b 00 	lds	r0, 0x003B
    132e:	0f 92       	push	r0
    1330:	11 24       	eor	r1, r1
    1332:	2f 93       	push	r18
    1334:	3f 93       	push	r19
    1336:	4f 93       	push	r20
    1338:	5f 93       	push	r21
    133a:	6f 93       	push	r22
    133c:	7f 93       	push	r23
    133e:	8f 93       	push	r24
    1340:	9f 93       	push	r25
    1342:	af 93       	push	r26
    1344:	bf 93       	push	r27
    1346:	ef 93       	push	r30
    1348:	ff 93       	push	r31
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	00 d0       	rcall	.+0      	; 0x1350 <__vector_73+0x2e>
    1350:	0f 92       	push	r0
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    1356:	20 91 05 22 	lds	r18, 0x2205
    135a:	30 91 06 22 	lds	r19, 0x2206
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	92 e0       	ldi	r25, 0x02	; 2
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	9a 83       	std	Y+2, r25	; 0x02
    1366:	84 e0       	ldi	r24, 0x04	; 4
    1368:	8b 83       	std	Y+3, r24	; 0x03
 *
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    136a:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	88 2f       	mov	r24, r24
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	83 70       	andi	r24, 0x03	; 3
    1374:	90 70       	andi	r25, 0x00	; 0
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	39 f4       	brne	.+14     	; 0x1388 <__vector_73+0x66>
		index += 2;
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	8e 5f       	subi	r24, 0xFE	; 254
    137e:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	86 95       	lsr	r24
    1384:	86 95       	lsr	r24
    1386:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01))
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	88 2f       	mov	r24, r24
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	81 70       	andi	r24, 0x01	; 1
    1390:	90 70       	andi	r25, 0x00	; 0
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	19 f4       	brne	.+6      	; 0x139c <__vector_73+0x7a>
		index++;
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	8f 5f       	subi	r24, 0xFF	; 255
    139a:	8c 83       	std	Y+4, r24	; 0x04
#endif

	return &adc->CH0 + index;
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	9a 81       	ldd	r25, Y+2	; 0x02
    13a0:	ac 01       	movw	r20, r24
    13a2:	40 5e       	subi	r20, 0xE0	; 224
    13a4:	5f 4f       	sbci	r21, 0xFF	; 255
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	88 2f       	mov	r24, r24
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	bc 01       	movw	r22, r24
    13ae:	66 0f       	add	r22, r22
    13b0:	77 1f       	adc	r23, r23
    13b2:	66 0f       	add	r22, r22
    13b4:	77 1f       	adc	r23, r23
    13b6:	66 0f       	add	r22, r22
    13b8:	77 1f       	adc	r23, r23
    13ba:	fb 01       	movw	r30, r22
    13bc:	e8 1b       	sub	r30, r24
    13be:	f9 0b       	sbc	r31, r25
    13c0:	cf 01       	movw	r24, r30
    13c2:	84 0f       	add	r24, r20
    13c4:	95 1f       	adc	r25, r21
    13c6:	fc 01       	movw	r30, r24
    13c8:	44 81       	ldd	r20, Z+4	; 0x04
    13ca:	55 81       	ldd	r21, Z+5	; 0x05
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	92 e0       	ldi	r25, 0x02	; 2
    13d0:	64 e0       	ldi	r22, 0x04	; 4
    13d2:	f9 01       	movw	r30, r18
    13d4:	19 95       	eicall
}
    13d6:	24 96       	adiw	r28, 0x04	; 4
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	ff 91       	pop	r31
    13e2:	ef 91       	pop	r30
    13e4:	bf 91       	pop	r27
    13e6:	af 91       	pop	r26
    13e8:	9f 91       	pop	r25
    13ea:	8f 91       	pop	r24
    13ec:	7f 91       	pop	r23
    13ee:	6f 91       	pop	r22
    13f0:	5f 91       	pop	r21
    13f2:	4f 91       	pop	r20
    13f4:	3f 91       	pop	r19
    13f6:	2f 91       	pop	r18
    13f8:	0f 90       	pop	r0
    13fa:	00 92 3b 00 	sts	0x003B, r0
    13fe:	0f 90       	pop	r0
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	0f 90       	pop	r0
    1404:	1f 90       	pop	r1
    1406:	18 95       	reti

00001408 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    1408:	1f 92       	push	r1
    140a:	0f 92       	push	r0
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	0f 92       	push	r0
    1410:	00 90 3b 00 	lds	r0, 0x003B
    1414:	0f 92       	push	r0
    1416:	11 24       	eor	r1, r1
    1418:	2f 93       	push	r18
    141a:	3f 93       	push	r19
    141c:	4f 93       	push	r20
    141e:	5f 93       	push	r21
    1420:	6f 93       	push	r22
    1422:	7f 93       	push	r23
    1424:	8f 93       	push	r24
    1426:	9f 93       	push	r25
    1428:	af 93       	push	r26
    142a:	bf 93       	push	r27
    142c:	ef 93       	push	r30
    142e:	ff 93       	push	r31
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	00 d0       	rcall	.+0      	; 0x1436 <__vector_74+0x2e>
    1436:	0f 92       	push	r0
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    143c:	20 91 05 22 	lds	r18, 0x2205
    1440:	30 91 06 22 	lds	r19, 0x2206
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	92 e0       	ldi	r25, 0x02	; 2
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	9a 83       	std	Y+2, r25	; 0x02
    144c:	88 e0       	ldi	r24, 0x08	; 8
    144e:	8b 83       	std	Y+3, r24	; 0x03
 *
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1450:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	83 70       	andi	r24, 0x03	; 3
    145a:	90 70       	andi	r25, 0x00	; 0
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	39 f4       	brne	.+14     	; 0x146e <__vector_74+0x66>
		index += 2;
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	8e 5f       	subi	r24, 0xFE	; 254
    1464:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	86 95       	lsr	r24
    146a:	86 95       	lsr	r24
    146c:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01))
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	81 70       	andi	r24, 0x01	; 1
    1476:	90 70       	andi	r25, 0x00	; 0
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	19 f4       	brne	.+6      	; 0x1482 <__vector_74+0x7a>
		index++;
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	8f 5f       	subi	r24, 0xFF	; 255
    1480:	8c 83       	std	Y+4, r24	; 0x04
#endif

	return &adc->CH0 + index;
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	ac 01       	movw	r20, r24
    1488:	40 5e       	subi	r20, 0xE0	; 224
    148a:	5f 4f       	sbci	r21, 0xFF	; 255
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	88 2f       	mov	r24, r24
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	bc 01       	movw	r22, r24
    1494:	66 0f       	add	r22, r22
    1496:	77 1f       	adc	r23, r23
    1498:	66 0f       	add	r22, r22
    149a:	77 1f       	adc	r23, r23
    149c:	66 0f       	add	r22, r22
    149e:	77 1f       	adc	r23, r23
    14a0:	fb 01       	movw	r30, r22
    14a2:	e8 1b       	sub	r30, r24
    14a4:	f9 0b       	sbc	r31, r25
    14a6:	cf 01       	movw	r24, r30
    14a8:	84 0f       	add	r24, r20
    14aa:	95 1f       	adc	r25, r21
    14ac:	fc 01       	movw	r30, r24
    14ae:	44 81       	ldd	r20, Z+4	; 0x04
    14b0:	55 81       	ldd	r21, Z+5	; 0x05
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	92 e0       	ldi	r25, 0x02	; 2
    14b6:	68 e0       	ldi	r22, 0x08	; 8
    14b8:	f9 01       	movw	r30, r18
    14ba:	19 95       	eicall
}
    14bc:	24 96       	adiw	r28, 0x04	; 4
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	ff 91       	pop	r31
    14c8:	ef 91       	pop	r30
    14ca:	bf 91       	pop	r27
    14cc:	af 91       	pop	r26
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	7f 91       	pop	r23
    14d4:	6f 91       	pop	r22
    14d6:	5f 91       	pop	r21
    14d8:	4f 91       	pop	r20
    14da:	3f 91       	pop	r19
    14dc:	2f 91       	pop	r18
    14de:	0f 90       	pop	r0
    14e0:	00 92 3b 00 	sts	0x003B, r0
    14e4:	0f 90       	pop	r0
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	0f 90       	pop	r0
    14ea:	1f 90       	pop	r1
    14ec:	18 95       	reti

000014ee <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    14ee:	1f 92       	push	r1
    14f0:	0f 92       	push	r0
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	0f 92       	push	r0
    14f6:	00 90 3b 00 	lds	r0, 0x003B
    14fa:	0f 92       	push	r0
    14fc:	11 24       	eor	r1, r1
    14fe:	2f 93       	push	r18
    1500:	3f 93       	push	r19
    1502:	4f 93       	push	r20
    1504:	5f 93       	push	r21
    1506:	6f 93       	push	r22
    1508:	7f 93       	push	r23
    150a:	8f 93       	push	r24
    150c:	9f 93       	push	r25
    150e:	af 93       	push	r26
    1510:	bf 93       	push	r27
    1512:	ef 93       	push	r30
    1514:	ff 93       	push	r31
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	00 d0       	rcall	.+0      	; 0x151c <__vector_39+0x2e>
    151c:	0f 92       	push	r0
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    1522:	20 91 08 22 	lds	r18, 0x2208
    1526:	30 91 09 22 	lds	r19, 0x2209
    152a:	80 e4       	ldi	r24, 0x40	; 64
    152c:	92 e0       	ldi	r25, 0x02	; 2
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	9a 83       	std	Y+2, r25	; 0x02
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	8b 83       	std	Y+3, r24	; 0x03
 *
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1536:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	83 70       	andi	r24, 0x03	; 3
    1540:	90 70       	andi	r25, 0x00	; 0
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	39 f4       	brne	.+14     	; 0x1554 <__vector_39+0x66>
		index += 2;
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	8e 5f       	subi	r24, 0xFE	; 254
    154a:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	86 95       	lsr	r24
    1550:	86 95       	lsr	r24
    1552:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01))
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	88 2f       	mov	r24, r24
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	81 70       	andi	r24, 0x01	; 1
    155c:	90 70       	andi	r25, 0x00	; 0
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	19 f4       	brne	.+6      	; 0x1568 <__vector_39+0x7a>
		index++;
    1562:	8c 81       	ldd	r24, Y+4	; 0x04
    1564:	8f 5f       	subi	r24, 0xFF	; 255
    1566:	8c 83       	std	Y+4, r24	; 0x04
#endif

	return &adc->CH0 + index;
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	9a 81       	ldd	r25, Y+2	; 0x02
    156c:	ac 01       	movw	r20, r24
    156e:	40 5e       	subi	r20, 0xE0	; 224
    1570:	5f 4f       	sbci	r21, 0xFF	; 255
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	bc 01       	movw	r22, r24
    157a:	66 0f       	add	r22, r22
    157c:	77 1f       	adc	r23, r23
    157e:	66 0f       	add	r22, r22
    1580:	77 1f       	adc	r23, r23
    1582:	66 0f       	add	r22, r22
    1584:	77 1f       	adc	r23, r23
    1586:	fb 01       	movw	r30, r22
    1588:	e8 1b       	sub	r30, r24
    158a:	f9 0b       	sbc	r31, r25
    158c:	cf 01       	movw	r24, r30
    158e:	84 0f       	add	r24, r20
    1590:	95 1f       	adc	r25, r21
    1592:	fc 01       	movw	r30, r24
    1594:	44 81       	ldd	r20, Z+4	; 0x04
    1596:	55 81       	ldd	r21, Z+5	; 0x05
    1598:	80 e4       	ldi	r24, 0x40	; 64
    159a:	92 e0       	ldi	r25, 0x02	; 2
    159c:	61 e0       	ldi	r22, 0x01	; 1
    159e:	f9 01       	movw	r30, r18
    15a0:	19 95       	eicall
}
    15a2:	24 96       	adiw	r28, 0x04	; 4
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	ff 91       	pop	r31
    15ae:	ef 91       	pop	r30
    15b0:	bf 91       	pop	r27
    15b2:	af 91       	pop	r26
    15b4:	9f 91       	pop	r25
    15b6:	8f 91       	pop	r24
    15b8:	7f 91       	pop	r23
    15ba:	6f 91       	pop	r22
    15bc:	5f 91       	pop	r21
    15be:	4f 91       	pop	r20
    15c0:	3f 91       	pop	r19
    15c2:	2f 91       	pop	r18
    15c4:	0f 90       	pop	r0
    15c6:	00 92 3b 00 	sts	0x003B, r0
    15ca:	0f 90       	pop	r0
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	0f 90       	pop	r0
    15d0:	1f 90       	pop	r1
    15d2:	18 95       	reti

000015d4 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    15d4:	1f 92       	push	r1
    15d6:	0f 92       	push	r0
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	0f 92       	push	r0
    15dc:	00 90 3b 00 	lds	r0, 0x003B
    15e0:	0f 92       	push	r0
    15e2:	11 24       	eor	r1, r1
    15e4:	2f 93       	push	r18
    15e6:	3f 93       	push	r19
    15e8:	4f 93       	push	r20
    15ea:	5f 93       	push	r21
    15ec:	6f 93       	push	r22
    15ee:	7f 93       	push	r23
    15f0:	8f 93       	push	r24
    15f2:	9f 93       	push	r25
    15f4:	af 93       	push	r26
    15f6:	bf 93       	push	r27
    15f8:	ef 93       	push	r30
    15fa:	ff 93       	push	r31
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	00 d0       	rcall	.+0      	; 0x1602 <__vector_40+0x2e>
    1602:	0f 92       	push	r0
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    1608:	20 91 08 22 	lds	r18, 0x2208
    160c:	30 91 09 22 	lds	r19, 0x2209
    1610:	80 e4       	ldi	r24, 0x40	; 64
    1612:	92 e0       	ldi	r25, 0x02	; 2
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	9a 83       	std	Y+2, r25	; 0x02
    1618:	82 e0       	ldi	r24, 0x02	; 2
    161a:	8b 83       	std	Y+3, r24	; 0x03
 *
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    161c:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	83 70       	andi	r24, 0x03	; 3
    1626:	90 70       	andi	r25, 0x00	; 0
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	39 f4       	brne	.+14     	; 0x163a <__vector_40+0x66>
		index += 2;
    162c:	8c 81       	ldd	r24, Y+4	; 0x04
    162e:	8e 5f       	subi	r24, 0xFE	; 254
    1630:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	86 95       	lsr	r24
    1636:	86 95       	lsr	r24
    1638:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01))
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	88 2f       	mov	r24, r24
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	81 70       	andi	r24, 0x01	; 1
    1642:	90 70       	andi	r25, 0x00	; 0
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	19 f4       	brne	.+6      	; 0x164e <__vector_40+0x7a>
		index++;
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	8f 5f       	subi	r24, 0xFF	; 255
    164c:	8c 83       	std	Y+4, r24	; 0x04
#endif

	return &adc->CH0 + index;
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	9a 81       	ldd	r25, Y+2	; 0x02
    1652:	ac 01       	movw	r20, r24
    1654:	40 5e       	subi	r20, 0xE0	; 224
    1656:	5f 4f       	sbci	r21, 0xFF	; 255
    1658:	8c 81       	ldd	r24, Y+4	; 0x04
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	bc 01       	movw	r22, r24
    1660:	66 0f       	add	r22, r22
    1662:	77 1f       	adc	r23, r23
    1664:	66 0f       	add	r22, r22
    1666:	77 1f       	adc	r23, r23
    1668:	66 0f       	add	r22, r22
    166a:	77 1f       	adc	r23, r23
    166c:	fb 01       	movw	r30, r22
    166e:	e8 1b       	sub	r30, r24
    1670:	f9 0b       	sbc	r31, r25
    1672:	cf 01       	movw	r24, r30
    1674:	84 0f       	add	r24, r20
    1676:	95 1f       	adc	r25, r21
    1678:	fc 01       	movw	r30, r24
    167a:	44 81       	ldd	r20, Z+4	; 0x04
    167c:	55 81       	ldd	r21, Z+5	; 0x05
    167e:	80 e4       	ldi	r24, 0x40	; 64
    1680:	92 e0       	ldi	r25, 0x02	; 2
    1682:	62 e0       	ldi	r22, 0x02	; 2
    1684:	f9 01       	movw	r30, r18
    1686:	19 95       	eicall
}
    1688:	24 96       	adiw	r28, 0x04	; 4
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	ff 91       	pop	r31
    1694:	ef 91       	pop	r30
    1696:	bf 91       	pop	r27
    1698:	af 91       	pop	r26
    169a:	9f 91       	pop	r25
    169c:	8f 91       	pop	r24
    169e:	7f 91       	pop	r23
    16a0:	6f 91       	pop	r22
    16a2:	5f 91       	pop	r21
    16a4:	4f 91       	pop	r20
    16a6:	3f 91       	pop	r19
    16a8:	2f 91       	pop	r18
    16aa:	0f 90       	pop	r0
    16ac:	00 92 3b 00 	sts	0x003B, r0
    16b0:	0f 90       	pop	r0
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	0f 90       	pop	r0
    16b6:	1f 90       	pop	r1
    16b8:	18 95       	reti

000016ba <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	00 90 3b 00 	lds	r0, 0x003B
    16c6:	0f 92       	push	r0
    16c8:	11 24       	eor	r1, r1
    16ca:	2f 93       	push	r18
    16cc:	3f 93       	push	r19
    16ce:	4f 93       	push	r20
    16d0:	5f 93       	push	r21
    16d2:	6f 93       	push	r22
    16d4:	7f 93       	push	r23
    16d6:	8f 93       	push	r24
    16d8:	9f 93       	push	r25
    16da:	af 93       	push	r26
    16dc:	bf 93       	push	r27
    16de:	ef 93       	push	r30
    16e0:	ff 93       	push	r31
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <__vector_41+0x2e>
    16e8:	0f 92       	push	r0
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    16ee:	20 91 08 22 	lds	r18, 0x2208
    16f2:	30 91 09 22 	lds	r19, 0x2209
    16f6:	80 e4       	ldi	r24, 0x40	; 64
    16f8:	92 e0       	ldi	r25, 0x02	; 2
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	9a 83       	std	Y+2, r25	; 0x02
    16fe:	84 e0       	ldi	r24, 0x04	; 4
    1700:	8b 83       	std	Y+3, r24	; 0x03
 *
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1702:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	83 70       	andi	r24, 0x03	; 3
    170c:	90 70       	andi	r25, 0x00	; 0
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	39 f4       	brne	.+14     	; 0x1720 <__vector_41+0x66>
		index += 2;
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	8e 5f       	subi	r24, 0xFE	; 254
    1716:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	86 95       	lsr	r24
    171c:	86 95       	lsr	r24
    171e:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01))
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	88 2f       	mov	r24, r24
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	81 70       	andi	r24, 0x01	; 1
    1728:	90 70       	andi	r25, 0x00	; 0
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	19 f4       	brne	.+6      	; 0x1734 <__vector_41+0x7a>
		index++;
    172e:	8c 81       	ldd	r24, Y+4	; 0x04
    1730:	8f 5f       	subi	r24, 0xFF	; 255
    1732:	8c 83       	std	Y+4, r24	; 0x04
#endif

	return &adc->CH0 + index;
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	9a 81       	ldd	r25, Y+2	; 0x02
    1738:	ac 01       	movw	r20, r24
    173a:	40 5e       	subi	r20, 0xE0	; 224
    173c:	5f 4f       	sbci	r21, 0xFF	; 255
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	bc 01       	movw	r22, r24
    1746:	66 0f       	add	r22, r22
    1748:	77 1f       	adc	r23, r23
    174a:	66 0f       	add	r22, r22
    174c:	77 1f       	adc	r23, r23
    174e:	66 0f       	add	r22, r22
    1750:	77 1f       	adc	r23, r23
    1752:	fb 01       	movw	r30, r22
    1754:	e8 1b       	sub	r30, r24
    1756:	f9 0b       	sbc	r31, r25
    1758:	cf 01       	movw	r24, r30
    175a:	84 0f       	add	r24, r20
    175c:	95 1f       	adc	r25, r21
    175e:	fc 01       	movw	r30, r24
    1760:	44 81       	ldd	r20, Z+4	; 0x04
    1762:	55 81       	ldd	r21, Z+5	; 0x05
    1764:	80 e4       	ldi	r24, 0x40	; 64
    1766:	92 e0       	ldi	r25, 0x02	; 2
    1768:	64 e0       	ldi	r22, 0x04	; 4
    176a:	f9 01       	movw	r30, r18
    176c:	19 95       	eicall
}
    176e:	24 96       	adiw	r28, 0x04	; 4
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	ff 91       	pop	r31
    177a:	ef 91       	pop	r30
    177c:	bf 91       	pop	r27
    177e:	af 91       	pop	r26
    1780:	9f 91       	pop	r25
    1782:	8f 91       	pop	r24
    1784:	7f 91       	pop	r23
    1786:	6f 91       	pop	r22
    1788:	5f 91       	pop	r21
    178a:	4f 91       	pop	r20
    178c:	3f 91       	pop	r19
    178e:	2f 91       	pop	r18
    1790:	0f 90       	pop	r0
    1792:	00 92 3b 00 	sts	0x003B, r0
    1796:	0f 90       	pop	r0
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	0f 90       	pop	r0
    179c:	1f 90       	pop	r1
    179e:	18 95       	reti

000017a0 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    17a0:	1f 92       	push	r1
    17a2:	0f 92       	push	r0
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	0f 92       	push	r0
    17a8:	00 90 3b 00 	lds	r0, 0x003B
    17ac:	0f 92       	push	r0
    17ae:	11 24       	eor	r1, r1
    17b0:	2f 93       	push	r18
    17b2:	3f 93       	push	r19
    17b4:	4f 93       	push	r20
    17b6:	5f 93       	push	r21
    17b8:	6f 93       	push	r22
    17ba:	7f 93       	push	r23
    17bc:	8f 93       	push	r24
    17be:	9f 93       	push	r25
    17c0:	af 93       	push	r26
    17c2:	bf 93       	push	r27
    17c4:	ef 93       	push	r30
    17c6:	ff 93       	push	r31
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <__vector_42+0x2e>
    17ce:	0f 92       	push	r0
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    17d4:	20 91 08 22 	lds	r18, 0x2208
    17d8:	30 91 09 22 	lds	r19, 0x2209
    17dc:	80 e4       	ldi	r24, 0x40	; 64
    17de:	92 e0       	ldi	r25, 0x02	; 2
    17e0:	89 83       	std	Y+1, r24	; 0x01
    17e2:	9a 83       	std	Y+2, r25	; 0x02
    17e4:	88 e0       	ldi	r24, 0x08	; 8
    17e6:	8b 83       	std	Y+3, r24	; 0x03
 *
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    17e8:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	88 2f       	mov	r24, r24
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	83 70       	andi	r24, 0x03	; 3
    17f2:	90 70       	andi	r25, 0x00	; 0
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	39 f4       	brne	.+14     	; 0x1806 <__vector_42+0x66>
		index += 2;
    17f8:	8c 81       	ldd	r24, Y+4	; 0x04
    17fa:	8e 5f       	subi	r24, 0xFE	; 254
    17fc:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	86 95       	lsr	r24
    1802:	86 95       	lsr	r24
    1804:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01))
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	88 2f       	mov	r24, r24
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	81 70       	andi	r24, 0x01	; 1
    180e:	90 70       	andi	r25, 0x00	; 0
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	19 f4       	brne	.+6      	; 0x181a <__vector_42+0x7a>
		index++;
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	8f 5f       	subi	r24, 0xFF	; 255
    1818:	8c 83       	std	Y+4, r24	; 0x04
#endif

	return &adc->CH0 + index;
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	ac 01       	movw	r20, r24
    1820:	40 5e       	subi	r20, 0xE0	; 224
    1822:	5f 4f       	sbci	r21, 0xFF	; 255
    1824:	8c 81       	ldd	r24, Y+4	; 0x04
    1826:	88 2f       	mov	r24, r24
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	bc 01       	movw	r22, r24
    182c:	66 0f       	add	r22, r22
    182e:	77 1f       	adc	r23, r23
    1830:	66 0f       	add	r22, r22
    1832:	77 1f       	adc	r23, r23
    1834:	66 0f       	add	r22, r22
    1836:	77 1f       	adc	r23, r23
    1838:	fb 01       	movw	r30, r22
    183a:	e8 1b       	sub	r30, r24
    183c:	f9 0b       	sbc	r31, r25
    183e:	cf 01       	movw	r24, r30
    1840:	84 0f       	add	r24, r20
    1842:	95 1f       	adc	r25, r21
    1844:	fc 01       	movw	r30, r24
    1846:	44 81       	ldd	r20, Z+4	; 0x04
    1848:	55 81       	ldd	r21, Z+5	; 0x05
    184a:	80 e4       	ldi	r24, 0x40	; 64
    184c:	92 e0       	ldi	r25, 0x02	; 2
    184e:	68 e0       	ldi	r22, 0x08	; 8
    1850:	f9 01       	movw	r30, r18
    1852:	19 95       	eicall
}
    1854:	24 96       	adiw	r28, 0x04	; 4
    1856:	cd bf       	out	0x3d, r28	; 61
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	ff 91       	pop	r31
    1860:	ef 91       	pop	r30
    1862:	bf 91       	pop	r27
    1864:	af 91       	pop	r26
    1866:	9f 91       	pop	r25
    1868:	8f 91       	pop	r24
    186a:	7f 91       	pop	r23
    186c:	6f 91       	pop	r22
    186e:	5f 91       	pop	r21
    1870:	4f 91       	pop	r20
    1872:	3f 91       	pop	r19
    1874:	2f 91       	pop	r18
    1876:	0f 90       	pop	r0
    1878:	00 92 3b 00 	sts	0x003B, r0
    187c:	0f 90       	pop	r0
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	0f 90       	pop	r0
    1882:	1f 90       	pop	r1
    1884:	18 95       	reti

00001886 <adc_enable_clock>:
 * enabled.
 *
 * \param adc Pointer to ADC module.
 */
static void adc_enable_clock(ADC_t *adc)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	0f 92       	push	r0
    188c:	0f 92       	push	r0
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	9a 81       	ldd	r25, Y+2	; 0x02
    189a:	22 e0       	ldi	r18, 0x02	; 2
    189c:	80 30       	cpi	r24, 0x00	; 0
    189e:	92 07       	cpc	r25, r18
    18a0:	89 f4       	brne	.+34     	; 0x18c4 <adc_enable_clock+0x3e>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    18a2:	90 91 04 22 	lds	r25, 0x2204
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	99 23       	and	r25, r25
    18aa:	09 f0       	breq	.+2      	; 0x18ae <adc_enable_clock+0x28>
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	9f 5f       	subi	r25, 0xFF	; 255
    18b0:	90 93 04 22 	sts	0x2204, r25
    18b4:	88 23       	and	r24, r24
    18b6:	e1 f0       	breq	.+56     	; 0x18f0 <adc_enable_clock+0x6a>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	62 e0       	ldi	r22, 0x02	; 2
    18be:	0e 94 74 03 	call	0x6e8	; 0x6e8 <sysclk_enable_module>
    18c2:	16 c0       	rjmp	.+44     	; 0x18f0 <adc_enable_clock+0x6a>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	9a 81       	ldd	r25, Y+2	; 0x02
    18c8:	22 e0       	ldi	r18, 0x02	; 2
    18ca:	80 34       	cpi	r24, 0x40	; 64
    18cc:	92 07       	cpc	r25, r18
    18ce:	81 f4       	brne	.+32     	; 0x18f0 <adc_enable_clock+0x6a>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    18d0:	90 91 07 22 	lds	r25, 0x2207
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	99 23       	and	r25, r25
    18d8:	09 f0       	breq	.+2      	; 0x18dc <adc_enable_clock+0x56>
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	9f 5f       	subi	r25, 0xFF	; 255
    18de:	90 93 07 22 	sts	0x2207, r25
    18e2:	88 23       	and	r24, r24
    18e4:	29 f0       	breq	.+10     	; 0x18f0 <adc_enable_clock+0x6a>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	62 e0       	ldi	r22, 0x02	; 2
    18ec:	0e 94 74 03 	call	0x6e8	; 0x6e8 <sysclk_enable_module>
#endif

	{
		Assert(0);
	}
}
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <adc_disable_clock>:
 * enabled.
 *
 * \param adc Pointer to ADC module
 */
static void adc_disable_clock(ADC_t *adc)
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	0f 92       	push	r0
    1900:	0f 92       	push	r0
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	89 83       	std	Y+1, r24	; 0x01
    1908:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	22 e0       	ldi	r18, 0x02	; 2
    1910:	80 30       	cpi	r24, 0x00	; 0
    1912:	92 07       	cpc	r25, r18
    1914:	79 f4       	brne	.+30     	; 0x1934 <adc_disable_clock+0x3a>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    1916:	80 91 04 22 	lds	r24, 0x2204
    191a:	81 50       	subi	r24, 0x01	; 1
    191c:	80 93 04 22 	sts	0x2204, r24
    1920:	80 91 04 22 	lds	r24, 0x2204
    1924:	88 23       	and	r24, r24
    1926:	d1 f4       	brne	.+52     	; 0x195c <adc_disable_clock+0x62>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	62 e0       	ldi	r22, 0x02	; 2
    192e:	0e 94 97 03 	call	0x72e	; 0x72e <sysclk_disable_module>
    1932:	14 c0       	rjmp	.+40     	; 0x195c <adc_disable_clock+0x62>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	9a 81       	ldd	r25, Y+2	; 0x02
    1938:	22 e0       	ldi	r18, 0x02	; 2
    193a:	80 34       	cpi	r24, 0x40	; 64
    193c:	92 07       	cpc	r25, r18
    193e:	71 f4       	brne	.+28     	; 0x195c <adc_disable_clock+0x62>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    1940:	80 91 07 22 	lds	r24, 0x2207
    1944:	81 50       	subi	r24, 0x01	; 1
    1946:	80 93 07 22 	sts	0x2207, r24
    194a:	80 91 07 22 	lds	r24, 0x2207
    194e:	88 23       	and	r24, r24
    1950:	29 f4       	brne	.+10     	; 0x195c <adc_disable_clock+0x62>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	62 e0       	ldi	r22, 0x02	; 2
    1958:	0e 94 97 03 	call	0x72e	; 0x72e <sysclk_disable_module>
#endif

	{
		Assert(0);
	}
}
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <adc_enable>:
 *
 * \note After enabling the ADC, one dummy conversion should be done to allow
 * for its common mode voltage to settle.
 */
void adc_enable(ADC_t *adc)
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	00 d0       	rcall	.+0      	; 0x196c <adc_enable+0x6>
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	8a 83       	std	Y+2, r24	; 0x02
    1972:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t flags = cpu_irq_save();
    1974:	3f db       	rcall	.-2434   	; 0xff4 <cpu_irq_save>
    1976:	89 83       	std	Y+1, r24	; 0x01
	adc_enable_clock(adc);
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	9b 81       	ldd	r25, Y+3	; 0x03
    197c:	84 df       	rcall	.-248    	; 0x1886 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	9b 81       	ldd	r25, Y+3	; 0x03
    1982:	fc 01       	movw	r30, r24
    1984:	80 81       	ld	r24, Z
    1986:	28 2f       	mov	r18, r24
    1988:	21 60       	ori	r18, 0x01	; 1
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	9b 81       	ldd	r25, Y+3	; 0x03
    198e:	fc 01       	movw	r30, r24
    1990:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	3f db       	rcall	.-2434   	; 0x1014 <cpu_irq_restore>

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	5b db       	rcall	.-2378   	; 0x1052 <sleepmgr_lock_mode>
}
    199c:	23 96       	adiw	r28, 0x03	; 3
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	28 97       	sbiw	r28, 0x08	; 8
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	8d 83       	std	Y+5, r24	; 0x05
    19b8:	9e 83       	std	Y+6, r25	; 0x06
    19ba:	6f 83       	std	Y+7, r22	; 0x07
    19bc:	78 87       	std	Y+8, r23	; 0x08
#endif

	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    19be:	8d 81       	ldd	r24, Y+5	; 0x05
    19c0:	9e 81       	ldd	r25, Y+6	; 0x06
    19c2:	22 e0       	ldi	r18, 0x02	; 2
    19c4:	80 30       	cpi	r24, 0x00	; 0
    19c6:	92 07       	cpc	r25, r18
    19c8:	31 f4       	brne	.+12     	; 0x19d6 <adc_write_configuration+0x2e>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	60 db       	rcall	.-2368   	; 0x1090 <adc_get_calibration_data>
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	0c c0       	rjmp	.+24     	; 0x19ee <adc_write_configuration+0x46>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	e2 e0       	ldi	r30, 0x02	; 2
    19dc:	80 34       	cpi	r24, 0x40	; 64
    19de:	9e 07       	cpc	r25, r30
    19e0:	09 f0       	breq	.+2      	; 0x19e4 <adc_write_configuration+0x3c>
    19e2:	57 c0       	rjmp	.+174    	; 0x1a92 <adc_write_configuration+0xea>
		cal = adc_get_calibration_data(ADC_CAL_ADCB);
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	53 db       	rcall	.-2394   	; 0x1090 <adc_get_calibration_data>
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	9a 83       	std	Y+2, r25	; 0x02
	{
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
    19ee:	02 db       	rcall	.-2556   	; 0xff4 <cpu_irq_save>
    19f0:	8b 83       	std	Y+3, r24	; 0x03
	adc_enable_clock(adc);
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	47 df       	rcall	.-370    	; 0x1886 <adc_enable_clock>

#if XMEGA_A || XMEGA_D
	enable = adc->CTRLA & ADC_ENABLE_bm;
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	9e 81       	ldd	r25, Y+6	; 0x06
    19fc:	fc 01       	movw	r30, r24
    19fe:	80 81       	ld	r24, Z
    1a00:	81 70       	andi	r24, 0x01	; 1
    1a02:	8c 83       	std	Y+4, r24	; 0x04
#endif

	adc->CTRLA = ADC_FLUSH_bm;
    1a04:	8d 81       	ldd	r24, Y+5	; 0x05
    1a06:	9e 81       	ldd	r25, Y+6	; 0x06
    1a08:	22 e0       	ldi	r18, 0x02	; 2
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	20 83       	st	Z, r18
	adc->CAL = cal;
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	29 81       	ldd	r18, Y+1	; 0x01
    1a14:	3a 81       	ldd	r19, Y+2	; 0x02
    1a16:	fc 01       	movw	r30, r24
    1a18:	24 87       	std	Z+12, r18	; 0x0c
    1a1a:	35 87       	std	Z+13, r19	; 0x0d
	adc->CMP = conf->cmp;
    1a1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a1e:	98 85       	ldd	r25, Y+8	; 0x08
    1a20:	fc 01       	movw	r30, r24
    1a22:	25 81       	ldd	r18, Z+5	; 0x05
    1a24:	36 81       	ldd	r19, Z+6	; 0x06
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	20 8f       	std	Z+24, r18	; 0x18
    1a2e:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    1a30:	8f 81       	ldd	r24, Y+7	; 0x07
    1a32:	98 85       	ldd	r25, Y+8	; 0x08
    1a34:	fc 01       	movw	r30, r24
    1a36:	22 81       	ldd	r18, Z+2	; 0x02
    1a38:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	22 83       	std	Z+2, r18	; 0x02
	adc->PRESCALER = conf->prescaler;
    1a40:	8f 81       	ldd	r24, Y+7	; 0x07
    1a42:	98 85       	ldd	r25, Y+8	; 0x08
    1a44:	fc 01       	movw	r30, r24
    1a46:	24 81       	ldd	r18, Z+4	; 0x04
    1a48:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	24 83       	std	Z+4, r18	; 0x04
	adc->EVCTRL = conf->evctrl;
    1a50:	8f 81       	ldd	r24, Y+7	; 0x07
    1a52:	98 85       	ldd	r25, Y+8	; 0x08
    1a54:	fc 01       	movw	r30, r24
    1a56:	23 81       	ldd	r18, Z+3	; 0x03
    1a58:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	23 83       	std	Z+3, r18	; 0x03
	adc->CTRLB = conf->ctrlb;
    1a60:	8f 81       	ldd	r24, Y+7	; 0x07
    1a62:	98 85       	ldd	r25, Y+8	; 0x08
    1a64:	fc 01       	movw	r30, r24
    1a66:	21 81       	ldd	r18, Z+1	; 0x01
    1a68:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	21 83       	std	Z+1, r18	; 0x01

#if XMEGA_A
	adc->CTRLA = enable | conf->ctrla;
    1a70:	8f 81       	ldd	r24, Y+7	; 0x07
    1a72:	98 85       	ldd	r25, Y+8	; 0x08
    1a74:	fc 01       	movw	r30, r24
    1a76:	90 81       	ld	r25, Z
    1a78:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7a:	29 2f       	mov	r18, r25
    1a7c:	28 2b       	or	r18, r24
    1a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a80:	9e 81       	ldd	r25, Y+6	; 0x06
    1a82:	fc 01       	movw	r30, r24
    1a84:	20 83       	st	Z, r18
#elif XMEGA_D
	adc->CTRLA = enable;
#endif

	adc_disable_clock(adc);
    1a86:	8d 81       	ldd	r24, Y+5	; 0x05
    1a88:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8a:	37 df       	rcall	.-402    	; 0x18fa <adc_disable_clock>

	cpu_irq_restore(flags);
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	c2 da       	rcall	.-2684   	; 0x1014 <cpu_irq_restore>
    1a90:	01 c0       	rjmp	.+2      	; 0x1a94 <adc_write_configuration+0xec>
	} else
#endif

	{
		Assert(0);
		return;
    1a92:	00 00       	nop
#endif

	adc_disable_clock(adc);

	cpu_irq_restore(flags);
}
    1a94:	28 96       	adiw	r28, 0x08	; 8
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	25 97       	sbiw	r28, 0x05	; 5
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	8a 83       	std	Y+2, r24	; 0x02
    1ab0:	9b 83       	std	Y+3, r25	; 0x03
    1ab2:	6c 83       	std	Y+4, r22	; 0x04
    1ab4:	7d 83       	std	Y+5, r23	; 0x05
	irqflags_t flags = cpu_irq_save();
    1ab6:	9e da       	rcall	.-2756   	; 0xff4 <cpu_irq_save>
    1ab8:	89 83       	std	Y+1, r24	; 0x01

	adc_enable_clock(adc);
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	9b 81       	ldd	r25, Y+3	; 0x03
    1abe:	e3 de       	rcall	.-570    	; 0x1886 <adc_enable_clock>

#if XMEGA_A
	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	80 81       	ld	r24, Z
    1ac8:	28 2f       	mov	r18, r24
    1aca:	20 7c       	andi	r18, 0xC0	; 192
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ace:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	20 83       	st	Z, r18
#endif

	conf->cmp = adc->CMP;
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad8:	fc 01       	movw	r30, r24
    1ada:	20 8d       	ldd	r18, Z+24	; 0x18
    1adc:	31 8d       	ldd	r19, Z+25	; 0x19
    1ade:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	25 83       	std	Z+5, r18	; 0x05
    1ae6:	36 83       	std	Z+6, r19	; 0x06
	conf->refctrl = adc->REFCTRL;
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	9b 81       	ldd	r25, Y+3	; 0x03
    1aec:	fc 01       	movw	r30, r24
    1aee:	22 81       	ldd	r18, Z+2	; 0x02
    1af0:	8c 81       	ldd	r24, Y+4	; 0x04
    1af2:	9d 81       	ldd	r25, Y+5	; 0x05
    1af4:	fc 01       	movw	r30, r24
    1af6:	22 83       	std	Z+2, r18	; 0x02
	conf->prescaler = adc->PRESCALER;
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	9b 81       	ldd	r25, Y+3	; 0x03
    1afc:	fc 01       	movw	r30, r24
    1afe:	24 81       	ldd	r18, Z+4	; 0x04
    1b00:	8c 81       	ldd	r24, Y+4	; 0x04
    1b02:	9d 81       	ldd	r25, Y+5	; 0x05
    1b04:	fc 01       	movw	r30, r24
    1b06:	24 83       	std	Z+4, r18	; 0x04
	conf->evctrl = adc->EVCTRL;
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	23 81       	ldd	r18, Z+3	; 0x03
    1b10:	8c 81       	ldd	r24, Y+4	; 0x04
    1b12:	9d 81       	ldd	r25, Y+5	; 0x05
    1b14:	fc 01       	movw	r30, r24
    1b16:	23 83       	std	Z+3, r18	; 0x03
	conf->ctrlb = adc->CTRLB;
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	21 81       	ldd	r18, Z+1	; 0x01
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	9d 81       	ldd	r25, Y+5	; 0x05
    1b24:	fc 01       	movw	r30, r24
    1b26:	21 83       	std	Z+1, r18	; 0x01

	adc_disable_clock(adc);
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2c:	e6 de       	rcall	.-564    	; 0x18fa <adc_disable_clock>

	cpu_irq_restore(flags);
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	71 da       	rcall	.-2846   	; 0x1014 <cpu_irq_restore>
}
    1b32:	25 96       	adiw	r28, 0x05	; 5
    1b34:	cd bf       	out	0x3d, r28	; 61
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	2c 97       	sbiw	r28, 0x0c	; 12
    1b48:	cd bf       	out	0x3d, r28	; 61
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	88 87       	std	Y+8, r24	; 0x08
    1b4e:	99 87       	std	Y+9, r25	; 0x09
    1b50:	6a 87       	std	Y+10, r22	; 0x0a
    1b52:	4b 87       	std	Y+11, r20	; 0x0b
    1b54:	5c 87       	std	Y+12, r21	; 0x0c
    1b56:	88 85       	ldd	r24, Y+8	; 0x08
    1b58:	99 85       	ldd	r25, Y+9	; 0x09
    1b5a:	8c 83       	std	Y+4, r24	; 0x04
    1b5c:	9d 83       	std	Y+5, r25	; 0x05
    1b5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b60:	8e 83       	std	Y+6, r24	; 0x06
 *
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1b62:	1f 82       	std	Y+7, r1	; 0x07
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1b64:	8e 81       	ldd	r24, Y+6	; 0x06
    1b66:	88 2f       	mov	r24, r24
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	83 70       	andi	r24, 0x03	; 3
    1b6c:	90 70       	andi	r25, 0x00	; 0
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	39 f4       	brne	.+14     	; 0x1b80 <adcch_write_configuration+0x42>
		index += 2;
    1b72:	8f 81       	ldd	r24, Y+7	; 0x07
    1b74:	8e 5f       	subi	r24, 0xFE	; 254
    1b76:	8f 83       	std	Y+7, r24	; 0x07
		ch_mask >>= 2;
    1b78:	8e 81       	ldd	r24, Y+6	; 0x06
    1b7a:	86 95       	lsr	r24
    1b7c:	86 95       	lsr	r24
    1b7e:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01))
    1b80:	8e 81       	ldd	r24, Y+6	; 0x06
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	81 70       	andi	r24, 0x01	; 1
    1b88:	90 70       	andi	r25, 0x00	; 0
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	19 f4       	brne	.+6      	; 0x1b94 <adcch_write_configuration+0x56>
		index++;
    1b8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b90:	8f 5f       	subi	r24, 0xFF	; 255
    1b92:	8f 83       	std	Y+7, r24	; 0x07
#endif

	return &adc->CH0 + index;
    1b94:	8c 81       	ldd	r24, Y+4	; 0x04
    1b96:	9d 81       	ldd	r25, Y+5	; 0x05
    1b98:	9c 01       	movw	r18, r24
    1b9a:	20 5e       	subi	r18, 0xE0	; 224
    1b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba0:	88 2f       	mov	r24, r24
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	ac 01       	movw	r20, r24
    1ba6:	44 0f       	add	r20, r20
    1ba8:	55 1f       	adc	r21, r21
    1baa:	44 0f       	add	r20, r20
    1bac:	55 1f       	adc	r21, r21
    1bae:	44 0f       	add	r20, r20
    1bb0:	55 1f       	adc	r21, r21
    1bb2:	ba 01       	movw	r22, r20
    1bb4:	68 1b       	sub	r22, r24
    1bb6:	79 0b       	sbc	r23, r25
    1bb8:	cb 01       	movw	r24, r22
    1bba:	82 0f       	add	r24, r18
    1bbc:	93 1f       	adc	r25, r19
	ADC_CH_t   *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    1bc2:	18 da       	rcall	.-3024   	; 0xff4 <cpu_irq_save>
    1bc4:	8b 83       	std	Y+3, r24	; 0x03
			return;
		}
	}
#endif /* CONFIG_ADC_CALLBACK_ENABLE */

	adc_enable_clock(adc);
    1bc6:	88 85       	ldd	r24, Y+8	; 0x08
    1bc8:	99 85       	ldd	r25, Y+9	; 0x09
    1bca:	5d de       	rcall	.-838    	; 0x1886 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1bcc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bce:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	20 81       	ld	r18, Z
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd8:	fc 01       	movw	r30, r24
    1bda:	20 83       	st	Z, r18
	adc_ch->INTCTRL = ch_conf->intctrl;
    1bdc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bde:	9c 85       	ldd	r25, Y+12	; 0x0c
    1be0:	fc 01       	movw	r30, r24
    1be2:	22 81       	ldd	r18, Z+2	; 0x02
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	fc 01       	movw	r30, r24
    1bea:	22 83       	std	Z+2, r18	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1bec:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bee:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	21 81       	ldd	r18, Z+1	; 0x01
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	21 83       	std	Z+1, r18	; 0x01
	adc_disable_clock(adc);
    1bfc:	88 85       	ldd	r24, Y+8	; 0x08
    1bfe:	99 85       	ldd	r25, Y+9	; 0x09
    1c00:	7c de       	rcall	.-776    	; 0x18fa <adc_disable_clock>

	cpu_irq_restore(flags);
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	07 da       	rcall	.-3058   	; 0x1014 <cpu_irq_restore>
}
    1c06:	2c 96       	adiw	r28, 0x0c	; 12
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	de bf       	out	0x3e, r29	; 62
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	2c 97       	sbiw	r28, 0x0c	; 12
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	88 87       	std	Y+8, r24	; 0x08
    1c22:	99 87       	std	Y+9, r25	; 0x09
    1c24:	6a 87       	std	Y+10, r22	; 0x0a
    1c26:	4b 87       	std	Y+11, r20	; 0x0b
    1c28:	5c 87       	std	Y+12, r21	; 0x0c
    1c2a:	88 85       	ldd	r24, Y+8	; 0x08
    1c2c:	99 85       	ldd	r25, Y+9	; 0x09
    1c2e:	8c 83       	std	Y+4, r24	; 0x04
    1c30:	9d 83       	std	Y+5, r25	; 0x05
    1c32:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c34:	8e 83       	std	Y+6, r24	; 0x06
 *
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1c36:	1f 82       	std	Y+7, r1	; 0x07
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1c38:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3a:	88 2f       	mov	r24, r24
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	83 70       	andi	r24, 0x03	; 3
    1c40:	90 70       	andi	r25, 0x00	; 0
    1c42:	00 97       	sbiw	r24, 0x00	; 0
    1c44:	39 f4       	brne	.+14     	; 0x1c54 <adcch_read_configuration+0x42>
		index += 2;
    1c46:	8f 81       	ldd	r24, Y+7	; 0x07
    1c48:	8e 5f       	subi	r24, 0xFE	; 254
    1c4a:	8f 83       	std	Y+7, r24	; 0x07
		ch_mask >>= 2;
    1c4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c4e:	86 95       	lsr	r24
    1c50:	86 95       	lsr	r24
    1c52:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01))
    1c54:	8e 81       	ldd	r24, Y+6	; 0x06
    1c56:	88 2f       	mov	r24, r24
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	81 70       	andi	r24, 0x01	; 1
    1c5c:	90 70       	andi	r25, 0x00	; 0
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	19 f4       	brne	.+6      	; 0x1c68 <adcch_read_configuration+0x56>
		index++;
    1c62:	8f 81       	ldd	r24, Y+7	; 0x07
    1c64:	8f 5f       	subi	r24, 0xFF	; 255
    1c66:	8f 83       	std	Y+7, r24	; 0x07
#endif

	return &adc->CH0 + index;
    1c68:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6c:	9c 01       	movw	r18, r24
    1c6e:	20 5e       	subi	r18, 0xE0	; 224
    1c70:	3f 4f       	sbci	r19, 0xFF	; 255
    1c72:	8f 81       	ldd	r24, Y+7	; 0x07
    1c74:	88 2f       	mov	r24, r24
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	ac 01       	movw	r20, r24
    1c7a:	44 0f       	add	r20, r20
    1c7c:	55 1f       	adc	r21, r21
    1c7e:	44 0f       	add	r20, r20
    1c80:	55 1f       	adc	r21, r21
    1c82:	44 0f       	add	r20, r20
    1c84:	55 1f       	adc	r21, r21
    1c86:	ba 01       	movw	r22, r20
    1c88:	68 1b       	sub	r22, r24
    1c8a:	79 0b       	sbc	r23, r25
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	82 0f       	add	r24, r18
    1c90:	93 1f       	adc	r25, r19
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    1c96:	ae d9       	rcall	.-3236   	; 0xff4 <cpu_irq_save>
    1c98:	8b 83       	std	Y+3, r24	; 0x03

	adc_enable_clock(adc);
    1c9a:	88 85       	ldd	r24, Y+8	; 0x08
    1c9c:	99 85       	ldd	r25, Y+9	; 0x09
    1c9e:	f3 dd       	rcall	.-1050   	; 0x1886 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	20 81       	ld	r18, Z
    1ca8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1caa:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cac:	fc 01       	movw	r30, r24
    1cae:	20 83       	st	Z, r18
	ch_conf->intctrl = adc_ch->INTCTRL;
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	22 81       	ldd	r18, Z+2	; 0x02
    1cb8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cba:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	22 83       	std	Z+2, r18	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	21 81       	ldd	r18, Z+1	; 0x01
    1cc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cca:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ccc:	fc 01       	movw	r30, r24
    1cce:	21 83       	std	Z+1, r18	; 0x01
	adc_disable_clock(adc);
    1cd0:	88 85       	ldd	r24, Y+8	; 0x08
    1cd2:	99 85       	ldd	r25, Y+9	; 0x09
    1cd4:	12 de       	rcall	.-988    	; 0x18fa <adc_disable_clock>

	cpu_irq_restore(flags);
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9d d9       	rcall	.-3270   	; 0x1014 <cpu_irq_restore>
}
    1cda:	2c 96       	adiw	r28, 0x0c	; 12
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	25 97       	sbiw	r28, 0x05	; 5
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	8a 83       	std	Y+2, r24	; 0x02
    1cf6:	9b 83       	std	Y+3, r25	; 0x03
    1cf8:	6c 83       	std	Y+4, r22	; 0x04
    1cfa:	7d 83       	std	Y+5, r23	; 0x05
	irqflags_t flags;

	Assert(callback);

	flags = cpu_irq_save();
    1cfc:	7b d9       	rcall	.-3338   	; 0xff4 <cpu_irq_save>
    1cfe:	89 83       	std	Y+1, r24	; 0x01

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	9b 81       	ldd	r25, Y+3	; 0x03
    1d04:	22 e0       	ldi	r18, 0x02	; 2
    1d06:	80 30       	cpi	r24, 0x00	; 0
    1d08:	92 07       	cpc	r25, r18
    1d0a:	39 f4       	brne	.+14     	; 0x1d1a <adc_set_callback+0x34>
		adca_callback = callback;
    1d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d10:	80 93 05 22 	sts	0x2205, r24
    1d14:	90 93 06 22 	sts	0x2206, r25
    1d18:	0c c0       	rjmp	.+24     	; 0x1d32 <adc_set_callback+0x4c>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1e:	22 e0       	ldi	r18, 0x02	; 2
    1d20:	80 34       	cpi	r24, 0x40	; 64
    1d22:	92 07       	cpc	r25, r18
    1d24:	31 f4       	brne	.+12     	; 0x1d32 <adc_set_callback+0x4c>
		adcb_callback = callback;
    1d26:	8c 81       	ldd	r24, Y+4	; 0x04
    1d28:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2a:	80 93 08 22 	sts	0x2208, r24
    1d2e:	90 93 09 22 	sts	0x2209, r25

	{
		Assert(0);
	}

	cpu_irq_restore(flags);
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	6f d9       	rcall	.-3362   	; 0x1014 <cpu_irq_restore>
}
    1d36:	25 96       	adiw	r28, 0x05	; 5
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <ioport_configure_port_pin>:
 * DAMAGE.
 */
#include "ioport.h"

void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,port_pin_flags_t flags)
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <ioport_configure_port_pin+0x6>
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <ioport_configure_port_pin+0x8>
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
    1d50:	9b 83       	std	Y+3, r25	; 0x03
    1d52:	6c 83       	std	Y+4, r22	; 0x04
    1d54:	4d 83       	std	Y+5, r20	; 0x05
    1d56:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1d58:	19 82       	std	Y+1, r1	; 0x01
    1d5a:	1e c0       	rjmp	.+60     	; 0x1d98 <ioport_configure_port_pin+0x56>
		if (pin_mask & (1 << pin)) {
    1d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5e:	88 2f       	mov	r24, r24
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	29 81       	ldd	r18, Y+1	; 0x01
    1d64:	22 2f       	mov	r18, r18
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	02 2e       	mov	r0, r18
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <ioport_configure_port_pin+0x2e>
    1d6c:	95 95       	asr	r25
    1d6e:	87 95       	ror	r24
    1d70:	0a 94       	dec	r0
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <ioport_configure_port_pin+0x2a>
    1d74:	81 70       	andi	r24, 0x01	; 1
    1d76:	90 70       	andi	r25, 0x00	; 0
    1d78:	88 23       	and	r24, r24
    1d7a:	59 f0       	breq	.+22     	; 0x1d92 <ioport_configure_port_pin+0x50>
			*((uint8_t*)port+PORT_PIN0CTRL+pin)=flags;
    1d7c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d7e:	3b 81       	ldd	r19, Y+3	; 0x03
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	88 2f       	mov	r24, r24
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	40 96       	adiw	r24, 0x10	; 16
    1d88:	82 0f       	add	r24, r18
    1d8a:	93 1f       	adc	r25, r19
    1d8c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d8e:	fc 01       	movw	r30, r24
    1d90:	20 83       	st	Z, r18

void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	8f 5f       	subi	r24, 0xFF	; 255
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	88 30       	cpi	r24, 0x08	; 8
    1d9c:	f8 f2       	brcs	.-66     	; 0x1d5c <ioport_configure_port_pin+0x1a>
		if (pin_mask & (1 << pin)) {
			*((uint8_t*)port+PORT_PIN0CTRL+pin)=flags;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1da0:	9e 81       	ldd	r25, Y+6	; 0x06
    1da2:	80 70       	andi	r24, 0x00	; 0
    1da4:	91 70       	andi	r25, 0x01	; 1
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	d1 f0       	breq	.+52     	; 0x1dde <ioport_configure_port_pin+0x9c>
		if (flags & IOPORT_INIT_HIGH) {
    1daa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dac:	9e 81       	ldd	r25, Y+6	; 0x06
    1dae:	80 70       	andi	r24, 0x00	; 0
    1db0:	92 70       	andi	r25, 0x02	; 2
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	39 f0       	breq	.+14     	; 0x1dc4 <ioport_configure_port_pin+0x82>
			*((uint8_t*)port+PORT_OUTSET)=pin_mask;
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dba:	05 96       	adiw	r24, 0x05	; 5
    1dbc:	2c 81       	ldd	r18, Y+4	; 0x04
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	20 83       	st	Z, r18
    1dc2:	06 c0       	rjmp	.+12     	; 0x1dd0 <ioport_configure_port_pin+0x8e>
		}
		else {
			*((uint8_t*)port+PORT_OUTCLR)=pin_mask;
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc8:	06 96       	adiw	r24, 0x06	; 6
    1dca:	2c 81       	ldd	r18, Y+4	; 0x04
    1dcc:	fc 01       	movw	r30, r24
    1dce:	20 83       	st	Z, r18
		}
		*((uint8_t*)port+PORT_DIRSET)=pin_mask;
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd4:	01 96       	adiw	r24, 0x01	; 1
    1dd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1dd8:	fc 01       	movw	r30, r24
    1dda:	20 83       	st	Z, r18
    1ddc:	06 c0       	rjmp	.+12     	; 0x1dea <ioport_configure_port_pin+0xa8>
	}
	else {
		*((uint8_t*)port+PORT_DIRCLR)=pin_mask;
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	9b 81       	ldd	r25, Y+3	; 0x03
    1de2:	02 96       	adiw	r24, 0x02	; 2
    1de4:	2c 81       	ldd	r18, Y+4	; 0x04
    1de6:	fc 01       	movw	r30, r24
    1de8:	20 83       	st	Z, r18
	}
}
    1dea:	26 96       	adiw	r28, 0x06	; 6
    1dec:	cd bf       	out	0x3d, r28	; 61
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1df6:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1dfa:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1dfc:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1dfe:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1e02:	84 91       	lpm	r24, Z+
	sts NVM_CMD, r20          ; Restore NVM command register
    1e04:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1e08:	08 95       	ret

00001e0a <usart_rx_enable>:
 * \brief Enable USART receiver.
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	0f 92       	push	r0
    1e10:	0f 92       	push	r0
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	9a 83       	std	Y+2, r25	; 0x02
	(usart)->CTRLB |= USART_RXEN_bm;
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1e:	fc 01       	movw	r30, r24
    1e20:	84 81       	ldd	r24, Z+4	; 0x04
    1e22:	28 2f       	mov	r18, r24
    1e24:	20 61       	ori	r18, 0x10	; 16
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	24 83       	std	Z+4, r18	; 0x04
}
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <usart_tx_enable>:
 * \brief Enable USART transmitter.
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	0f 92       	push	r0
    1e3e:	0f 92       	push	r0
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	89 83       	std	Y+1, r24	; 0x01
    1e46:	9a 83       	std	Y+2, r25	; 0x02
	(usart)->CTRLB |= USART_TXEN_bm;
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	84 81       	ldd	r24, Z+4	; 0x04
    1e50:	28 2f       	mov	r18, r24
    1e52:	28 60       	ori	r18, 0x08	; 8
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	9a 81       	ldd	r25, Y+2	; 0x02
    1e58:	fc 01       	movw	r30, r24
    1e5a:	24 83       	std	Z+4, r18	; 0x04
}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <usart_set_mode>:
 * - 0x1        : Synchronous mode.
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <usart_set_mode+0x6>
    1e6c:	0f 92       	push	r0
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	9a 83       	std	Y+2, r25	; 0x02
    1e76:	6b 83       	std	Y+3, r22	; 0x03
    1e78:	7c 83       	std	Y+4, r23	; 0x04
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7e:	fc 01       	movw	r30, r24
    1e80:	85 81       	ldd	r24, Z+5	; 0x05
    1e82:	98 2f       	mov	r25, r24
    1e84:	9f 73       	andi	r25, 0x3F	; 63
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	29 2f       	mov	r18, r25
    1e8a:	28 2b       	or	r18, r24
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e90:	fc 01       	movw	r30, r24
    1e92:	25 83       	std	Z+5, r18	; 0x05
}
    1e94:	24 96       	adiw	r28, 0x04	; 4
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <ioport_pin_to_port>:
 * \param pin PORT pin number. This number can be generated by the macro
 * CREATE_PORT_PIN.
 * \return Pointer to the port on which the pin is located.
 */
static inline PORT_t *ioport_pin_to_port(port_pin_t pin)
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	0f 92       	push	r0
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	89 83       	std	Y+1, r24	; 0x01
	// Each port has an offset of 0x20
	return (PORT_t *)((uintptr_t)&PORTA + (pin >> 3) * 0x20);
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	86 95       	lsr	r24
    1eb0:	86 95       	lsr	r24
    1eb2:	86 95       	lsr	r24
    1eb4:	88 2f       	mov	r24, r24
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	c0 96       	adiw	r24, 0x30	; 48
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	82 95       	swap	r24
    1ec0:	92 95       	swap	r25
    1ec2:	90 7f       	andi	r25, 0xF0	; 240
    1ec4:	98 27       	eor	r25, r24
    1ec6:	80 7f       	andi	r24, 0xF0	; 240
    1ec8:	98 27       	eor	r25, r24
}
    1eca:	0f 90       	pop	r0
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <ioport_pin_to_mask>:
 *
 * \param pin PORT pin number.
 * \return Pin mask.
 */
static inline pin_mask_t ioport_pin_to_mask(port_pin_t pin)
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	0f 92       	push	r0
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	89 83       	std	Y+1, r24	; 0x01
	return 1U << (pin & 0x7);
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	88 2f       	mov	r24, r24
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9c 01       	movw	r18, r24
    1ee6:	27 70       	andi	r18, 0x07	; 7
    1ee8:	30 70       	andi	r19, 0x00	; 0
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	02 2e       	mov	r0, r18
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <ioport_pin_to_mask+0x24>
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	0a 94       	dec	r0
    1ef8:	e2 f7       	brpl	.-8      	; 0x1ef2 <ioport_pin_to_mask+0x20>
}
    1efa:	0f 90       	pop	r0
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_SOURCE) {
	case SYSCLK_SRC_RC2MHZ:
		return 2000000UL;
    1f0a:	80 e8       	ldi	r24, 0x80	; 128
    1f0c:	94 e8       	ldi	r25, 0x84	; 132
    1f0e:	ae e1       	ldi	r26, 0x1E	; 30
    1f10:	b0 e0       	ldi	r27, 0x00	; 0

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    1f12:	bc 01       	movw	r22, r24
    1f14:	cd 01       	movw	r24, r26
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	0f 92       	push	r0
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    1f26:	19 82       	std	Y+1, r1	; 0x01

	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    1f28:	ec df       	rcall	.-40     	; 0x1f02 <sysclk_get_main_hz>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	29 81       	ldd	r18, Y+1	; 0x01
    1f30:	22 2f       	mov	r18, r18
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	02 2e       	mov	r0, r18
    1f36:	04 c0       	rjmp	.+8      	; 0x1f40 <sysclk_get_per4_hz+0x24>
    1f38:	b6 95       	lsr	r27
    1f3a:	a7 95       	ror	r26
    1f3c:	97 95       	ror	r25
    1f3e:	87 95       	ror	r24
    1f40:	0a 94       	dec	r0
    1f42:	d2 f7       	brpl	.-12     	; 0x1f38 <sysclk_get_per4_hz+0x1c>
}
    1f44:	bc 01       	movw	r22, r24
    1f46:	cd 01       	movw	r24, r26
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    1f58:	e1 df       	rcall	.-62     	; 0x1f1c <sysclk_get_per4_hz>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    1f5e:	bc 01       	movw	r22, r24
    1f60:	cd 01       	movw	r24, r26
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    1f70:	ef df       	rcall	.-34     	; 0x1f50 <sysclk_get_per2_hz>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
}
    1f76:	bc 01       	movw	r22, r24
    1f78:	cd 01       	movw	r24, r26
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <usart_enable_module_clock>:
 * module.
 *
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	0f 92       	push	r0
    1f86:	0f 92       	push	r0
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	89 83       	std	Y+1, r24	; 0x01
    1f8e:	9a 83       	std	Y+2, r25	; 0x02
#ifdef USARTC0
	if ((uintptr_t)usart == (uintptr_t)&USARTC0) {
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	9a 81       	ldd	r25, Y+2	; 0x02
    1f94:	28 e0       	ldi	r18, 0x08	; 8
    1f96:	80 3a       	cpi	r24, 0xA0	; 160
    1f98:	92 07       	cpc	r25, r18
    1f9a:	29 f4       	brne	.+10     	; 0x1fa6 <usart_enable_module_clock+0x26>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1f9c:	83 e0       	ldi	r24, 0x03	; 3
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	60 e1       	ldi	r22, 0x10	; 16
    1fa2:	0e 94 74 03 	call	0x6e8	; 0x6e8 <sysclk_enable_module>
	}
#endif
#ifdef USARTC1
	if ((uintptr_t)usart == (uintptr_t)&USARTC1) {
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1faa:	28 e0       	ldi	r18, 0x08	; 8
    1fac:	80 3b       	cpi	r24, 0xB0	; 176
    1fae:	92 07       	cpc	r25, r18
    1fb0:	29 f4       	brne	.+10     	; 0x1fbc <usart_enable_module_clock+0x3c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1fb2:	83 e0       	ldi	r24, 0x03	; 3
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	60 e2       	ldi	r22, 0x20	; 32
    1fb8:	0e 94 74 03 	call	0x6e8	; 0x6e8 <sysclk_enable_module>
	}
#endif
#ifdef USARTD0
	if ((uintptr_t)usart == (uintptr_t)&USARTD0) {
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc0:	29 e0       	ldi	r18, 0x09	; 9
    1fc2:	80 3a       	cpi	r24, 0xA0	; 160
    1fc4:	92 07       	cpc	r25, r18
    1fc6:	29 f4       	brne	.+10     	; 0x1fd2 <usart_enable_module_clock+0x52>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1fc8:	84 e0       	ldi	r24, 0x04	; 4
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	60 e1       	ldi	r22, 0x10	; 16
    1fce:	0e 94 74 03 	call	0x6e8	; 0x6e8 <sysclk_enable_module>
	}
#endif
#ifdef USARTD1
	if ((uintptr_t)usart == (uintptr_t)&USARTD1) {
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd6:	29 e0       	ldi	r18, 0x09	; 9
    1fd8:	80 3b       	cpi	r24, 0xB0	; 176
    1fda:	92 07       	cpc	r25, r18
    1fdc:	29 f4       	brne	.+10     	; 0x1fe8 <usart_enable_module_clock+0x68>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1fde:	84 e0       	ldi	r24, 0x04	; 4
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	60 e2       	ldi	r22, 0x20	; 32
    1fe4:	0e 94 74 03 	call	0x6e8	; 0x6e8 <sysclk_enable_module>
	}
#endif
#ifdef USARTE0
	if ((uintptr_t)usart == (uintptr_t)&USARTE0) {
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	9a 81       	ldd	r25, Y+2	; 0x02
    1fec:	2a e0       	ldi	r18, 0x0A	; 10
    1fee:	80 3a       	cpi	r24, 0xA0	; 160
    1ff0:	92 07       	cpc	r25, r18
    1ff2:	29 f4       	brne	.+10     	; 0x1ffe <usart_enable_module_clock+0x7e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1ff4:	85 e0       	ldi	r24, 0x05	; 5
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	60 e1       	ldi	r22, 0x10	; 16
    1ffa:	0e 94 74 03 	call	0x6e8	; 0x6e8 <sysclk_enable_module>
	if ((uintptr_t)usart == (uintptr_t)&USARTE1) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
	}
#endif
#ifdef USARTF0
	if ((uintptr_t)usart == (uintptr_t)&USARTF0) {
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	2b e0       	ldi	r18, 0x0B	; 11
    2004:	80 3a       	cpi	r24, 0xA0	; 160
    2006:	92 07       	cpc	r25, r18
    2008:	29 f4       	brne	.+10     	; 0x2014 <usart_enable_module_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    200a:	86 e0       	ldi	r24, 0x06	; 6
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	60 e1       	ldi	r22, 0x10	; 16
    2010:	0e 94 74 03 	call	0x6e8	; 0x6e8 <sysclk_enable_module>
#ifdef USARTF1
	if ((uintptr_t)usart == (uintptr_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
}
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    201e:	cf 92       	push	r12
    2020:	df 92       	push	r13
    2022:	ef 92       	push	r14
    2024:	ff 92       	push	r15
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	25 97       	sbiw	r28, 0x05	; 5
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	8a 83       	std	Y+2, r24	; 0x02
    203a:	9b 83       	std	Y+3, r25	; 0x03
    203c:	6c 83       	std	Y+4, r22	; 0x04
    203e:	7d 83       	std	Y+5, r23	; 0x05
	usart_enable_module_clock(usart);
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	9b 81       	ldd	r25, Y+3	; 0x03
    2044:	9d df       	rcall	.-198    	; 0x1f80 <usart_enable_module_clock>
	usart_set_mode(usart, USART_CMODE_MSPI_gc);
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	9b 81       	ldd	r25, Y+3	; 0x03
    204a:	60 ec       	ldi	r22, 0xC0	; 192
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	0b df       	rcall	.-490    	; 0x1e66 <usart_set_mode>
	port_pin_t sck_pin;

	if (opt->spimode == 1 || opt->spimode == 3) {
    2050:	8c 81       	ldd	r24, Y+4	; 0x04
    2052:	9d 81       	ldd	r25, Y+5	; 0x05
    2054:	fc 01       	movw	r30, r24
    2056:	84 81       	ldd	r24, Z+4	; 0x04
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	31 f0       	breq	.+12     	; 0x2068 <usart_init_spi+0x4a>
    205c:	8c 81       	ldd	r24, Y+4	; 0x04
    205e:	9d 81       	ldd	r25, Y+5	; 0x05
    2060:	fc 01       	movw	r30, r24
    2062:	84 81       	ldd	r24, Z+4	; 0x04
    2064:	83 30       	cpi	r24, 0x03	; 3
    2066:	59 f4       	brne	.+22     	; 0x207e <usart_init_spi+0x60>
		//! \todo Fix when UCPHA_bm is added to header file.
		usart->CTRLC |= 0x02;
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	9b 81       	ldd	r25, Y+3	; 0x03
    206c:	fc 01       	movw	r30, r24
    206e:	85 81       	ldd	r24, Z+5	; 0x05
    2070:	28 2f       	mov	r18, r24
    2072:	22 60       	ori	r18, 0x02	; 2
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	9b 81       	ldd	r25, Y+3	; 0x03
    2078:	fc 01       	movw	r30, r24
    207a:	25 83       	std	Z+5, r18	; 0x05
    207c:	0a c0       	rjmp	.+20     	; 0x2092 <usart_init_spi+0x74>
	} else {
		//! \todo Fix when UCPHA_bm is added to header file.
		usart->CTRLC &= ~0x02;
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	9b 81       	ldd	r25, Y+3	; 0x03
    2082:	fc 01       	movw	r30, r24
    2084:	85 81       	ldd	r24, Z+5	; 0x05
    2086:	28 2f       	mov	r18, r24
    2088:	2d 7f       	andi	r18, 0xFD	; 253
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	9b 81       	ldd	r25, Y+3	; 0x03
    208e:	fc 01       	movw	r30, r24
    2090:	25 83       	std	Z+5, r18	; 0x05
	}

	// configure Clock polarity using INVEN bit of the correct SCK I/O port
	if (opt->spimode == 2 || opt->spimode == 3) {
    2092:	8c 81       	ldd	r24, Y+4	; 0x04
    2094:	9d 81       	ldd	r25, Y+5	; 0x05
    2096:	fc 01       	movw	r30, r24
    2098:	84 81       	ldd	r24, Z+4	; 0x04
    209a:	82 30       	cpi	r24, 0x02	; 2
    209c:	39 f0       	breq	.+14     	; 0x20ac <usart_init_spi+0x8e>
    209e:	8c 81       	ldd	r24, Y+4	; 0x04
    20a0:	9d 81       	ldd	r25, Y+5	; 0x05
    20a2:	fc 01       	movw	r30, r24
    20a4:	84 81       	ldd	r24, Z+4	; 0x04
    20a6:	83 30       	cpi	r24, 0x03	; 3
    20a8:	09 f0       	breq	.+2      	; 0x20ac <usart_init_spi+0x8e>
    20aa:	72 c0       	rjmp	.+228    	; 0x2190 <usart_init_spi+0x172>
#ifdef USARTC0
		if ((uint16_t)usart == (uint16_t)&USARTC0) {
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	9b 81       	ldd	r25, Y+3	; 0x03
    20b0:	f8 e0       	ldi	r31, 0x08	; 8
    20b2:	80 3a       	cpi	r24, 0xA0	; 160
    20b4:	9f 07       	cpc	r25, r31
    20b6:	69 f4       	brne	.+26     	; 0x20d2 <usart_init_spi+0xb4>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    20b8:	81 e1       	ldi	r24, 0x11	; 17
    20ba:	89 83       	std	Y+1, r24	; 0x01
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	f0 de       	rcall	.-544    	; 0x1ea0 <ioport_pin_to_port>
    20c0:	8c 01       	movw	r16, r24
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	06 df       	rcall	.-500    	; 0x1ed2 <ioport_pin_to_mask>
    20c6:	28 2f       	mov	r18, r24
    20c8:	c8 01       	movw	r24, r16
    20ca:	62 2f       	mov	r22, r18
    20cc:	40 e4       	ldi	r20, 0x40	; 64
    20ce:	53 e0       	ldi	r21, 0x03	; 3
    20d0:	38 de       	rcall	.-912    	; 0x1d42 <ioport_configure_port_pin>
					ioport_pin_to_mask(sck_pin),
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH | IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTC1
		if ((uint16_t)usart == (uint16_t)&USARTC1) {
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
    20d4:	9b 81       	ldd	r25, Y+3	; 0x03
    20d6:	28 e0       	ldi	r18, 0x08	; 8
    20d8:	80 3b       	cpi	r24, 0xB0	; 176
    20da:	92 07       	cpc	r25, r18
    20dc:	69 f4       	brne	.+26     	; 0x20f8 <usart_init_spi+0xda>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    20de:	85 e1       	ldi	r24, 0x15	; 21
    20e0:	89 83       	std	Y+1, r24	; 0x01
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	dd de       	rcall	.-582    	; 0x1ea0 <ioport_pin_to_port>
    20e6:	8c 01       	movw	r16, r24
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	f3 de       	rcall	.-538    	; 0x1ed2 <ioport_pin_to_mask>
    20ec:	28 2f       	mov	r18, r24
    20ee:	c8 01       	movw	r24, r16
    20f0:	62 2f       	mov	r22, r18
    20f2:	40 e4       	ldi	r20, 0x40	; 64
    20f4:	53 e0       	ldi	r21, 0x03	; 3
    20f6:	25 de       	rcall	.-950    	; 0x1d42 <ioport_configure_port_pin>
					ioport_pin_to_mask(sck_pin),
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH | IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTD0
		if ((uint16_t)usart == (uint16_t)&USARTD0) {
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	9b 81       	ldd	r25, Y+3	; 0x03
    20fc:	e9 e0       	ldi	r30, 0x09	; 9
    20fe:	80 3a       	cpi	r24, 0xA0	; 160
    2100:	9e 07       	cpc	r25, r30
    2102:	69 f4       	brne	.+26     	; 0x211e <usart_init_spi+0x100>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    2104:	89 e1       	ldi	r24, 0x19	; 25
    2106:	89 83       	std	Y+1, r24	; 0x01
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	ca de       	rcall	.-620    	; 0x1ea0 <ioport_pin_to_port>
    210c:	8c 01       	movw	r16, r24
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	e0 de       	rcall	.-576    	; 0x1ed2 <ioport_pin_to_mask>
    2112:	28 2f       	mov	r18, r24
    2114:	c8 01       	movw	r24, r16
    2116:	62 2f       	mov	r22, r18
    2118:	40 e4       	ldi	r20, 0x40	; 64
    211a:	53 e0       	ldi	r21, 0x03	; 3
    211c:	12 de       	rcall	.-988    	; 0x1d42 <ioport_configure_port_pin>
					ioport_pin_to_mask(sck_pin),
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH | IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTD1
		if ((uint16_t)usart == (uint16_t)&USARTD1) {
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	9b 81       	ldd	r25, Y+3	; 0x03
    2122:	f9 e0       	ldi	r31, 0x09	; 9
    2124:	80 3b       	cpi	r24, 0xB0	; 176
    2126:	9f 07       	cpc	r25, r31
    2128:	69 f4       	brne	.+26     	; 0x2144 <usart_init_spi+0x126>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    212a:	8d e1       	ldi	r24, 0x1D	; 29
    212c:	89 83       	std	Y+1, r24	; 0x01
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	b7 de       	rcall	.-658    	; 0x1ea0 <ioport_pin_to_port>
    2132:	8c 01       	movw	r16, r24
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	cd de       	rcall	.-614    	; 0x1ed2 <ioport_pin_to_mask>
    2138:	28 2f       	mov	r18, r24
    213a:	c8 01       	movw	r24, r16
    213c:	62 2f       	mov	r22, r18
    213e:	40 e4       	ldi	r20, 0x40	; 64
    2140:	53 e0       	ldi	r21, 0x03	; 3
    2142:	ff dd       	rcall	.-1026   	; 0x1d42 <ioport_configure_port_pin>
					ioport_pin_to_mask(sck_pin),
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH | IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTE0
		if ((uint16_t)usart == (uint16_t)&USARTE0) {
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	9b 81       	ldd	r25, Y+3	; 0x03
    2148:	2a e0       	ldi	r18, 0x0A	; 10
    214a:	80 3a       	cpi	r24, 0xA0	; 160
    214c:	92 07       	cpc	r25, r18
    214e:	69 f4       	brne	.+26     	; 0x216a <usart_init_spi+0x14c>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    2150:	81 e2       	ldi	r24, 0x21	; 33
    2152:	89 83       	std	Y+1, r24	; 0x01
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	a4 de       	rcall	.-696    	; 0x1ea0 <ioport_pin_to_port>
    2158:	8c 01       	movw	r16, r24
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	ba de       	rcall	.-652    	; 0x1ed2 <ioport_pin_to_mask>
    215e:	28 2f       	mov	r18, r24
    2160:	c8 01       	movw	r24, r16
    2162:	62 2f       	mov	r22, r18
    2164:	40 e4       	ldi	r20, 0x40	; 64
    2166:	53 e0       	ldi	r21, 0x03	; 3
    2168:	ec dd       	rcall	.-1064   	; 0x1d42 <ioport_configure_port_pin>
					ioport_pin_to_mask(sck_pin),
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH | IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTF0
		if ((uint16_t)usart == (uint16_t)&USARTF0) {
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	9b 81       	ldd	r25, Y+3	; 0x03
    216e:	eb e0       	ldi	r30, 0x0B	; 11
    2170:	80 3a       	cpi	r24, 0xA0	; 160
    2172:	9e 07       	cpc	r25, r30
    2174:	69 f4       	brne	.+26     	; 0x2190 <usart_init_spi+0x172>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    2176:	89 e2       	ldi	r24, 0x29	; 41
    2178:	89 83       	std	Y+1, r24	; 0x01
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	91 de       	rcall	.-734    	; 0x1ea0 <ioport_pin_to_port>
    217e:	8c 01       	movw	r16, r24
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	a7 de       	rcall	.-690    	; 0x1ed2 <ioport_pin_to_mask>
    2184:	28 2f       	mov	r18, r24
    2186:	c8 01       	movw	r24, r16
    2188:	62 2f       	mov	r22, r18
    218a:	40 e4       	ldi	r20, 0x40	; 64
    218c:	53 e0       	ldi	r21, 0x03	; 3
    218e:	d9 dd       	rcall	.-1102   	; 0x1d42 <ioport_configure_port_pin>
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH | IOPORT_INV_ENABLED);
		}
#endif
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    2190:	8c 81       	ldd	r24, Y+4	; 0x04
    2192:	9d 81       	ldd	r25, Y+5	; 0x05
    2194:	fc 01       	movw	r30, r24
    2196:	c0 80       	ld	r12, Z
    2198:	d1 80       	ldd	r13, Z+1	; 0x01
    219a:	e2 80       	ldd	r14, Z+2	; 0x02
    219c:	f3 80       	ldd	r15, Z+3	; 0x03
    219e:	e4 de       	rcall	.-568    	; 0x1f68 <sysclk_get_per_hz>
    21a0:	8b 01       	movw	r16, r22
    21a2:	9c 01       	movw	r18, r24
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	9b 81       	ldd	r25, Y+3	; 0x03
    21a8:	b7 01       	movw	r22, r14
    21aa:	a6 01       	movw	r20, r12
    21ac:	12 d0       	rcall	.+36     	; 0x21d2 <usart_spi_set_baudrate>
	usart_tx_enable(usart);
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	9b 81       	ldd	r25, Y+3	; 0x03
    21b2:	42 de       	rcall	.-892    	; 0x1e38 <usart_tx_enable>
	usart_rx_enable(usart);
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	9b 81       	ldd	r25, Y+3	; 0x03
    21b8:	28 de       	rcall	.-944    	; 0x1e0a <usart_rx_enable>
}
    21ba:	25 96       	adiw	r28, 0x05	; 5
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	cf 91       	pop	r28
    21c2:	df 91       	pop	r29
    21c4:	1f 91       	pop	r17
    21c6:	0f 91       	pop	r16
    21c8:	ff 90       	pop	r15
    21ca:	ef 90       	pop	r14
    21cc:	df 90       	pop	r13
    21ce:	cf 90       	pop	r12
    21d0:	08 95       	ret

000021d2 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    21d2:	0f 93       	push	r16
    21d4:	1f 93       	push	r17
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	2c 97       	sbiw	r28, 0x0c	; 12
    21e0:	cd bf       	out	0x3d, r28	; 61
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	8b 83       	std	Y+3, r24	; 0x03
    21e6:	9c 83       	std	Y+4, r25	; 0x04
    21e8:	4d 83       	std	Y+5, r20	; 0x05
    21ea:	5e 83       	std	Y+6, r21	; 0x06
    21ec:	6f 83       	std	Y+7, r22	; 0x07
    21ee:	78 87       	std	Y+8, r23	; 0x08
    21f0:	09 87       	std	Y+9, r16	; 0x09
    21f2:	1a 87       	std	Y+10, r17	; 0x0a
    21f4:	2b 87       	std	Y+11, r18	; 0x0b
    21f6:	3c 87       	std	Y+12, r19	; 0x0c
	uint16_t bsel_value = (uint16_t)((((((cpu_hz) << 1)
    21f8:	89 85       	ldd	r24, Y+9	; 0x09
    21fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fc:	ab 85       	ldd	r26, Y+11	; 0x0b
    21fe:	bc 85       	ldd	r27, Y+12	; 0x0c
    2200:	88 0f       	add	r24, r24
    2202:	99 1f       	adc	r25, r25
    2204:	aa 1f       	adc	r26, r26
    2206:	bb 1f       	adc	r27, r27
						/ (baud * 2)) + 1) >> 1) - 1);
    2208:	2d 81       	ldd	r18, Y+5	; 0x05
    220a:	3e 81       	ldd	r19, Y+6	; 0x06
    220c:	4f 81       	ldd	r20, Y+7	; 0x07
    220e:	58 85       	ldd	r21, Y+8	; 0x08
    2210:	22 0f       	add	r18, r18
    2212:	33 1f       	adc	r19, r19
    2214:	44 1f       	adc	r20, r20
    2216:	55 1f       	adc	r21, r21
    2218:	bc 01       	movw	r22, r24
    221a:	cd 01       	movw	r24, r26
    221c:	9c d5       	rcall	.+2872   	; 0x2d56 <__udivmodsi4>
    221e:	da 01       	movw	r26, r20
    2220:	c9 01       	movw	r24, r18
    2222:	01 96       	adiw	r24, 0x01	; 1
    2224:	a1 1d       	adc	r26, r1
    2226:	b1 1d       	adc	r27, r1
    2228:	b6 95       	lsr	r27
    222a:	a7 95       	ror	r26
    222c:	97 95       	ror	r25
    222e:	87 95       	ror	r24
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
	uint16_t bsel_value = (uint16_t)((((((cpu_hz) << 1)
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	9a 83       	std	Y+2, r25	; 0x02
						/ (baud * 2)) + 1) >> 1) - 1);
	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	9a 81       	ldd	r25, Y+2	; 0x02
    223a:	89 2f       	mov	r24, r25
    223c:	99 27       	eor	r25, r25
    223e:	28 2f       	mov	r18, r24
    2240:	2f 70       	andi	r18, 0x0F	; 15
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	9c 81       	ldd	r25, Y+4	; 0x04
    2246:	fc 01       	movw	r30, r24
    2248:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    224a:	29 81       	ldd	r18, Y+1	; 0x01
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	fc 01       	movw	r30, r24
    2252:	26 83       	std	Z+6, r18	; 0x06
}
    2254:	2c 96       	adiw	r28, 0x0c	; 12
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	08 95       	ret

00002264 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	0f 92       	push	r0
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags = SREG;
    226e:	8f e3       	ldi	r24, 0x3F	; 63
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	fc 01       	movw	r30, r24
    2274:	80 81       	ld	r24, Z
    2276:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2278:	f8 94       	cli
	return flags;
    227a:	89 81       	ldd	r24, Y+1	; 0x01
}
    227c:	0f 90       	pop	r0
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	0f 92       	push	r0
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    2290:	8f e3       	ldi	r24, 0x3F	; 63
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	29 81       	ldd	r18, Y+1	; 0x01
    2296:	fc 01       	movw	r30, r24
    2298:	20 83       	st	Z, r18
}
    229a:	0f 90       	pop	r0
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <ioport_pin_to_port>:
 * \param pin PORT pin number. This number can be generated by the macro
 * CREATE_PORT_PIN.
 * \return Pointer to the port on which the pin is located.
 */
static inline PORT_t *ioport_pin_to_port(port_pin_t pin)
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	0f 92       	push	r0
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	89 83       	std	Y+1, r24	; 0x01
	// Each port has an offset of 0x20
	return (PORT_t *)((uintptr_t)&PORTA + (pin >> 3) * 0x20);
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	86 95       	lsr	r24
    22b2:	86 95       	lsr	r24
    22b4:	86 95       	lsr	r24
    22b6:	88 2f       	mov	r24, r24
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	c0 96       	adiw	r24, 0x30	; 48
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	82 95       	swap	r24
    22c2:	92 95       	swap	r25
    22c4:	90 7f       	andi	r25, 0xF0	; 240
    22c6:	98 27       	eor	r25, r24
    22c8:	80 7f       	andi	r24, 0xF0	; 240
    22ca:	98 27       	eor	r25, r24
}
    22cc:	0f 90       	pop	r0
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <ioport_pin_to_mask>:
 *
 * \param pin PORT pin number.
 * \return Pin mask.
 */
static inline pin_mask_t ioport_pin_to_mask(port_pin_t pin)
{
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	0f 92       	push	r0
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	89 83       	std	Y+1, r24	; 0x01
	return 1U << (pin & 0x7);
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	88 2f       	mov	r24, r24
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	9c 01       	movw	r18, r24
    22e8:	27 70       	andi	r18, 0x07	; 7
    22ea:	30 70       	andi	r19, 0x00	; 0
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	02 2e       	mov	r0, r18
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <ioport_pin_to_mask+0x24>
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	0a 94       	dec	r0
    22fa:	e2 f7       	brpl	.-8      	; 0x22f4 <ioport_pin_to_mask+0x20>
}
    22fc:	0f 90       	pop	r0
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	08 95       	ret

00002304 <ioport_set_value>:
 * \param value The desired state of the pin. \a true means drive the
 * pin high (towards Vdd), while \a false means drive the pin low
 * (towards Vss).
 */
static inline void ioport_set_value(port_pin_t pin, bool value)
{
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	00 d0       	rcall	.+0      	; 0x230a <ioport_set_value+0x6>
    230a:	0f 92       	push	r0
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	8b 83       	std	Y+3, r24	; 0x03
    2312:	6c 83       	std	Y+4, r22	; 0x04
	PORT_t *port = ioport_pin_to_port(pin);
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	c5 df       	rcall	.-118    	; 0x22a2 <ioport_pin_to_port>
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	9a 83       	std	Y+2, r25	; 0x02
	if (value)
    231c:	8c 81       	ldd	r24, Y+4	; 0x04
    231e:	88 23       	and	r24, r24
    2320:	41 f0       	breq	.+16     	; 0x2332 <ioport_set_value+0x2e>
		port->OUTSET=ioport_pin_to_mask(pin);
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	d7 df       	rcall	.-82     	; 0x22d4 <ioport_pin_to_mask>
    2326:	28 2f       	mov	r18, r24
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	9a 81       	ldd	r25, Y+2	; 0x02
    232c:	fc 01       	movw	r30, r24
    232e:	25 83       	std	Z+5, r18	; 0x05
    2330:	07 c0       	rjmp	.+14     	; 0x2340 <ioport_set_value+0x3c>
	else
		port->OUTCLR=ioport_pin_to_mask(pin);
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	cf df       	rcall	.-98     	; 0x22d4 <ioport_pin_to_mask>
    2336:	28 2f       	mov	r18, r24
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	9a 81       	ldd	r25, Y+2	; 0x02
    233c:	fc 01       	movw	r30, r24
    233e:	26 83       	std	Z+6, r18	; 0x06
}
    2340:	24 96       	adiw	r28, 0x04	; 4
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <ioport_set_pin_high>:
 * an output.
 *
 * \param pin A number identifying the pin to act on.
 */
static inline void ioport_set_pin_high(port_pin_t pin)
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	00 d0       	rcall	.+0      	; 0x2352 <ioport_set_pin_high+0x6>
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	8b 83       	std	Y+3, r24	; 0x03
	PORT_t *port = ioport_pin_to_port(pin);
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	a3 df       	rcall	.-186    	; 0x22a2 <ioport_pin_to_port>
    235c:	89 83       	std	Y+1, r24	; 0x01
    235e:	9a 83       	std	Y+2, r25	; 0x02
	port->OUTSET=ioport_pin_to_mask(pin);
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	b8 df       	rcall	.-144    	; 0x22d4 <ioport_pin_to_mask>
    2364:	28 2f       	mov	r18, r24
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	fc 01       	movw	r30, r24
    236c:	25 83       	std	Z+5, r18	; 0x05
}
    236e:	23 96       	adiw	r28, 0x03	; 3
    2370:	cd bf       	out	0x3d, r28	; 61
    2372:	de bf       	out	0x3e, r29	; 62
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <ioport_pin_is_low>:
 * \param pin A number identifying the pin to read.
 * \retval true The pin is currently high (close to Vdd)
 * \retval false The pin is currently low (close to Vss)
 */
static inline bool ioport_pin_is_low(port_pin_t pin)
{
    237a:	0f 93       	push	r16
    237c:	1f 93       	push	r17
    237e:	df 93       	push	r29
    2380:	cf 93       	push	r28
    2382:	00 d0       	rcall	.+0      	; 0x2384 <ioport_pin_is_low+0xa>
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	8b 83       	std	Y+3, r24	; 0x03
	PORT_t *port = ioport_pin_to_port(pin);
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	8a df       	rcall	.-236    	; 0x22a2 <ioport_pin_to_port>
    238e:	89 83       	std	Y+1, r24	; 0x01
    2390:	9a 83       	std	Y+2, r25	; 0x02
	return (~port->IN&ioport_pin_to_mask(pin));
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	fc 01       	movw	r30, r24
    2398:	80 85       	ldd	r24, Z+8	; 0x08
    239a:	88 2f       	mov	r24, r24
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	8c 01       	movw	r16, r24
    23a0:	00 95       	com	r16
    23a2:	10 95       	com	r17
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	96 df       	rcall	.-212    	; 0x22d4 <ioport_pin_to_mask>
    23a8:	88 2f       	mov	r24, r24
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	80 23       	and	r24, r16
    23ae:	91 23       	and	r25, r17
    23b0:	21 e0       	ldi	r18, 0x01	; 1
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <ioport_pin_is_low+0x3e>
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	82 2f       	mov	r24, r18
}
    23ba:	23 96       	adiw	r28, 0x03	; 3
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	1f 91       	pop	r17
    23c6:	0f 91       	pop	r16
    23c8:	08 95       	ret

000023ca <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_SOURCE) {
	case SYSCLK_SRC_RC2MHZ:
		return 2000000UL;
    23d2:	80 e8       	ldi	r24, 0x80	; 128
    23d4:	94 e8       	ldi	r25, 0x84	; 132
    23d6:	ae e1       	ldi	r26, 0x1E	; 30
    23d8:	b0 e0       	ldi	r27, 0x00	; 0

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	0f 92       	push	r0
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    23ee:	19 82       	std	Y+1, r1	; 0x01

	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    23f0:	ec df       	rcall	.-40     	; 0x23ca <sysclk_get_main_hz>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	29 81       	ldd	r18, Y+1	; 0x01
    23f8:	22 2f       	mov	r18, r18
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	02 2e       	mov	r0, r18
    23fe:	04 c0       	rjmp	.+8      	; 0x2408 <sysclk_get_per4_hz+0x24>
    2400:	b6 95       	lsr	r27
    2402:	a7 95       	ror	r26
    2404:	97 95       	ror	r25
    2406:	87 95       	ror	r24
    2408:	0a 94       	dec	r0
    240a:	d2 f7       	brpl	.-12     	; 0x2400 <sysclk_get_per4_hz+0x1c>
}
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	0f 90       	pop	r0
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    2420:	e1 df       	rcall	.-62     	; 0x23e4 <sysclk_get_per4_hz>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	08 95       	ret

00002430 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    2438:	ef df       	rcall	.-34     	; 0x2418 <sysclk_get_per2_hz>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
}
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <adc_start_conversion>:
 * together.)
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	00 d0       	rcall	.+0      	; 0x244e <adc_start_conversion+0x6>
    244e:	0f 92       	push	r0
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	8a 83       	std	Y+2, r24	; 0x02
    2456:	9b 83       	std	Y+3, r25	; 0x03
    2458:	6c 83       	std	Y+4, r22	; 0x04
	irqflags_t flags = cpu_irq_save();
    245a:	04 df       	rcall	.-504    	; 0x2264 <cpu_irq_save>
    245c:	89 83       	std	Y+1, r24	; 0x01
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    245e:	8a 81       	ldd	r24, Y+2	; 0x02
    2460:	9b 81       	ldd	r25, Y+3	; 0x03
    2462:	fc 01       	movw	r30, r24
    2464:	80 81       	ld	r24, Z
    2466:	28 2f       	mov	r18, r24
    2468:	8c 81       	ldd	r24, Y+4	; 0x04
    246a:	88 2f       	mov	r24, r24
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	82 2b       	or	r24, r18
    2478:	28 2f       	mov	r18, r24
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	9b 81       	ldd	r25, Y+3	; 0x03
    247e:	fc 01       	movw	r30, r24
    2480:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	ff de       	rcall	.-514    	; 0x2284 <cpu_irq_restore>
}
    2486:	24 96       	adiw	r28, 0x04	; 4
    2488:	cd bf       	out	0x3d, r28	; 61
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	08 95       	ret

00002492 <adc_set_clock_rate>:
 * \note The sample rate is not determined solely by the ADC clock rate for all
 * devices. Refer to the device manual for detailed information on conversion
 * timing.
 */
static inline void adc_set_clock_rate(struct adc_config *conf, uint32_t clk_adc)
{
    2492:	df 93       	push	r29
    2494:	cf 93       	push	r28
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	2d 97       	sbiw	r28, 0x0d	; 13
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	88 87       	std	Y+8, r24	; 0x08
    24a2:	99 87       	std	Y+9, r25	; 0x09
    24a4:	4a 87       	std	Y+10, r20	; 0x0a
    24a6:	5b 87       	std	Y+11, r21	; 0x0b
    24a8:	6c 87       	std	Y+12, r22	; 0x0c
    24aa:	7d 87       	std	Y+13, r23	; 0x0d
	Assert(clk_adc <= 2000000UL);
#elif XMEGA_D
	Assert(clk_adc <= 1400000UL);
#endif

	clk_per = sysclk_get_per_hz();
    24ac:	c1 df       	rcall	.-126    	; 0x2430 <sysclk_get_per_hz>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	8a 83       	std	Y+2, r24	; 0x02
    24b4:	9b 83       	std	Y+3, r25	; 0x03
    24b6:	ac 83       	std	Y+4, r26	; 0x04
    24b8:	bd 83       	std	Y+5, r27	; 0x05
	ratio = clk_per / clk_adc;
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	9b 81       	ldd	r25, Y+3	; 0x03
    24be:	ac 81       	ldd	r26, Y+4	; 0x04
    24c0:	bd 81       	ldd	r27, Y+5	; 0x05
    24c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    24c4:	3b 85       	ldd	r19, Y+11	; 0x0b
    24c6:	4c 85       	ldd	r20, Y+12	; 0x0c
    24c8:	5d 85       	ldd	r21, Y+13	; 0x0d
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	43 d4       	rcall	.+2182   	; 0x2d56 <__udivmodsi4>
    24d0:	da 01       	movw	r26, r20
    24d2:	c9 01       	movw	r24, r18
    24d4:	8e 83       	std	Y+6, r24	; 0x06
    24d6:	9f 83       	std	Y+7, r25	; 0x07

	// Round ratio up to the nearest prescaling factor.
	if(ratio <= 4) {
    24d8:	8e 81       	ldd	r24, Y+6	; 0x06
    24da:	9f 81       	ldd	r25, Y+7	; 0x07
    24dc:	85 30       	cpi	r24, 0x05	; 5
    24de:	91 05       	cpc	r25, r1
    24e0:	10 f4       	brcc	.+4      	; 0x24e6 <adc_set_clock_rate+0x54>
		psc = ADC_PRESCALER_DIV4_gc;
    24e2:	19 82       	std	Y+1, r1	; 0x01
    24e4:	33 c0       	rjmp	.+102    	; 0x254c <adc_set_clock_rate+0xba>
	} else if (ratio <= 8) {
    24e6:	8e 81       	ldd	r24, Y+6	; 0x06
    24e8:	9f 81       	ldd	r25, Y+7	; 0x07
    24ea:	89 30       	cpi	r24, 0x09	; 9
    24ec:	91 05       	cpc	r25, r1
    24ee:	18 f4       	brcc	.+6      	; 0x24f6 <adc_set_clock_rate+0x64>
		psc = ADC_PRESCALER_DIV8_gc;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	89 83       	std	Y+1, r24	; 0x01
    24f4:	2b c0       	rjmp	.+86     	; 0x254c <adc_set_clock_rate+0xba>
	} else if (ratio <= 16) {
    24f6:	8e 81       	ldd	r24, Y+6	; 0x06
    24f8:	9f 81       	ldd	r25, Y+7	; 0x07
    24fa:	81 31       	cpi	r24, 0x11	; 17
    24fc:	91 05       	cpc	r25, r1
    24fe:	18 f4       	brcc	.+6      	; 0x2506 <adc_set_clock_rate+0x74>
		psc = ADC_PRESCALER_DIV16_gc;
    2500:	82 e0       	ldi	r24, 0x02	; 2
    2502:	89 83       	std	Y+1, r24	; 0x01
    2504:	23 c0       	rjmp	.+70     	; 0x254c <adc_set_clock_rate+0xba>
	} else if (ratio <= 32) {
    2506:	8e 81       	ldd	r24, Y+6	; 0x06
    2508:	9f 81       	ldd	r25, Y+7	; 0x07
    250a:	81 32       	cpi	r24, 0x21	; 33
    250c:	91 05       	cpc	r25, r1
    250e:	18 f4       	brcc	.+6      	; 0x2516 <adc_set_clock_rate+0x84>
		psc = ADC_PRESCALER_DIV32_gc;
    2510:	83 e0       	ldi	r24, 0x03	; 3
    2512:	89 83       	std	Y+1, r24	; 0x01
    2514:	1b c0       	rjmp	.+54     	; 0x254c <adc_set_clock_rate+0xba>
	} else if (ratio <= 64) {
    2516:	8e 81       	ldd	r24, Y+6	; 0x06
    2518:	9f 81       	ldd	r25, Y+7	; 0x07
    251a:	81 34       	cpi	r24, 0x41	; 65
    251c:	91 05       	cpc	r25, r1
    251e:	18 f4       	brcc	.+6      	; 0x2526 <adc_set_clock_rate+0x94>
		psc = ADC_PRESCALER_DIV64_gc;
    2520:	84 e0       	ldi	r24, 0x04	; 4
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	13 c0       	rjmp	.+38     	; 0x254c <adc_set_clock_rate+0xba>
	} else if (ratio <= 128) {
    2526:	8e 81       	ldd	r24, Y+6	; 0x06
    2528:	9f 81       	ldd	r25, Y+7	; 0x07
    252a:	81 38       	cpi	r24, 0x81	; 129
    252c:	91 05       	cpc	r25, r1
    252e:	18 f4       	brcc	.+6      	; 0x2536 <adc_set_clock_rate+0xa4>
		psc = ADC_PRESCALER_DIV128_gc;
    2530:	85 e0       	ldi	r24, 0x05	; 5
    2532:	89 83       	std	Y+1, r24	; 0x01
    2534:	0b c0       	rjmp	.+22     	; 0x254c <adc_set_clock_rate+0xba>
	} else if (ratio <= 256) {
    2536:	8e 81       	ldd	r24, Y+6	; 0x06
    2538:	9f 81       	ldd	r25, Y+7	; 0x07
    253a:	21 e0       	ldi	r18, 0x01	; 1
    253c:	81 30       	cpi	r24, 0x01	; 1
    253e:	92 07       	cpc	r25, r18
    2540:	18 f4       	brcc	.+6      	; 0x2548 <adc_set_clock_rate+0xb6>
		psc = ADC_PRESCALER_DIV256_gc;
    2542:	86 e0       	ldi	r24, 0x06	; 6
    2544:	89 83       	std	Y+1, r24	; 0x01
    2546:	02 c0       	rjmp	.+4      	; 0x254c <adc_set_clock_rate+0xba>
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
    2548:	87 e0       	ldi	r24, 0x07	; 7
    254a:	89 83       	std	Y+1, r24	; 0x01
	}

	conf->prescaler = psc;
    254c:	88 85       	ldd	r24, Y+8	; 0x08
    254e:	99 85       	ldd	r25, Y+9	; 0x09
    2550:	29 81       	ldd	r18, Y+1	; 0x01
    2552:	fc 01       	movw	r30, r24
    2554:	24 83       	std	Z+4, r18	; 0x04
}
    2556:	2d 96       	adiw	r28, 0x0d	; 13
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	de bf       	out	0x3e, r29	; 62
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <adc_set_conversion_parameters>:
 * \param ref Voltage reference to use.
 */
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	28 97       	sbiw	r28, 0x08	; 8
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	89 83       	std	Y+1, r24	; 0x01
    2572:	9a 83       	std	Y+2, r25	; 0x02
    2574:	6b 83       	std	Y+3, r22	; 0x03
    2576:	7c 83       	std	Y+4, r23	; 0x04
    2578:	4d 83       	std	Y+5, r20	; 0x05
    257a:	5e 83       	std	Y+6, r21	; 0x06
    257c:	2f 83       	std	Y+7, r18	; 0x07
    257e:	38 87       	std	Y+8, r19	; 0x08
	// Preserve all but conversion and resolution config.
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	9a 81       	ldd	r25, Y+2	; 0x02
    2584:	fc 01       	movw	r30, r24
    2586:	81 81       	ldd	r24, Z+1	; 0x01
    2588:	28 2f       	mov	r18, r24
    258a:	29 7e       	andi	r18, 0xE9	; 233
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	9a 81       	ldd	r25, Y+2	; 0x02
    2590:	fc 01       	movw	r30, r24
    2592:	21 83       	std	Z+1, r18	; 0x01
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	9a 81       	ldd	r25, Y+2	; 0x02
    2598:	fc 01       	movw	r30, r24
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	2d 81       	ldd	r18, Y+5	; 0x05
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	82 2b       	or	r24, r18
    25a2:	29 2f       	mov	r18, r25
    25a4:	28 2b       	or	r18, r24
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	fc 01       	movw	r30, r24
    25ac:	21 83       	std	Z+1, r18	; 0x01

	conf->refctrl &= ~ADC_REFSEL_gm;
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	9a 81       	ldd	r25, Y+2	; 0x02
    25b2:	fc 01       	movw	r30, r24
    25b4:	82 81       	ldd	r24, Z+2	; 0x02
    25b6:	28 2f       	mov	r18, r24
    25b8:	2f 78       	andi	r18, 0x8F	; 143
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	9a 81       	ldd	r25, Y+2	; 0x02
    25be:	fc 01       	movw	r30, r24
    25c0:	22 83       	std	Z+2, r18	; 0x02
	conf->refctrl |= ref;
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	9a 81       	ldd	r25, Y+2	; 0x02
    25c6:	fc 01       	movw	r30, r24
    25c8:	92 81       	ldd	r25, Z+2	; 0x02
    25ca:	8f 81       	ldd	r24, Y+7	; 0x07
    25cc:	29 2f       	mov	r18, r25
    25ce:	28 2b       	or	r18, r24
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	9a 81       	ldd	r25, Y+2	; 0x02
    25d4:	fc 01       	movw	r30, r24
    25d6:	22 83       	std	Z+2, r18	; 0x02
}
    25d8:	28 96       	adiw	r28, 0x08	; 8
    25da:	cd bf       	out	0x3d, r28	; 61
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	08 95       	ret

000025e4 <adc_set_conversion_trigger>:
 * \arg \c 1 - \c ADC_NR_OF_CHANNELS (must be non-zero).
 * \param base_ev_ch Base event channel, if used.
 */
static inline void adc_set_conversion_trigger(struct adc_config *conf,
		enum adc_trigger trig, uint8_t nr_of_ch, uint8_t base_ev_ch)
{
    25e4:	df 93       	push	r29
    25e6:	cf 93       	push	r28
    25e8:	00 d0       	rcall	.+0      	; 0x25ea <adc_set_conversion_trigger+0x6>
    25ea:	00 d0       	rcall	.+0      	; 0x25ec <adc_set_conversion_trigger+0x8>
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	9a 83       	std	Y+2, r25	; 0x02
    25f4:	6b 83       	std	Y+3, r22	; 0x03
    25f6:	7c 83       	std	Y+4, r23	; 0x04
    25f8:	4d 83       	std	Y+5, r20	; 0x05
    25fa:	2e 83       	std	Y+6, r18	; 0x06
	Assert(base_ev_ch <= 7);
#elif XMEGA_D
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
    25fc:	8b 81       	ldd	r24, Y+3	; 0x03
    25fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2600:	82 30       	cpi	r24, 0x02	; 2
    2602:	91 05       	cpc	r25, r1
    2604:	09 f1       	breq	.+66     	; 0x2648 <adc_set_conversion_trigger+0x64>
    2606:	83 30       	cpi	r24, 0x03	; 3
    2608:	91 05       	cpc	r25, r1
    260a:	30 f4       	brcc	.+12     	; 0x2618 <adc_set_conversion_trigger+0x34>
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	69 f0       	breq	.+26     	; 0x262a <adc_set_conversion_trigger+0x46>
    2610:	81 30       	cpi	r24, 0x01	; 1
    2612:	91 05       	cpc	r25, r1
    2614:	a9 f1       	breq	.+106    	; 0x2680 <adc_set_conversion_trigger+0x9c>
    2616:	9c c0       	rjmp	.+312    	; 0x2750 <adc_set_conversion_trigger+0x16c>
    2618:	83 30       	cpi	r24, 0x03	; 3
    261a:	91 05       	cpc	r25, r1
    261c:	09 f4       	brne	.+2      	; 0x2620 <adc_set_conversion_trigger+0x3c>
    261e:	46 c0       	rjmp	.+140    	; 0x26ac <adc_set_conversion_trigger+0xc8>
    2620:	84 30       	cpi	r24, 0x04	; 4
    2622:	91 05       	cpc	r25, r1
    2624:	09 f4       	brne	.+2      	; 0x2628 <adc_set_conversion_trigger+0x44>
    2626:	6b c0       	rjmp	.+214    	; 0x26fe <adc_set_conversion_trigger+0x11a>
    2628:	93 c0       	rjmp	.+294    	; 0x2750 <adc_set_conversion_trigger+0x16c>
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	9a 81       	ldd	r25, Y+2	; 0x02
    262e:	fc 01       	movw	r30, r24
    2630:	81 81       	ldd	r24, Z+1	; 0x01
    2632:	28 2f       	mov	r18, r24
    2634:	27 7f       	andi	r18, 0xF7	; 247
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	fc 01       	movw	r30, r24
    263c:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = ADC_EVACT_NONE_gc;
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	9a 81       	ldd	r25, Y+2	; 0x02
    2642:	fc 01       	movw	r30, r24
    2644:	13 82       	std	Z+3, r1	; 0x03
		break;
    2646:	84 c0       	rjmp	.+264    	; 0x2750 <adc_set_conversion_trigger+0x16c>

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	9a 81       	ldd	r25, Y+2	; 0x02
    264c:	fc 01       	movw	r30, r24
    264e:	81 81       	ldd	r24, Z+1	; 0x01
    2650:	28 2f       	mov	r18, r24
    2652:	27 7f       	andi	r18, 0xF7	; 247
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	9a 81       	ldd	r25, Y+2	; 0x02
    2658:	fc 01       	movw	r30, r24
    265a:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    265c:	8e 81       	ldd	r24, Y+6	; 0x06
    265e:	88 2f       	mov	r24, r24
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	88 0f       	add	r24, r24
    2664:	99 1f       	adc	r25, r25
    2666:	88 0f       	add	r24, r24
    2668:	99 1f       	adc	r25, r25
    266a:	88 0f       	add	r24, r24
    266c:	99 1f       	adc	r25, r25
    266e:	98 2f       	mov	r25, r24
    2670:	8d 81       	ldd	r24, Y+5	; 0x05
    2672:	89 2b       	or	r24, r25
    2674:	28 2f       	mov	r18, r24
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	9a 81       	ldd	r25, Y+2	; 0x02
    267a:	fc 01       	movw	r30, r24
    267c:	23 83       	std	Z+3, r18	; 0x03
				(nr_of_ch << ADC_EVACT_gp);
		break;
    267e:	68 c0       	rjmp	.+208    	; 0x2750 <adc_set_conversion_trigger+0x16c>

#if XMEGA_A
	case ADC_TRIG_FREERUN_SWEEP:
		conf->ctrlb |= ADC_FREERUN_bm;
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	9a 81       	ldd	r25, Y+2	; 0x02
    2684:	fc 01       	movw	r30, r24
    2686:	81 81       	ldd	r24, Z+1	; 0x01
    2688:	28 2f       	mov	r18, r24
    268a:	28 60       	ori	r18, 0x08	; 8
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	9a 81       	ldd	r25, Y+2	; 0x02
    2690:	fc 01       	movw	r30, r24
    2692:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
    2694:	8d 81       	ldd	r24, Y+5	; 0x05
    2696:	81 50       	subi	r24, 0x01	; 1
    2698:	28 2f       	mov	r18, r24
    269a:	22 95       	swap	r18
    269c:	22 0f       	add	r18, r18
    269e:	22 0f       	add	r18, r18
    26a0:	20 7c       	andi	r18, 0xC0	; 192
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	9a 81       	ldd	r25, Y+2	; 0x02
    26a6:	fc 01       	movw	r30, r24
    26a8:	23 83       	std	Z+3, r18	; 0x03
		break;
    26aa:	52 c0       	rjmp	.+164    	; 0x2750 <adc_set_conversion_trigger+0x16c>

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	9a 81       	ldd	r25, Y+2	; 0x02
    26b0:	fc 01       	movw	r30, r24
    26b2:	81 81       	ldd	r24, Z+1	; 0x01
    26b4:	28 2f       	mov	r18, r24
    26b6:	27 7f       	andi	r18, 0xF7	; 247
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	9a 81       	ldd	r25, Y+2	; 0x02
    26bc:	fc 01       	movw	r30, r24
    26be:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	88 2f       	mov	r24, r24
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	00 24       	eor	r0, r0
    26ca:	96 95       	lsr	r25
    26cc:	87 95       	ror	r24
    26ce:	07 94       	ror	r0
    26d0:	96 95       	lsr	r25
    26d2:	87 95       	ror	r24
    26d4:	07 94       	ror	r0
    26d6:	98 2f       	mov	r25, r24
    26d8:	80 2d       	mov	r24, r0
    26da:	28 2f       	mov	r18, r24
				(base_ev_ch << ADC_EVSEL_gp) |
    26dc:	8e 81       	ldd	r24, Y+6	; 0x06
    26de:	88 2f       	mov	r24, r24
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	88 0f       	add	r24, r24
    26e4:	99 1f       	adc	r25, r25
    26e6:	88 0f       	add	r24, r24
    26e8:	99 1f       	adc	r25, r25
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
		break;

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
    26ee:	82 2b       	or	r24, r18
    26f0:	85 60       	ori	r24, 0x05	; 5
    26f2:	28 2f       	mov	r18, r24
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	9a 81       	ldd	r25, Y+2	; 0x02
    26f8:	fc 01       	movw	r30, r24
    26fa:	23 83       	std	Z+3, r18	; 0x03
				(base_ev_ch << ADC_EVSEL_gp) |
				ADC_EVACT_SWEEP_gc;
		break;
    26fc:	29 c0       	rjmp	.+82     	; 0x2750 <adc_set_conversion_trigger+0x16c>

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	9a 81       	ldd	r25, Y+2	; 0x02
    2702:	fc 01       	movw	r30, r24
    2704:	81 81       	ldd	r24, Z+1	; 0x01
    2706:	28 2f       	mov	r18, r24
    2708:	27 7f       	andi	r18, 0xF7	; 247
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	9a 81       	ldd	r25, Y+2	; 0x02
    270e:	fc 01       	movw	r30, r24
    2710:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = ((nr_of_ch - 1) << ADC_SWEEP_gp) |
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	88 2f       	mov	r24, r24
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	00 24       	eor	r0, r0
    271c:	96 95       	lsr	r25
    271e:	87 95       	ror	r24
    2720:	07 94       	ror	r0
    2722:	96 95       	lsr	r25
    2724:	87 95       	ror	r24
    2726:	07 94       	ror	r0
    2728:	98 2f       	mov	r25, r24
    272a:	80 2d       	mov	r24, r0
    272c:	28 2f       	mov	r18, r24
				(base_ev_ch << ADC_EVSEL_gp) |
    272e:	8e 81       	ldd	r24, Y+6	; 0x06
    2730:	88 2f       	mov	r24, r24
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	88 0f       	add	r24, r24
    2736:	99 1f       	adc	r25, r25
    2738:	88 0f       	add	r24, r24
    273a:	99 1f       	adc	r25, r25
    273c:	88 0f       	add	r24, r24
    273e:	99 1f       	adc	r25, r25
				ADC_EVACT_SWEEP_gc;
		break;

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ((nr_of_ch - 1) << ADC_SWEEP_gp) |
    2740:	82 2b       	or	r24, r18
    2742:	86 60       	ori	r24, 0x06	; 6
    2744:	28 2f       	mov	r18, r24
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
    274a:	fc 01       	movw	r30, r24
    274c:	23 83       	std	Z+3, r18	; 0x03
				(base_ev_ch << ADC_EVSEL_gp) |
				ADC_EVACT_SYNCHSWEEP_gc;
		break;
    274e:	00 00       	nop
#endif

	default:
		Assert(0);
	}
}
    2750:	26 96       	adiw	r28, 0x06	; 6
    2752:	cd bf       	out	0x3d, r28	; 61
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <adcch_get_gain_setting>:
 * \param gain Valid gain factor for the measurement.
 *
 * \return Gain setting of type ADC_CH_GAIN_t.
 */
static inline uint8_t adcch_get_gain_setting(uint8_t gain)
{
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	0f 92       	push	r0
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	89 83       	std	Y+1, r24	; 0x01
	switch (gain) {
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	88 2f       	mov	r24, r24
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	88 30       	cpi	r24, 0x08	; 8
    2770:	91 05       	cpc	r25, r1
    2772:	e9 f0       	breq	.+58     	; 0x27ae <adcch_get_gain_setting+0x52>
    2774:	89 30       	cpi	r24, 0x09	; 9
    2776:	91 05       	cpc	r25, r1
    2778:	54 f4       	brge	.+20     	; 0x278e <adcch_get_gain_setting+0x32>
    277a:	82 30       	cpi	r24, 0x02	; 2
    277c:	91 05       	cpc	r25, r1
    277e:	99 f0       	breq	.+38     	; 0x27a6 <adcch_get_gain_setting+0x4a>
    2780:	84 30       	cpi	r24, 0x04	; 4
    2782:	91 05       	cpc	r25, r1
    2784:	91 f0       	breq	.+36     	; 0x27aa <adcch_get_gain_setting+0x4e>
    2786:	81 30       	cpi	r24, 0x01	; 1
    2788:	91 05       	cpc	r25, r1
    278a:	59 f0       	breq	.+22     	; 0x27a2 <adcch_get_gain_setting+0x46>
    278c:	18 c0       	rjmp	.+48     	; 0x27be <adcch_get_gain_setting+0x62>
    278e:	80 32       	cpi	r24, 0x20	; 32
    2790:	91 05       	cpc	r25, r1
    2792:	89 f0       	breq	.+34     	; 0x27b6 <adcch_get_gain_setting+0x5a>
    2794:	80 34       	cpi	r24, 0x40	; 64
    2796:	91 05       	cpc	r25, r1
    2798:	81 f0       	breq	.+32     	; 0x27ba <adcch_get_gain_setting+0x5e>
    279a:	80 31       	cpi	r24, 0x10	; 16
    279c:	91 05       	cpc	r25, r1
    279e:	49 f0       	breq	.+18     	; 0x27b2 <adcch_get_gain_setting+0x56>
    27a0:	0e c0       	rjmp	.+28     	; 0x27be <adcch_get_gain_setting+0x62>
	case 1: return ADC_CH_GAIN_1X_gc;
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	0d c0       	rjmp	.+26     	; 0x27c0 <adcch_get_gain_setting+0x64>

	case 2: return ADC_CH_GAIN_2X_gc;
    27a6:	84 e0       	ldi	r24, 0x04	; 4
    27a8:	0b c0       	rjmp	.+22     	; 0x27c0 <adcch_get_gain_setting+0x64>

	case 4: return ADC_CH_GAIN_4X_gc;
    27aa:	88 e0       	ldi	r24, 0x08	; 8
    27ac:	09 c0       	rjmp	.+18     	; 0x27c0 <adcch_get_gain_setting+0x64>

	case 8: return ADC_CH_GAIN_8X_gc;
    27ae:	8c e0       	ldi	r24, 0x0C	; 12
    27b0:	07 c0       	rjmp	.+14     	; 0x27c0 <adcch_get_gain_setting+0x64>

	case 16: return ADC_CH_GAIN_16X_gc;
    27b2:	80 e1       	ldi	r24, 0x10	; 16
    27b4:	05 c0       	rjmp	.+10     	; 0x27c0 <adcch_get_gain_setting+0x64>

	case 32: return ADC_CH_GAIN_32X_gc;
    27b6:	84 e1       	ldi	r24, 0x14	; 20
    27b8:	03 c0       	rjmp	.+6      	; 0x27c0 <adcch_get_gain_setting+0x64>

	case 64: return ADC_CH_GAIN_64X_gc;
    27ba:	88 e1       	ldi	r24, 0x18	; 24
    27bc:	01 c0       	rjmp	.+2      	; 0x27c0 <adcch_get_gain_setting+0x64>

	default:
		Assert(0);
		return 0;
    27be:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    27c0:	0f 90       	pop	r0
    27c2:	cf 91       	pop	r28
    27c4:	df 91       	pop	r29
    27c6:	08 95       	ret

000027c8 <adcch_set_input>:
 * negative input.
 */
static inline void adcch_set_input(struct adc_channel_config *ch_conf,
		enum adcch_positive_input pos, enum adcch_negative_input neg,
		uint8_t gain)
{
    27c8:	df 93       	push	r29
    27ca:	cf 93       	push	r28
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
    27d0:	27 97       	sbiw	r28, 0x07	; 7
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	89 83       	std	Y+1, r24	; 0x01
    27d8:	9a 83       	std	Y+2, r25	; 0x02
    27da:	6b 83       	std	Y+3, r22	; 0x03
    27dc:	7c 83       	std	Y+4, r23	; 0x04
    27de:	4d 83       	std	Y+5, r20	; 0x05
    27e0:	5e 83       	std	Y+6, r21	; 0x06
    27e2:	2f 83       	std	Y+7, r18	; 0x07
	Assert(gain);

	// Configure for internal input.
	if (pos >= ADCCH_POS_TEMPSENSE) {
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	9c 81       	ldd	r25, Y+4	; 0x04
    27e8:	88 30       	cpi	r24, 0x08	; 8
    27ea:	91 05       	cpc	r25, r1
    27ec:	78 f0       	brcs	.+30     	; 0x280c <adcch_set_input+0x44>
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	9a 81       	ldd	r25, Y+2	; 0x02
    27f2:	fc 01       	movw	r30, r24
    27f4:	10 82       	st	Z, r1
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	88 50       	subi	r24, 0x08	; 8
    27fa:	28 2f       	mov	r18, r24
    27fc:	22 0f       	add	r18, r18
    27fe:	22 0f       	add	r18, r18
    2800:	22 0f       	add	r18, r18
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	9a 81       	ldd	r25, Y+2	; 0x02
    2806:	fc 01       	movw	r30, r24
    2808:	21 83       	std	Z+1, r18	; 0x01
				ADC_CH_MUXPOS_gp;
		return;
    280a:	40 c0       	rjmp	.+128    	; 0x288c <adcch_set_input+0xc4>
	}

	// Configure for single-ended measurement.
	if (neg == ADCCH_NEG_NONE) {
    280c:	8d 81       	ldd	r24, Y+5	; 0x05
    280e:	9e 81       	ldd	r25, Y+6	; 0x06
    2810:	88 30       	cpi	r24, 0x08	; 8
    2812:	91 05       	cpc	r25, r1
    2814:	79 f4       	brne	.+30     	; 0x2834 <adcch_set_input+0x6c>
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	9a 81       	ldd	r25, Y+2	; 0x02
    281a:	21 e0       	ldi	r18, 0x01	; 1
    281c:	fc 01       	movw	r30, r24
    281e:	20 83       	st	Z, r18
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2820:	8b 81       	ldd	r24, Y+3	; 0x03
    2822:	28 2f       	mov	r18, r24
    2824:	22 0f       	add	r18, r18
    2826:	22 0f       	add	r18, r18
    2828:	22 0f       	add	r18, r18
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	9a 81       	ldd	r25, Y+2	; 0x02
    282e:	fc 01       	movw	r30, r24
    2830:	21 83       	std	Z+1, r18	; 0x01
    2832:	2c c0       	rjmp	.+88     	; 0x288c <adcch_set_input+0xc4>
	// Configure for differential measurement.
	} else {
		/* Pins 0-3 can only be used for negative input if the gain
		 * stage is not used, i.e., unity gain.
		 */
		if (neg < ADCCH_NEG_PIN4) {
    2834:	8d 81       	ldd	r24, Y+5	; 0x05
    2836:	9e 81       	ldd	r25, Y+6	; 0x06
    2838:	84 30       	cpi	r24, 0x04	; 4
    283a:	91 05       	cpc	r25, r1
    283c:	90 f4       	brcc	.+36     	; 0x2862 <adcch_set_input+0x9a>
			Assert(gain == 1);

			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	9a 81       	ldd	r25, Y+2	; 0x02
    2842:	22 e0       	ldi	r18, 0x02	; 2
    2844:	fc 01       	movw	r30, r24
    2846:	20 83       	st	Z, r18
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	98 2f       	mov	r25, r24
    284c:	99 0f       	add	r25, r25
    284e:	99 0f       	add	r25, r25
    2850:	99 0f       	add	r25, r25
    2852:	8d 81       	ldd	r24, Y+5	; 0x05
    2854:	29 2f       	mov	r18, r25
    2856:	28 2b       	or	r18, r24
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	9a 81       	ldd	r25, Y+2	; 0x02
    285c:	fc 01       	movw	r30, r24
    285e:	21 83       	std	Z+1, r18	; 0x01
    2860:	15 c0       	rjmp	.+42     	; 0x288c <adcch_set_input+0xc4>
		} else {
		/* Pins 4-7 can be used for all gain settings, including unity
		 * gain, which is available even if the gain stage is active.
		 */
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
					adcch_get_gain_setting(gain);
    2862:	8f 81       	ldd	r24, Y+7	; 0x07
    2864:	7b df       	rcall	.-266    	; 0x275c <adcch_get_gain_setting>
					(neg << ADC_CH_MUXNEG_gp);
		} else {
		/* Pins 4-7 can be used for all gain settings, including unity
		 * gain, which is available even if the gain stage is active.
		 */
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
    2866:	28 2f       	mov	r18, r24
    2868:	23 60       	ori	r18, 0x03	; 3
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	9a 81       	ldd	r25, Y+2	; 0x02
    286e:	fc 01       	movw	r30, r24
    2870:	20 83       	st	Z, r18
					adcch_get_gain_setting(gain);
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    2872:	8b 81       	ldd	r24, Y+3	; 0x03
    2874:	98 2f       	mov	r25, r24
    2876:	99 0f       	add	r25, r25
    2878:	99 0f       	add	r25, r25
    287a:	99 0f       	add	r25, r25
    287c:	8d 81       	ldd	r24, Y+5	; 0x05
    287e:	84 50       	subi	r24, 0x04	; 4
    2880:	29 2f       	mov	r18, r25
    2882:	28 2b       	or	r18, r24
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	9a 81       	ldd	r25, Y+2	; 0x02
    2888:	fc 01       	movw	r30, r24
    288a:	21 83       	std	Z+1, r18	; 0x01
					((neg - ADCCH_NEG_PIN4) <<
					ADC_CH_MUXNEG_gp);
		}
	}
}
    288c:	27 96       	adiw	r28, 0x07	; 7
    288e:	cd bf       	out	0x3d, r28	; 61
    2890:	de bf       	out	0x3e, r29	; 62
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <adcch_set_interrupt_mode>:
 * \param ch_conf Pointer to ADC channel configuration.
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
    2898:	df 93       	push	r29
    289a:	cf 93       	push	r28
    289c:	00 d0       	rcall	.+0      	; 0x289e <adcch_set_interrupt_mode+0x6>
    289e:	0f 92       	push	r0
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	89 83       	std	Y+1, r24	; 0x01
    28a6:	9a 83       	std	Y+2, r25	; 0x02
    28a8:	6b 83       	std	Y+3, r22	; 0x03
    28aa:	7c 83       	std	Y+4, r23	; 0x04
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	9a 81       	ldd	r25, Y+2	; 0x02
    28b0:	fc 01       	movw	r30, r24
    28b2:	82 81       	ldd	r24, Z+2	; 0x02
    28b4:	28 2f       	mov	r18, r24
    28b6:	23 7f       	andi	r18, 0xF3	; 243
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	9a 81       	ldd	r25, Y+2	; 0x02
    28bc:	fc 01       	movw	r30, r24
    28be:	22 83       	std	Z+2, r18	; 0x02
	ch_conf->intctrl |= mode;
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	9a 81       	ldd	r25, Y+2	; 0x02
    28c4:	fc 01       	movw	r30, r24
    28c6:	92 81       	ldd	r25, Z+2	; 0x02
    28c8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ca:	29 2f       	mov	r18, r25
    28cc:	28 2b       	or	r18, r24
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	9a 81       	ldd	r25, Y+2	; 0x02
    28d2:	fc 01       	movw	r30, r24
    28d4:	22 83       	std	Z+2, r18	; 0x02
}
    28d6:	24 96       	adiw	r28, 0x04	; 4
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	de bf       	out	0x3e, r29	; 62
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	08 95       	ret

000028e2 <adcch_enable_interrupt>:
 * \brief Enable interrupts on ADC channel
 *
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	0f 92       	push	r0
    28e8:	0f 92       	push	r0
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	89 83       	std	Y+1, r24	; 0x01
    28f0:	9a 83       	std	Y+2, r25	; 0x02
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	9a 81       	ldd	r25, Y+2	; 0x02
    28f6:	fc 01       	movw	r30, r24
    28f8:	82 81       	ldd	r24, Z+2	; 0x02
    28fa:	28 2f       	mov	r18, r24
    28fc:	2c 7f       	andi	r18, 0xFC	; 252
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	9a 81       	ldd	r25, Y+2	; 0x02
    2902:	fc 01       	movw	r30, r24
    2904:	22 83       	std	Z+2, r18	; 0x02
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    2906:	89 81       	ldd	r24, Y+1	; 0x01
    2908:	9a 81       	ldd	r25, Y+2	; 0x02
    290a:	fc 01       	movw	r30, r24
    290c:	82 81       	ldd	r24, Z+2	; 0x02
    290e:	28 2f       	mov	r18, r24
    2910:	21 60       	ori	r18, 0x01	; 1
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	9a 81       	ldd	r25, Y+2	; 0x02
    2916:	fc 01       	movw	r30, r24
    2918:	22 83       	std	Z+2, r18	; 0x02
}
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	08 95       	ret

00002924 <pmic_init>:
 *
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    292c:	80 ea       	ldi	r24, 0xA0	; 160
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	27 e0       	ldi	r18, 0x07	; 7
    2932:	fc 01       	movw	r30, r24
    2934:	22 83       	std	Z+2, r18	; 0x02
			PMIC_LVL_HIGH;
}
    2936:	cf 91       	pop	r28
    2938:	df 91       	pop	r29
    293a:	08 95       	ret

0000293c <usart_data_register_is_empty>:
 * \brief Check if data register empty flag is set.
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
    293c:	df 93       	push	r29
    293e:	cf 93       	push	r28
    2940:	0f 92       	push	r0
    2942:	0f 92       	push	r0
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
    2948:	89 83       	std	Y+1, r24	; 0x01
    294a:	9a 83       	std	Y+2, r25	; 0x02
	return (usart)->STATUS & USART_DREIF_bm;
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	9a 81       	ldd	r25, Y+2	; 0x02
    2950:	fc 01       	movw	r30, r24
    2952:	81 81       	ldd	r24, Z+1	; 0x01
    2954:	88 2f       	mov	r24, r24
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	80 72       	andi	r24, 0x20	; 32
    295a:	90 70       	andi	r25, 0x00	; 0
    295c:	21 e0       	ldi	r18, 0x01	; 1
    295e:	00 97       	sbiw	r24, 0x00	; 0
    2960:	09 f4       	brne	.+2      	; 0x2964 <usart_data_register_is_empty+0x28>
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	82 2f       	mov	r24, r18
}
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	08 95       	ret

00002970 <usart_tx_is_complete>:
 * Checks if the TX complete interrupt flag is set.
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	0f 92       	push	r0
    2976:	0f 92       	push	r0
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	9a 83       	std	Y+2, r25	; 0x02
	return (usart)->STATUS & USART_TXCIF_bm;
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	9a 81       	ldd	r25, Y+2	; 0x02
    2984:	fc 01       	movw	r30, r24
    2986:	81 81       	ldd	r24, Z+1	; 0x01
    2988:	88 2f       	mov	r24, r24
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	80 74       	andi	r24, 0x40	; 64
    298e:	90 70       	andi	r25, 0x00	; 0
    2990:	21 e0       	ldi	r18, 0x01	; 1
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	09 f4       	brne	.+2      	; 0x2998 <usart_tx_is_complete+0x28>
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	82 2f       	mov	r24, r18
}
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	08 95       	ret

000029a4 <usart_clear_tx_complete>:
 * \brief Clear TX complete interrupt flag.
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
    29a4:	df 93       	push	r29
    29a6:	cf 93       	push	r28
    29a8:	0f 92       	push	r0
    29aa:	0f 92       	push	r0
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	89 83       	std	Y+1, r24	; 0x01
    29b2:	9a 83       	std	Y+2, r25	; 0x02
	(usart)->STATUS = USART_TXCIF_bm;
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
    29b8:	20 e4       	ldi	r18, 0x40	; 64
    29ba:	fc 01       	movw	r30, r24
    29bc:	21 83       	std	Z+1, r18	; 0x01
}
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret

000029c8 <usart_put>:
 *
 * \param usart The USART module.
 * \param txdata The data to be transmited.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
    29c8:	df 93       	push	r29
    29ca:	cf 93       	push	r28
    29cc:	00 d0       	rcall	.+0      	; 0x29ce <usart_put+0x6>
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	89 83       	std	Y+1, r24	; 0x01
    29d4:	9a 83       	std	Y+2, r25	; 0x02
    29d6:	6b 83       	std	Y+3, r22	; 0x03
	(usart)->DATA = txdata;
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	9a 81       	ldd	r25, Y+2	; 0x02
    29dc:	2b 81       	ldd	r18, Y+3	; 0x03
    29de:	fc 01       	movw	r30, r24
    29e0:	20 83       	st	Z, r18
}
    29e2:	23 96       	adiw	r28, 0x03	; 3
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	08 95       	ret

000029ee <usart_get>:
 * \param usart The USART module.
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	0f 92       	push	r0
    29f4:	0f 92       	push	r0
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	89 83       	std	Y+1, r24	; 0x01
    29fc:	9a 83       	std	Y+2, r25	; 0x02
	return (usart)->DATA;
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	9a 81       	ldd	r25, Y+2	; 0x02
    2a02:	fc 01       	movw	r30, r24
    2a04:	80 81       	ld	r24, Z
}
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <usart_spi_transmit>:
 *
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	00 d0       	rcall	.+0      	; 0x2a16 <usart_spi_transmit+0x6>
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	9a 83       	std	Y+2, r25	; 0x02
    2a1e:	6b 83       	std	Y+3, r22	; 0x03
	while (usart_data_register_is_empty(usart) == false);
    2a20:	00 00       	nop
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	9a 81       	ldd	r25, Y+2	; 0x02
    2a26:	8a df       	rcall	.-236    	; 0x293c <usart_data_register_is_empty>
    2a28:	98 2f       	mov	r25, r24
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	89 27       	eor	r24, r25
    2a2e:	88 23       	and	r24, r24
    2a30:	c1 f7       	brne	.-16     	; 0x2a22 <usart_spi_transmit+0x12>
	usart_put(usart, txdata);
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	9a 81       	ldd	r25, Y+2	; 0x02
    2a36:	6b 81       	ldd	r22, Y+3	; 0x03
    2a38:	c7 df       	rcall	.-114    	; 0x29c8 <usart_put>
	while (!usart_tx_is_complete(usart));
    2a3a:	00 00       	nop
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a40:	97 df       	rcall	.-210    	; 0x2970 <usart_tx_is_complete>
    2a42:	98 2f       	mov	r25, r24
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	89 27       	eor	r24, r25
    2a48:	88 23       	and	r24, r24
    2a4a:	c1 f7       	brne	.-16     	; 0x2a3c <usart_spi_transmit+0x2c>
	usart_clear_tx_complete(usart);
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	a9 df       	rcall	.-174    	; 0x29a4 <usart_clear_tx_complete>
	return usart_get(usart);
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	9a 81       	ldd	r25, Y+2	; 0x02
    2a56:	cb df       	rcall	.-106    	; 0x29ee <usart_get>
}
    2a58:	23 96       	adiw	r28, 0x03	; 3
    2a5a:	cd bf       	out	0x3d, r28	; 61
    2a5c:	de bf       	out	0x3e, r29	; 62
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	08 95       	ret

00002a64 <st7565r_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	0f 92       	push	r0
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
    2a6e:	89 83       	std	Y+1, r24	; 0x01
	gpio_set_pin_low(ST7565R_CS_PIN);
    2a70:	8b e2       	ldi	r24, 0x2B	; 43
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	47 dc       	rcall	.-1906   	; 0x2304 <ioport_set_value>
	gpio_set_pin_low(ST7565R_A0_PIN);
    2a76:	88 e1       	ldi	r24, 0x18	; 24
    2a78:	60 e0       	ldi	r22, 0x00	; 0
    2a7a:	44 dc       	rcall	.-1912   	; 0x2304 <ioport_set_value>
#if defined(ST7565R_USART_SPI_INTERFACE)
	usart_spi_transmit(ST7565R_USART_SPI, command);
    2a7c:	80 ea       	ldi	r24, 0xA0	; 160
    2a7e:	99 e0       	ldi	r25, 0x09	; 9
    2a80:	69 81       	ldd	r22, Y+1	; 0x01
    2a82:	c6 df       	rcall	.-116    	; 0x2a10 <usart_spi_transmit>
#elif defined(ST7565R_SPI_INTERFACE)
	spi_write_single(ST7565R_SPI, command);
#endif
	gpio_set_pin_high(ST7565R_CS_PIN);
    2a84:	8b e2       	ldi	r24, 0x2B	; 43
    2a86:	61 e0       	ldi	r22, 0x01	; 1
    2a88:	3d dc       	rcall	.-1926   	; 0x2304 <ioport_set_value>
}
    2a8a:	0f 90       	pop	r0
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	08 95       	ret

00002a92 <st7565r_set_contrast>:
 *                 the LCD.
 *
 * \retval contrast the contrast value written to the LCD controller
 */
static inline uint8_t st7565r_set_contrast(uint8_t contrast)
{
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	0f 92       	push	r0
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	89 83       	std	Y+1, r24	; 0x01
	if (contrast < ST7565R_DISPLAY_CONTRAST_MIN) {
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	8e 31       	cpi	r24, 0x1E	; 30
    2aa2:	10 f4       	brcc	.+4      	; 0x2aa8 <st7565r_set_contrast+0x16>
		contrast = ST7565R_DISPLAY_CONTRAST_MIN;
    2aa4:	8e e1       	ldi	r24, 0x1E	; 30
    2aa6:	89 83       	std	Y+1, r24	; 0x01
	}
	if (contrast > ST7565R_DISPLAY_CONTRAST_MAX) {
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	89 32       	cpi	r24, 0x29	; 41
    2aac:	10 f0       	brcs	.+4      	; 0x2ab2 <st7565r_set_contrast+0x20>
		contrast = ST7565R_DISPLAY_CONTRAST_MAX;
    2aae:	88 e2       	ldi	r24, 0x28	; 40
    2ab0:	89 83       	std	Y+1, r24	; 0x01
	}
	st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME_MODE_SET);
    2ab2:	81 e8       	ldi	r24, 0x81	; 129
    2ab4:	d7 df       	rcall	.-82     	; 0x2a64 <st7565r_write_command>
	st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME(contrast));
    2ab6:	89 81       	ldd	r24, Y+1	; 0x01
    2ab8:	80 95       	com	r24
    2aba:	8f 73       	andi	r24, 0x3F	; 63
    2abc:	d3 df       	rcall	.-90     	; 0x2a64 <st7565r_write_command>
	return contrast;
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ac0:	0f 90       	pop	r0
    2ac2:	cf 91       	pop	r28
    2ac4:	df 91       	pop	r29
    2ac6:	08 95       	ret

00002ac8 <clear_lcd>:
static volatile uint8_t mode =  MODE_GRAPH;

static uint8_t x = 0;

static void clear_lcd(void)
{
    2ac8:	0f 93       	push	r16
    2aca:	1f 93       	push	r17
    2acc:	df 93       	push	r29
    2ace:	cf 93       	push	r28
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62
    gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT, GFX_PIXEL_CLR);
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	60 e0       	ldi	r22, 0x00	; 0
    2ad8:	40 e8       	ldi	r20, 0x80	; 128
    2ada:	20 e2       	ldi	r18, 0x20	; 32
    2adc:	00 e0       	ldi	r16, 0x00	; 0
    2ade:	10 e0       	ldi	r17, 0x00	; 0
    2ae0:	0e 94 c2 06 	call	0xd84	; 0xd84 <gfx_mono_generic_draw_filled_rect>
}
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	1f 91       	pop	r17
    2aea:	0f 91       	pop	r16
    2aec:	08 95       	ret

00002aee <setup_graph_display>:

static void setup_graph_display(void)
{
    2aee:	df 93       	push	r29
    2af0:	cf 93       	push	r28
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
    clear_lcd();
    2af6:	e8 df       	rcall	.-48     	; 0x2ac8 <clear_lcd>
	x = 0;
    2af8:	10 92 16 22 	sts	0x2216, r1
}
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <setup_text_display>:

static void setup_text_display(void)
{
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
    clear_lcd();
    2b0a:	de df       	rcall	.-68     	; 0x2ac8 <clear_lcd>
}
    2b0c:	cf 91       	pop	r28
    2b0e:	df 91       	pop	r29
    2b10:	08 95       	ret

00002b12 <adc_handler>:

static void adc_handler(ADC_t *adc, uint8_t ch_mask, adc_result_t result)
{
    2b12:	df 93       	push	r29
    2b14:	cf 93       	push	r28
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	25 97       	sbiw	r28, 0x05	; 5
    2b1c:	cd bf       	out	0x3d, r28	; 61
    2b1e:	de bf       	out	0x3e, r29	; 62
    2b20:	89 83       	std	Y+1, r24	; 0x01
    2b22:	9a 83       	std	Y+2, r25	; 0x02
    2b24:	6b 83       	std	Y+3, r22	; 0x03
    2b26:	4c 83       	std	Y+4, r20	; 0x04
    2b28:	5d 83       	std	Y+5, r21	; 0x05
    scaled_light_reading = GFX_MONO_LCD_HEIGHT - (result / SCALED_LCD_HEIGHT);
    2b2a:	20 91 00 20 	lds	r18, 0x2000
    2b2e:	30 91 01 20 	lds	r19, 0x2001
    2b32:	8c 81       	ldd	r24, Y+4	; 0x04
    2b34:	9d 81       	ldd	r25, Y+5	; 0x05
    2b36:	b9 01       	movw	r22, r18
    2b38:	fa d0       	rcall	.+500    	; 0x2d2e <__udivmodhi4>
    2b3a:	9b 01       	movw	r18, r22
    2b3c:	c9 01       	movw	r24, r18
    2b3e:	90 e2       	ldi	r25, 0x20	; 32
    2b40:	29 2f       	mov	r18, r25
    2b42:	28 1b       	sub	r18, r24
    2b44:	82 2f       	mov	r24, r18
    2b46:	80 93 14 22 	sts	0x2214, r24
    adc_start_conversion(adc, ch_mask);
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4e:	6b 81       	ldd	r22, Y+3	; 0x03
    2b50:	7b dc       	rcall	.-1802   	; 0x2448 <adc_start_conversion>
}
    2b52:	25 96       	adiw	r28, 0x05	; 5
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	de bf       	out	0x3e, r29	; 62
    2b58:	cf 91       	pop	r28
    2b5a:	df 91       	pop	r29
    2b5c:	08 95       	ret

00002b5e <setup_lcd>:

static void setup_lcd(void)
{
    2b5e:	df 93       	push	r29
    2b60:	cf 93       	push	r28
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
    gfx_mono_init();
    2b66:	0e 94 07 05 	call	0xa0e	; 0xa0e <gfx_mono_st7565r_init>
    ioport_set_pin_high(NHD_C12832A1Z_BACKLIGHT);
    2b6a:	84 e2       	ldi	r24, 0x24	; 36
    2b6c:	ef db       	rcall	.-2082   	; 0x234c <ioport_set_pin_high>
    st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);
    2b6e:	8e e1       	ldi	r24, 0x1E	; 30
    2b70:	90 df       	rcall	.-224    	; 0x2a92 <st7565r_set_contrast>
}
    2b72:	cf 91       	pop	r28
    2b74:	df 91       	pop	r29
    2b76:	08 95       	ret

00002b78 <setup_adc>:

static void setup_adc(void)
{	
    2b78:	df 93       	push	r29
    2b7a:	cf 93       	push	r28
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    adc_read_configuration(&ADCA, &adc_config);
    2b80:	2a e0       	ldi	r18, 0x0A	; 10
    2b82:	32 e2       	ldi	r19, 0x22	; 34
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	92 e0       	ldi	r25, 0x02	; 2
    2b88:	b9 01       	movw	r22, r18
    2b8a:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <adc_read_configuration>
    adcch_read_configuration(&ADCA, ADC_CH0, &adcch_config);
    2b8e:	21 e1       	ldi	r18, 0x11	; 17
    2b90:	32 e2       	ldi	r19, 0x22	; 34
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	92 e0       	ldi	r25, 0x02	; 2
    2b96:	61 e0       	ldi	r22, 0x01	; 1
    2b98:	a9 01       	movw	r20, r18
    2b9a:	3b d8       	rcall	.-3978   	; 0x1c12 <adcch_read_configuration>
	
    adc_set_conversion_parameters(&adc_config, ADC_SIGN_OFF, ADC_RES_12, ADC_REF_BANDGAP);
    2b9c:	8a e0       	ldi	r24, 0x0A	; 10
    2b9e:	92 e2       	ldi	r25, 0x22	; 34
    2ba0:	60 e0       	ldi	r22, 0x00	; 0
    2ba2:	70 e0       	ldi	r23, 0x00	; 0
    2ba4:	40 e0       	ldi	r20, 0x00	; 0
    2ba6:	50 e0       	ldi	r21, 0x00	; 0
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	da dc       	rcall	.-1612   	; 0x2562 <adc_set_conversion_parameters>
	
    adc_set_clock_rate(&adc_config, 200000UL);
    2bae:	8a e0       	ldi	r24, 0x0A	; 10
    2bb0:	92 e2       	ldi	r25, 0x22	; 34
    2bb2:	40 e4       	ldi	r20, 0x40	; 64
    2bb4:	5d e0       	ldi	r21, 0x0D	; 13
    2bb6:	63 e0       	ldi	r22, 0x03	; 3
    2bb8:	70 e0       	ldi	r23, 0x00	; 0
    2bba:	6b dc       	rcall	.-1834   	; 0x2492 <adc_set_clock_rate>
    adc_set_conversion_trigger(&adc_config, ADC_TRIG_MANUAL, 0, 0);
    2bbc:	8a e0       	ldi	r24, 0x0A	; 10
    2bbe:	92 e2       	ldi	r25, 0x22	; 34
    2bc0:	60 e0       	ldi	r22, 0x00	; 0
    2bc2:	70 e0       	ldi	r23, 0x00	; 0
    2bc4:	40 e0       	ldi	r20, 0x00	; 0
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	0d dd       	rcall	.-1510   	; 0x25e4 <adc_set_conversion_trigger>
	
    adc_write_configuration(&ADCA, &adc_config);
    2bca:	2a e0       	ldi	r18, 0x0A	; 10
    2bcc:	32 e2       	ldi	r19, 0x22	; 34
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	92 e0       	ldi	r25, 0x02	; 2
    2bd2:	b9 01       	movw	r22, r18
    2bd4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <adc_write_configuration>
    adc_set_callback(&ADCA, &adc_handler);
    2bd8:	29 e8       	ldi	r18, 0x89	; 137
    2bda:	35 e1       	ldi	r19, 0x15	; 21
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	92 e0       	ldi	r25, 0x02	; 2
    2be0:	b9 01       	movw	r22, r18
    2be2:	81 d8       	rcall	.-3838   	; 0x1ce6 <adc_set_callback>
	
    adcch_set_input(&adcch_config, LIGHT_SENSOR_ADC_INPUT, ADCCH_NEG_NONE, 1);
    2be4:	81 e1       	ldi	r24, 0x11	; 17
    2be6:	92 e2       	ldi	r25, 0x22	; 34
    2be8:	60 e0       	ldi	r22, 0x00	; 0
    2bea:	70 e0       	ldi	r23, 0x00	; 0
    2bec:	48 e0       	ldi	r20, 0x08	; 8
    2bee:	50 e0       	ldi	r21, 0x00	; 0
    2bf0:	21 e0       	ldi	r18, 0x01	; 1
    2bf2:	ea dd       	rcall	.-1068   	; 0x27c8 <adcch_set_input>
    adcch_set_interrupt_mode(&adcch_config, ADCCH_MODE_COMPLETE);
    2bf4:	81 e1       	ldi	r24, 0x11	; 17
    2bf6:	92 e2       	ldi	r25, 0x22	; 34
    2bf8:	60 e0       	ldi	r22, 0x00	; 0
    2bfa:	70 e0       	ldi	r23, 0x00	; 0
    2bfc:	4d de       	rcall	.-870    	; 0x2898 <adcch_set_interrupt_mode>
    adcch_enable_interrupt(&adcch_config);
    2bfe:	81 e1       	ldi	r24, 0x11	; 17
    2c00:	92 e2       	ldi	r25, 0x22	; 34
    2c02:	6f de       	rcall	.-802    	; 0x28e2 <adcch_enable_interrupt>
    adcch_write_configuration(&ADCA, ADC_CH0, &adcch_config);	
    2c04:	21 e1       	ldi	r18, 0x11	; 17
    2c06:	32 e2       	ldi	r19, 0x22	; 34
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	92 e0       	ldi	r25, 0x02	; 2
    2c0c:	61 e0       	ldi	r22, 0x01	; 1
    2c0e:	a9 01       	movw	r20, r18
    2c10:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <adcch_write_configuration>
}
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	08 95       	ret

00002c1a <update_graph_display>:

void update_graph_display(void)
{
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	df 93       	push	r29
    2c20:	cf 93       	push	r28
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    // Clear just ahead of the pixel position
    gfx_mono_draw_filled_rect(x, 0, 6, GFX_MONO_LCD_HEIGHT, GFX_PIXEL_CLR);
    2c26:	80 91 16 22 	lds	r24, 0x2216
    2c2a:	60 e0       	ldi	r22, 0x00	; 0
    2c2c:	46 e0       	ldi	r20, 0x06	; 6
    2c2e:	20 e2       	ldi	r18, 0x20	; 32
    2c30:	00 e0       	ldi	r16, 0x00	; 0
    2c32:	10 e0       	ldi	r17, 0x00	; 0
    2c34:	0e 94 c2 06 	call	0xd84	; 0xd84 <gfx_mono_generic_draw_filled_rect>
            
    // Draw the pixel 
    gfx_mono_draw_pixel(x, scaled_light_reading, GFX_PIXEL_SET);
    2c38:	80 91 16 22 	lds	r24, 0x2216
    2c3c:	90 91 14 22 	lds	r25, 0x2214
    2c40:	69 2f       	mov	r22, r25
    2c42:	41 e0       	ldi	r20, 0x01	; 1
    2c44:	0e 94 2c 05 	call	0xa58	; 0xa58 <gfx_mono_st7565r_draw_pixel>
    
    x = (x >=  GFX_MONO_LCD_WIDTH) ? 0 : ++x;
    2c48:	80 91 16 22 	lds	r24, 0x2216
    2c4c:	88 23       	and	r24, r24
    2c4e:	44 f0       	brlt	.+16     	; 0x2c60 <update_graph_display+0x46>
    2c50:	80 91 16 22 	lds	r24, 0x2216
    2c54:	8f 5f       	subi	r24, 0xFF	; 255
    2c56:	80 93 16 22 	sts	0x2216, r24
    2c5a:	80 91 16 22 	lds	r24, 0x2216
    2c5e:	01 c0       	rjmp	.+2      	; 0x2c62 <update_graph_display+0x48>
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	80 93 16 22 	sts	0x2216, r24
}
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	1f 91       	pop	r17
    2c6c:	0f 91       	pop	r16
    2c6e:	08 95       	ret

00002c70 <update_text_display>:

void update_text_display(void)
{
    2c70:	df 93       	push	r29
    2c72:	cf 93       	push	r28
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
    
}
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	08 95       	ret

00002c7e <set_mode>:

void set_mode(void)
{
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
	if (gpio_pin_is_low(GPIO_PUSH_BUTTON_0))
    2c86:	85 e2       	ldi	r24, 0x25	; 37
    2c88:	78 db       	rcall	.-2320   	; 0x237a <ioport_pin_is_low>
    2c8a:	88 23       	and	r24, r24
    2c8c:	19 f0       	breq	.+6      	; 0x2c94 <set_mode+0x16>
	{
	    mode = MODE_GRAPH;	
    2c8e:	10 92 15 22 	sts	0x2215, r1
		setup_graph_display();
    2c92:	2d df       	rcall	.-422    	; 0x2aee <setup_graph_display>
	}
	
	if (gpio_pin_is_low(GPIO_PUSH_BUTTON_1))
    2c94:	89 e2       	ldi	r24, 0x29	; 41
    2c96:	71 db       	rcall	.-2334   	; 0x237a <ioport_pin_is_low>
    2c98:	88 23       	and	r24, r24
    2c9a:	21 f0       	breq	.+8      	; 0x2ca4 <set_mode+0x26>
	{
		mode = MODE_TEXT;
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	80 93 15 22 	sts	0x2215, r24
		setup_text_display();
    2ca2:	2f df       	rcall	.-418    	; 0x2b02 <setup_text_display>
	}
}
    2ca4:	cf 91       	pop	r28
    2ca6:	df 91       	pop	r29
    2ca8:	08 95       	ret

00002caa <main>:

int main(void)
{	
    2caa:	df 93       	push	r29
    2cac:	cf 93       	push	r28
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
    // Initialize the board
    board_init();
    2cb2:	0e 94 c7 07 	call	0xf8e	; 0xf8e <board_init>
    sysclk_init();
    2cb6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <sysclk_init>
    pmic_init();
    2cba:	34 de       	rcall	.-920    	; 0x2924 <pmic_init>
    cpu_irq_enable();
    2cbc:	78 94       	sei
		
    // Setup the LCD and ADC
    setup_lcd();
    2cbe:	4f df       	rcall	.-354    	; 0x2b5e <setup_lcd>
    setup_adc();
    2cc0:	5b df       	rcall	.-330    	; 0x2b78 <setup_adc>

    adc_enable(&ADCA);
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	92 e0       	ldi	r25, 0x02	; 2
    2cc6:	0e 94 b3 0c 	call	0x1966	; 0x1966 <adc_enable>
    adc_start_conversion(&ADCA, ADC_CH0);
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	92 e0       	ldi	r25, 0x02	; 2
    2cce:	61 e0       	ldi	r22, 0x01	; 1
    2cd0:	bb db       	rcall	.-2186   	; 0x2448 <adc_start_conversion>
    2cd2:	01 c0       	rjmp	.+2      	; 0x2cd6 <main+0x2c>
		
        if (mode == MODE_GRAPH)
            update_graph_display();
        else if (mode == MODE_TEXT)
            update_text_display();
    }    	
    2cd4:	00 00       	nop
    adc_enable(&ADCA);
    adc_start_conversion(&ADCA, ADC_CH0);
		
    while (1) 
    {
		set_mode();
    2cd6:	d3 df       	rcall	.-90     	; 0x2c7e <set_mode>
		
        if (mode == MODE_GRAPH)
    2cd8:	80 91 15 22 	lds	r24, 0x2215
    2cdc:	88 23       	and	r24, r24
    2cde:	11 f4       	brne	.+4      	; 0x2ce4 <main+0x3a>
            update_graph_display();
    2ce0:	9c df       	rcall	.-200    	; 0x2c1a <update_graph_display>
        else if (mode == MODE_TEXT)
            update_text_display();
    }    	
    2ce2:	f9 cf       	rjmp	.-14     	; 0x2cd6 <main+0x2c>
    {
		set_mode();
		
        if (mode == MODE_GRAPH)
            update_graph_display();
        else if (mode == MODE_TEXT)
    2ce4:	80 91 15 22 	lds	r24, 0x2215
    2ce8:	81 30       	cpi	r24, 0x01	; 1
    2cea:	a1 f7       	brne	.-24     	; 0x2cd4 <main+0x2a>
            update_text_display();
    2cec:	c1 df       	rcall	.-126    	; 0x2c70 <update_text_display>
    }    	
    2cee:	f3 cf       	rjmp	.-26     	; 0x2cd6 <main+0x2c>

00002cf0 <__mulsi3>:
    2cf0:	62 9f       	mul	r22, r18
    2cf2:	d0 01       	movw	r26, r0
    2cf4:	73 9f       	mul	r23, r19
    2cf6:	f0 01       	movw	r30, r0
    2cf8:	82 9f       	mul	r24, r18
    2cfa:	e0 0d       	add	r30, r0
    2cfc:	f1 1d       	adc	r31, r1
    2cfe:	64 9f       	mul	r22, r20
    2d00:	e0 0d       	add	r30, r0
    2d02:	f1 1d       	adc	r31, r1
    2d04:	92 9f       	mul	r25, r18
    2d06:	f0 0d       	add	r31, r0
    2d08:	83 9f       	mul	r24, r19
    2d0a:	f0 0d       	add	r31, r0
    2d0c:	74 9f       	mul	r23, r20
    2d0e:	f0 0d       	add	r31, r0
    2d10:	65 9f       	mul	r22, r21
    2d12:	f0 0d       	add	r31, r0
    2d14:	99 27       	eor	r25, r25
    2d16:	72 9f       	mul	r23, r18
    2d18:	b0 0d       	add	r27, r0
    2d1a:	e1 1d       	adc	r30, r1
    2d1c:	f9 1f       	adc	r31, r25
    2d1e:	63 9f       	mul	r22, r19
    2d20:	b0 0d       	add	r27, r0
    2d22:	e1 1d       	adc	r30, r1
    2d24:	f9 1f       	adc	r31, r25
    2d26:	bd 01       	movw	r22, r26
    2d28:	cf 01       	movw	r24, r30
    2d2a:	11 24       	eor	r1, r1
    2d2c:	08 95       	ret

00002d2e <__udivmodhi4>:
    2d2e:	aa 1b       	sub	r26, r26
    2d30:	bb 1b       	sub	r27, r27
    2d32:	51 e1       	ldi	r21, 0x11	; 17
    2d34:	07 c0       	rjmp	.+14     	; 0x2d44 <__udivmodhi4_ep>

00002d36 <__udivmodhi4_loop>:
    2d36:	aa 1f       	adc	r26, r26
    2d38:	bb 1f       	adc	r27, r27
    2d3a:	a6 17       	cp	r26, r22
    2d3c:	b7 07       	cpc	r27, r23
    2d3e:	10 f0       	brcs	.+4      	; 0x2d44 <__udivmodhi4_ep>
    2d40:	a6 1b       	sub	r26, r22
    2d42:	b7 0b       	sbc	r27, r23

00002d44 <__udivmodhi4_ep>:
    2d44:	88 1f       	adc	r24, r24
    2d46:	99 1f       	adc	r25, r25
    2d48:	5a 95       	dec	r21
    2d4a:	a9 f7       	brne	.-22     	; 0x2d36 <__udivmodhi4_loop>
    2d4c:	80 95       	com	r24
    2d4e:	90 95       	com	r25
    2d50:	bc 01       	movw	r22, r24
    2d52:	cd 01       	movw	r24, r26
    2d54:	08 95       	ret

00002d56 <__udivmodsi4>:
    2d56:	a1 e2       	ldi	r26, 0x21	; 33
    2d58:	1a 2e       	mov	r1, r26
    2d5a:	aa 1b       	sub	r26, r26
    2d5c:	bb 1b       	sub	r27, r27
    2d5e:	fd 01       	movw	r30, r26
    2d60:	0d c0       	rjmp	.+26     	; 0x2d7c <__udivmodsi4_ep>

00002d62 <__udivmodsi4_loop>:
    2d62:	aa 1f       	adc	r26, r26
    2d64:	bb 1f       	adc	r27, r27
    2d66:	ee 1f       	adc	r30, r30
    2d68:	ff 1f       	adc	r31, r31
    2d6a:	a2 17       	cp	r26, r18
    2d6c:	b3 07       	cpc	r27, r19
    2d6e:	e4 07       	cpc	r30, r20
    2d70:	f5 07       	cpc	r31, r21
    2d72:	20 f0       	brcs	.+8      	; 0x2d7c <__udivmodsi4_ep>
    2d74:	a2 1b       	sub	r26, r18
    2d76:	b3 0b       	sbc	r27, r19
    2d78:	e4 0b       	sbc	r30, r20
    2d7a:	f5 0b       	sbc	r31, r21

00002d7c <__udivmodsi4_ep>:
    2d7c:	66 1f       	adc	r22, r22
    2d7e:	77 1f       	adc	r23, r23
    2d80:	88 1f       	adc	r24, r24
    2d82:	99 1f       	adc	r25, r25
    2d84:	1a 94       	dec	r1
    2d86:	69 f7       	brne	.-38     	; 0x2d62 <__udivmodsi4_loop>
    2d88:	60 95       	com	r22
    2d8a:	70 95       	com	r23
    2d8c:	80 95       	com	r24
    2d8e:	90 95       	com	r25
    2d90:	9b 01       	movw	r18, r22
    2d92:	ac 01       	movw	r20, r24
    2d94:	bd 01       	movw	r22, r26
    2d96:	cf 01       	movw	r24, r30
    2d98:	08 95       	ret

00002d9a <_exit>:
    2d9a:	f8 94       	cli

00002d9c <__stop_program>:
    2d9c:	ff cf       	rjmp	.-2      	; 0x2d9c <__stop_program>
